
Jayraj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000406  00800060  00800060  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000101  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ae  00000000  00000000  00000489  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000fb  00000000  00000000  00000537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000156  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_4>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  54:	81 00       	.word	0x0081	; ????
  56:	84 00       	.word	0x0084	; ????
  58:	87 00       	.word	0x0087	; ????
  5a:	8a 00       	.word	0x008a	; ????
  5c:	8d 00       	.word	0x008d	; ????
  5e:	90 00       	.word	0x0090	; ????
  60:	93 00       	.word	0x0093	; ????
  62:	96 00       	.word	0x0096	; ????
  64:	d2 00       	.word	0x00d2	; ????
  66:	d4 00       	.word	0x00d4	; ????
  68:	d6 00       	.word	0x00d6	; ????
  6a:	d8 00       	.word	0x00d8	; ????
  6c:	da 00       	.word	0x00da	; ????
  6e:	dc 00       	.word	0x00dc	; ????
  70:	de 00       	.word	0x00de	; ????
  72:	e0 00       	.word	0x00e0	; ????
  74:	f9 00       	.word	0x00f9	; ????
  76:	fb 00       	.word	0x00fb	; ????
  78:	fd 00       	.word	0x00fd	; ????
  7a:	ff 00       	.word	0x00ff	; ????
  7c:	01 01       	movw	r0, r2
  7e:	03 01       	movw	r0, r6
  80:	05 01       	movw	r0, r10
  82:	07 01       	movw	r0, r14

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_clear_bss>:
  90:	24 e0       	ldi	r18, 0x04	; 4
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	a6 36       	cpi	r26, 0x66	; 102
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
  a0:	0e 94 56 00 	call	0xac	; 0xac <main>
  a4:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <main>:
int cube[8][8][8]={{0}},x=0,y=0;
static  int z=0;

int main(void)
{
	DDRA=0b11111111; // DATA LINES WE SET AS INPUT RATHER THAN OUTPUT. HEX CODE WASGENERATED 
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b11111111;
  b0:	87 bb       	out	0x17, r24	; 23
	DDRC=0b11111111; 
  b2:	84 bb       	out	0x14, r24	; 20
	TCCR2|=(1<<CS20)| (1<<CS22)|(1<<WGM21);
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	8d 60       	ori	r24, 0x0D	; 13
  b8:	85 bd       	out	0x25, r24	; 37
	TIMSK|=(1<<OCIE2);
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	89 bf       	out	0x39, r24	; 57
	OCR2=10;
  c0:	8a e0       	ldi	r24, 0x0A	; 10
  c2:	83 bd       	out	0x23, r24	; 35
	sei();
  c4:	78 94       	sei
		

		
		
		
    }
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x1a>

000000c8 <__vector_4>:
}
ISR(TIMER2_COMP_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	cf 93       	push	r28
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	switch (z)
  ec:	e0 91 60 00 	lds	r30, 0x0060
  f0:	f0 91 61 00 	lds	r31, 0x0061
  f4:	e8 30       	cpi	r30, 0x08	; 8
  f6:	f1 05       	cpc	r31, r1
  f8:	d8 f4       	brcc	.+54     	; 0x130 <__vector_4+0x68>
  fa:	e6 5d       	subi	r30, 0xD6	; 214
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	0c 94 37 01 	jmp	0x26e	; 0x26e <__tablejump2__>
	{
		
		case 0: flor=0b00000001; break;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	88 bb       	out	0x18, r24	; 24
 106:	14 c0       	rjmp	.+40     	; 0x130 <__vector_4+0x68>
		case 1: flor=0b00000010; break;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	11 c0       	rjmp	.+34     	; 0x130 <__vector_4+0x68>
		case 2: flor=0b00000100; break;
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	88 bb       	out	0x18, r24	; 24
 112:	0e c0       	rjmp	.+28     	; 0x130 <__vector_4+0x68>
		case 3: flor=0b00001000; break;
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	88 bb       	out	0x18, r24	; 24
 118:	0b c0       	rjmp	.+22     	; 0x130 <__vector_4+0x68>
		case 4: flor=0b00010000; break;
 11a:	80 e1       	ldi	r24, 0x10	; 16
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	08 c0       	rjmp	.+16     	; 0x130 <__vector_4+0x68>
		case 5: flor=0b00100000; break;
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	88 bb       	out	0x18, r24	; 24
 124:	05 c0       	rjmp	.+10     	; 0x130 <__vector_4+0x68>
		case 6: flor=0b01000000; break;
 126:	80 e4       	ldi	r24, 0x40	; 64
 128:	88 bb       	out	0x18, r24	; 24
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__vector_4+0x68>
		case 7: flor=0b10000000; break;
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	88 bb       	out	0x18, r24	; 24
		
	}
	
	
	addressbus=0b00000000;
 130:	15 ba       	out	0x15, r1	; 21
	for (y=0;y<8;y++)
 132:	10 92 63 00 	sts	0x0063, r1
 136:	10 92 62 00 	sts	0x0062, r1
			case 1: addressbus=0b00000010; break;
			case 2: addressbus=0b00000011; break;
			case 3: addressbus=0b00000100; break;
			case 4: addressbus=0b00000101; break;
			case 5: addressbus=0b00000110; break;
			case 6: addressbus=0b00000111; break;
 13a:	c7 e0       	ldi	r28, 0x07	; 7
			case 0: addressbus=0b00000001; break;
			case 1: addressbus=0b00000010; break;
			case 2: addressbus=0b00000011; break;
			case 3: addressbus=0b00000100; break;
			case 4: addressbus=0b00000101; break;
			case 5: addressbus=0b00000110; break;
 13c:	76 e0       	ldi	r23, 0x06	; 6
		{
			case 0: addressbus=0b00000001; break;
			case 1: addressbus=0b00000010; break;
			case 2: addressbus=0b00000011; break;
			case 3: addressbus=0b00000100; break;
			case 4: addressbus=0b00000101; break;
 13e:	65 e0       	ldi	r22, 0x05	; 5
		switch(y)
		{
			case 0: addressbus=0b00000001; break;
			case 1: addressbus=0b00000010; break;
			case 2: addressbus=0b00000011; break;
			case 3: addressbus=0b00000100; break;
 140:	54 e0       	ldi	r21, 0x04	; 4
		}
		switch(y)
		{
			case 0: addressbus=0b00000001; break;
			case 1: addressbus=0b00000010; break;
			case 2: addressbus=0b00000011; break;
 142:	43 e0       	ldi	r20, 0x03	; 3
			}
		}
		switch(y)
		{
			case 0: addressbus=0b00000001; break;
			case 1: addressbus=0b00000010; break;
 144:	32 e0       	ldi	r19, 0x02	; 2
				}
			}
		}
		switch(y)
		{
			case 0: addressbus=0b00000001; break;
 146:	21 e0       	ldi	r18, 0x01	; 1
	
	
	addressbus=0b00000000;
	for (y=0;y<8;y++)
	{
		datalines=0b00000000;
 148:	1b ba       	out	0x1b, r1	; 27
		for (x=0;x<8;x++)
 14a:	10 92 65 00 	sts	0x0065, r1
 14e:	10 92 64 00 	sts	0x0064, r1
 152:	e0 e0       	ldi	r30, 0x00	; 0
 154:	f0 e0       	ldi	r31, 0x00	; 0
		{
			if (cube[z][y][x]==1)
 156:	a0 91 60 00 	lds	r26, 0x0060
 15a:	b0 91 61 00 	lds	r27, 0x0061
 15e:	aa 0f       	add	r26, r26
 160:	bb 1f       	adc	r27, r27
 162:	aa 0f       	add	r26, r26
 164:	bb 1f       	adc	r27, r27
 166:	aa 0f       	add	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	80 91 62 00 	lds	r24, 0x0062
 16e:	90 91 63 00 	lds	r25, 0x0063
 172:	a8 0f       	add	r26, r24
 174:	b9 1f       	adc	r27, r25
 176:	aa 0f       	add	r26, r26
 178:	bb 1f       	adc	r27, r27
 17a:	aa 0f       	add	r26, r26
 17c:	bb 1f       	adc	r27, r27
 17e:	aa 0f       	add	r26, r26
 180:	bb 1f       	adc	r27, r27
 182:	ae 0f       	add	r26, r30
 184:	bf 1f       	adc	r27, r31
 186:	aa 0f       	add	r26, r26
 188:	bb 1f       	adc	r27, r27
 18a:	aa 59       	subi	r26, 0x9A	; 154
 18c:	bf 4f       	sbci	r27, 0xFF	; 255
 18e:	8d 91       	ld	r24, X+
 190:	9c 91       	ld	r25, X
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	b1 f4       	brne	.+44     	; 0x1c2 <__vector_4+0xfa>
			{
				switch (x)
 196:	e8 30       	cpi	r30, 0x08	; 8
 198:	f1 05       	cpc	r31, r1
 19a:	98 f4       	brcc	.+38     	; 0x1c2 <__vector_4+0xfa>
 19c:	ee 5c       	subi	r30, 0xCE	; 206
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	0c 94 37 01 	jmp	0x26e	; 0x26e <__tablejump2__>
				{
					case 0: datalines|=1<<PINA0; break;
 1a4:	d8 9a       	sbi	0x1b, 0	; 27
 1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <__vector_4+0xfa>
					case 1: datalines|=1<<PINA1; break;
 1a8:	d9 9a       	sbi	0x1b, 1	; 27
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <__vector_4+0xfa>
					case 2: datalines|=1<<PINA2; break;
 1ac:	da 9a       	sbi	0x1b, 2	; 27
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <__vector_4+0xfa>
					case 3: datalines|=1<<PINA3; break;
 1b0:	db 9a       	sbi	0x1b, 3	; 27
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <__vector_4+0xfa>
					case 4: datalines|=1<<PINA4; break;
 1b4:	dc 9a       	sbi	0x1b, 4	; 27
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <__vector_4+0xfa>
					case 5: datalines|=1<<PINA5; break;
 1b8:	dd 9a       	sbi	0x1b, 5	; 27
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <__vector_4+0xfa>
					case 6: datalines|=1<<PINA6; break;
 1bc:	de 9a       	sbi	0x1b, 6	; 27
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <__vector_4+0xfa>
					case 7: datalines|=1<<PINA7; break;
 1c0:	df 9a       	sbi	0x1b, 7	; 27
	
	addressbus=0b00000000;
	for (y=0;y<8;y++)
	{
		datalines=0b00000000;
		for (x=0;x<8;x++)
 1c2:	e0 91 64 00 	lds	r30, 0x0064
 1c6:	f0 91 65 00 	lds	r31, 0x0065
 1ca:	31 96       	adiw	r30, 0x01	; 1
 1cc:	f0 93 65 00 	sts	0x0065, r31
 1d0:	e0 93 64 00 	sts	0x0064, r30
 1d4:	e8 30       	cpi	r30, 0x08	; 8
 1d6:	f1 05       	cpc	r31, r1
 1d8:	0c f4       	brge	.+2      	; 0x1dc <__vector_4+0x114>
 1da:	bd cf       	rjmp	.-134    	; 0x156 <__vector_4+0x8e>
					case 6: datalines|=1<<PINA6; break;
					case 7: datalines|=1<<PINA7; break;
				}
			}
		}
		switch(y)
 1dc:	e0 91 62 00 	lds	r30, 0x0062
 1e0:	f0 91 63 00 	lds	r31, 0x0063
 1e4:	e8 30       	cpi	r30, 0x08	; 8
 1e6:	f1 05       	cpc	r31, r1
 1e8:	98 f4       	brcc	.+38     	; 0x210 <__vector_4+0x148>
 1ea:	e6 5c       	subi	r30, 0xC6	; 198
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	0c 94 37 01 	jmp	0x26e	; 0x26e <__tablejump2__>
		{
			case 0: addressbus=0b00000001; break;
 1f2:	25 bb       	out	0x15, r18	; 21
 1f4:	0d c0       	rjmp	.+26     	; 0x210 <__vector_4+0x148>
			case 1: addressbus=0b00000010; break;
 1f6:	35 bb       	out	0x15, r19	; 21
 1f8:	0b c0       	rjmp	.+22     	; 0x210 <__vector_4+0x148>
			case 2: addressbus=0b00000011; break;
 1fa:	45 bb       	out	0x15, r20	; 21
 1fc:	09 c0       	rjmp	.+18     	; 0x210 <__vector_4+0x148>
			case 3: addressbus=0b00000100; break;
 1fe:	55 bb       	out	0x15, r21	; 21
 200:	07 c0       	rjmp	.+14     	; 0x210 <__vector_4+0x148>
			case 4: addressbus=0b00000101; break;
 202:	65 bb       	out	0x15, r22	; 21
 204:	05 c0       	rjmp	.+10     	; 0x210 <__vector_4+0x148>
			case 5: addressbus=0b00000110; break;
 206:	75 bb       	out	0x15, r23	; 21
 208:	03 c0       	rjmp	.+6      	; 0x210 <__vector_4+0x148>
			case 6: addressbus=0b00000111; break;
 20a:	c5 bb       	out	0x15, r28	; 21
 20c:	01 c0       	rjmp	.+2      	; 0x210 <__vector_4+0x148>
			case 7: addressbus=0b00000000; break;
 20e:	15 ba       	out	0x15, r1	; 21
		
	}
	
	
	addressbus=0b00000000;
	for (y=0;y<8;y++)
 210:	80 91 62 00 	lds	r24, 0x0062
 214:	90 91 63 00 	lds	r25, 0x0063
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	90 93 63 00 	sts	0x0063, r25
 21e:	80 93 62 00 	sts	0x0062, r24
 222:	08 97       	sbiw	r24, 0x08	; 8
 224:	0c f4       	brge	.+2      	; 0x228 <__vector_4+0x160>
 226:	90 cf       	rjmp	.-224    	; 0x148 <__vector_4+0x80>
			case 7: addressbus=0b00000000; break;
		}
		//_delay_ms(0.5); // delay in interrupt may cause problems. mostly thatswhy prescalar are provided.
	}
	
	z++;
 228:	80 91 60 00 	lds	r24, 0x0060
 22c:	90 91 61 00 	lds	r25, 0x0061
 230:	01 96       	adiw	r24, 0x01	; 1
	if (z==8) // u have written if(z==0) { z=0; }
 232:	88 30       	cpi	r24, 0x08	; 8
 234:	91 05       	cpc	r25, r1
 236:	29 f0       	breq	.+10     	; 0x242 <__vector_4+0x17a>
			case 7: addressbus=0b00000000; break;
		}
		//_delay_ms(0.5); // delay in interrupt may cause problems. mostly thatswhy prescalar are provided.
	}
	
	z++;
 238:	90 93 61 00 	sts	0x0061, r25
 23c:	80 93 60 00 	sts	0x0060, r24
 240:	04 c0       	rjmp	.+8      	; 0x24a <__vector_4+0x182>
	if (z==8) // u have written if(z==0) { z=0; }
	{
		z=0;
 242:	10 92 61 00 	sts	0x0061, r1
 246:	10 92 60 00 	sts	0x0060, r1
	}
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	cf 91       	pop	r28
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__tablejump2__>:
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	05 90       	lpm	r0, Z+
 274:	f4 91       	lpm	r31, Z
 276:	e0 2d       	mov	r30, r0
 278:	09 94       	ijmp

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
