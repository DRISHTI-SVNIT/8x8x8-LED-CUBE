
LED Cube 8x8x8 512.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000341c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  0000341c  000034d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  0080009a  0080009a  0000350a  2**0
                  ALLOC
  3 .eeprom       000001f7  00810000  00810000  0000350a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00003701  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003734  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000290  00000000  00000000  00003770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000483e  00000000  00000000  00003a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008be  00000000  00000000  0000823e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002643  00000000  00000000  00008afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000fe8  00000000  00000000  0000b140  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006aa  00000000  00000000  0000c128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000068bf  00000000  00000000  0000c7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000300  00000000  00000000  00013091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
       4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      10:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__vector_4>
      14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      54:	b1 16       	cp	r11, r17
      56:	b6 16       	cp	r11, r22
      58:	bf 16       	cp	r11, r31
      5a:	d8 16       	cp	r13, r24
      5c:	df 16       	cp	r13, r31
      5e:	ec 16       	cp	r14, r28
      60:	ef 16       	cp	r14, r31
      62:	18 17       	cp	r17, r24
      64:	40 17       	cp	r20, r16
      66:	64 17       	cp	r22, r20
      68:	ad 17       	cp	r26, r29
      6a:	b2 17       	cp	r27, r18
      6c:	bf 17       	cp	r27, r31
      6e:	c4 17       	cp	r28, r20
      70:	f5 17       	cp	r31, r21
      72:	44 18       	sub	r4, r4
      74:	4d 18       	sub	r4, r13
      76:	55 18       	sub	r5, r5
      78:	5c 18       	sub	r5, r12
      7a:	64 18       	sub	r6, r4
      7c:	6c 18       	sub	r6, r12
      7e:	73 18       	sub	r7, r3
      80:	7a 18       	sub	r7, r10
      82:	87 18       	sub	r8, r7
      84:	8f 18       	sub	r8, r15
      86:	92 18       	sub	r9, r2
      88:	9f 18       	sub	r9, r15

0000008a <__trampolines_end>:
      8a:	07 06       	cpc	r0, r23
      8c:	05 04       	cpc	r0, r5
      8e:	03 02       	muls	r16, r19
      90:	01 00       	.word	0x0001	; ????
      92:	10 20       	and	r1, r0
      94:	30 40       	sbci	r19, 0x00	; 0
      96:	50 60       	ori	r21, 0x00	; 0
      98:	70 71       	andi	r23, 0x10	; 16
      9a:	72 73       	andi	r23, 0x32	; 50
      9c:	74 75       	andi	r23, 0x54	; 84
      9e:	76 77       	andi	r23, 0x76	; 118
      a0:	67 57       	subi	r22, 0x77	; 119
      a2:	47 37       	cpi	r20, 0x77	; 119
      a4:	27 17       	cp	r18, r23
      a6:	04 03       	mulsu	r16, r20
      a8:	12 21       	and	r17, r2
      aa:	30 40       	sbci	r19, 0x00	; 0
      ac:	51 62       	ori	r21, 0x21	; 33
      ae:	73 74       	andi	r23, 0x43	; 67
      b0:	65 56       	subi	r22, 0x65	; 101
      b2:	47 37       	cpi	r20, 0x77	; 119
      b4:	26 15       	cp	r18, r6

000000b6 <__ctors_end>:
      b6:	11 24       	eor	r1, r1
      b8:	1f be       	out	0x3f, r1	; 63
      ba:	cf e5       	ldi	r28, 0x5F	; 95
      bc:	d8 e0       	ldi	r29, 0x08	; 8
      be:	de bf       	out	0x3e, r29	; 62
      c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
      c2:	10 e0       	ldi	r17, 0x00	; 0
      c4:	a0 e6       	ldi	r26, 0x60	; 96
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	ec e1       	ldi	r30, 0x1C	; 28
      ca:	f4 e3       	ldi	r31, 0x34	; 52
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
      ce:	05 90       	lpm	r0, Z+
      d0:	0d 92       	st	X+, r0
      d2:	aa 39       	cpi	r26, 0x9A	; 154
      d4:	b1 07       	cpc	r27, r17
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_clear_bss>:
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	aa e9       	ldi	r26, 0x9A	; 154
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
      e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
      e2:	ac 31       	cpi	r26, 0x1C	; 28
      e4:	b2 07       	cpc	r27, r18
      e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
      e8:	0e 94 b3 18 	call	0x3166	; 0x3166 <main>
      ec:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <_exit>

000000f0 <__bad_interrupt>:
      f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <inrange>:
}

// Copies the contents of fb (temp cube buffer) into the rendering buffer
void tmp2cube (void)
{	
    memcpy(cube, fb, 64); // copy the current cube into a buffer.
      f4:	08 97       	sbiw	r24, 0x08	; 8
      f6:	48 f4       	brcc	.+18     	; 0x10a <inrange+0x16>
      f8:	68 30       	cpi	r22, 0x08	; 8
      fa:	71 05       	cpc	r23, r1
      fc:	40 f4       	brcc	.+16     	; 0x10e <inrange+0x1a>
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	48 30       	cpi	r20, 0x08	; 8
     102:	51 05       	cpc	r21, r1
     104:	28 f0       	brcs	.+10     	; 0x110 <inrange+0x1c>
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	08 95       	ret
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	08 95       	ret
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	08 95       	ret

00000112 <setvoxel>:
     112:	ff 92       	push	r15
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	f8 2e       	mov	r15, r24
     11e:	eb 01       	movw	r28, r22
     120:	8a 01       	movw	r16, r20
     122:	0e 94 7a 00 	call	0xf4	; 0xf4 <inrange>
     126:	88 23       	and	r24, r24
     128:	a9 f0       	breq	.+42     	; 0x154 <setvoxel+0x42>
     12a:	00 0f       	add	r16, r16
     12c:	11 1f       	adc	r17, r17
     12e:	00 0f       	add	r16, r16
     130:	11 1f       	adc	r17, r17
     132:	00 0f       	add	r16, r16
     134:	11 1f       	adc	r17, r17
     136:	c0 0f       	add	r28, r16
     138:	d1 1f       	adc	r29, r17
     13a:	c6 52       	subi	r28, 0x26	; 38
     13c:	df 4f       	sbci	r29, 0xFF	; 255
     13e:	48 81       	ld	r20, Y
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	c9 01       	movw	r24, r18
     146:	02 c0       	rjmp	.+4      	; 0x14c <setvoxel+0x3a>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	fa 94       	dec	r15
     14e:	e2 f7       	brpl	.-8      	; 0x148 <setvoxel+0x36>
     150:	84 2b       	or	r24, r20
     152:	88 83       	st	Y, r24
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	ff 90       	pop	r15
     15e:	08 95       	ret

00000160 <clrvoxel>:
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	f8 2e       	mov	r15, r24
     16c:	eb 01       	movw	r28, r22
     16e:	8a 01       	movw	r16, r20
     170:	0e 94 7a 00 	call	0xf4	; 0xf4 <inrange>
     174:	88 23       	and	r24, r24
     176:	b1 f0       	breq	.+44     	; 0x1a4 <clrvoxel+0x44>
     178:	00 0f       	add	r16, r16
     17a:	11 1f       	adc	r17, r17
     17c:	00 0f       	add	r16, r16
     17e:	11 1f       	adc	r17, r17
     180:	00 0f       	add	r16, r16
     182:	11 1f       	adc	r17, r17
     184:	c0 0f       	add	r28, r16
     186:	d1 1f       	adc	r29, r17
     188:	c6 52       	subi	r28, 0x26	; 38
     18a:	df 4f       	sbci	r29, 0xFF	; 255
     18c:	48 81       	ld	r20, Y
     18e:	21 e0       	ldi	r18, 0x01	; 1
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	c9 01       	movw	r24, r18
     194:	02 c0       	rjmp	.+4      	; 0x19a <clrvoxel+0x3a>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	fa 94       	dec	r15
     19c:	e2 f7       	brpl	.-8      	; 0x196 <clrvoxel+0x36>
     19e:	80 95       	com	r24
     1a0:	84 23       	and	r24, r20
     1a2:	88 83       	st	Y, r24
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	ff 90       	pop	r15
     1ae:	08 95       	ret

000001b0 <getvoxel>:
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	f8 2e       	mov	r15, r24
     1bc:	eb 01       	movw	r28, r22
     1be:	8a 01       	movw	r16, r20
     1c0:	0e 94 7a 00 	call	0xf4	; 0xf4 <inrange>
     1c4:	88 23       	and	r24, r24
     1c6:	99 f0       	breq	.+38     	; 0x1ee <getvoxel+0x3e>
     1c8:	00 0f       	add	r16, r16
     1ca:	11 1f       	adc	r17, r17
     1cc:	00 0f       	add	r16, r16
     1ce:	11 1f       	adc	r17, r17
     1d0:	00 0f       	add	r16, r16
     1d2:	11 1f       	adc	r17, r17
     1d4:	c0 0f       	add	r28, r16
     1d6:	d1 1f       	adc	r29, r17
     1d8:	c6 52       	subi	r28, 0x26	; 38
     1da:	df 4f       	sbci	r29, 0xFF	; 255
     1dc:	28 81       	ld	r18, Y
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	c9 01       	movw	r24, r18
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <getvoxel+0x38>
     1e4:	95 95       	asr	r25
     1e6:	87 95       	ror	r24
     1e8:	fa 94       	dec	r15
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <getvoxel+0x34>
     1ec:	81 70       	andi	r24, 0x01	; 1
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	ff 90       	pop	r15
     1f8:	08 95       	ret

000001fa <altervoxel>:
     1fa:	21 30       	cpi	r18, 0x01	; 1
     1fc:	31 05       	cpc	r19, r1
     1fe:	19 f4       	brne	.+6      	; 0x206 <altervoxel+0xc>
     200:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     204:	08 95       	ret
     206:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
     20a:	08 95       	ret

0000020c <flpvoxel>:
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	f8 2e       	mov	r15, r24
     218:	eb 01       	movw	r28, r22
     21a:	8a 01       	movw	r16, r20
     21c:	0e 94 7a 00 	call	0xf4	; 0xf4 <inrange>
     220:	88 23       	and	r24, r24
     222:	a9 f0       	breq	.+42     	; 0x24e <flpvoxel+0x42>
     224:	00 0f       	add	r16, r16
     226:	11 1f       	adc	r17, r17
     228:	00 0f       	add	r16, r16
     22a:	11 1f       	adc	r17, r17
     22c:	00 0f       	add	r16, r16
     22e:	11 1f       	adc	r17, r17
     230:	c0 0f       	add	r28, r16
     232:	d1 1f       	adc	r29, r17
     234:	c6 52       	subi	r28, 0x26	; 38
     236:	df 4f       	sbci	r29, 0xFF	; 255
     238:	48 81       	ld	r20, Y
     23a:	21 e0       	ldi	r18, 0x01	; 1
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	c9 01       	movw	r24, r18
     240:	02 c0       	rjmp	.+4      	; 0x246 <flpvoxel+0x3a>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	fa 94       	dec	r15
     248:	e2 f7       	brpl	.-8      	; 0x242 <flpvoxel+0x36>
     24a:	84 27       	eor	r24, r20
     24c:	88 83       	st	Y, r24
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	ff 90       	pop	r15
     258:	08 95       	ret

0000025a <setplane_z>:
     25a:	88 30       	cpi	r24, 0x08	; 8
     25c:	91 05       	cpc	r25, r1
     25e:	a0 f4       	brcc	.+40     	; 0x288 <setplane_z+0x2e>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	4f ef       	ldi	r20, 0xFF	; 255
     272:	fc 01       	movw	r30, r24
     274:	e2 0f       	add	r30, r18
     276:	f3 1f       	adc	r31, r19
     278:	e6 52       	subi	r30, 0x26	; 38
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	40 83       	st	Z, r20
     27e:	2f 5f       	subi	r18, 0xFF	; 255
     280:	3f 4f       	sbci	r19, 0xFF	; 255
     282:	28 30       	cpi	r18, 0x08	; 8
     284:	31 05       	cpc	r19, r1
     286:	a9 f7       	brne	.-22     	; 0x272 <setplane_z+0x18>
     288:	08 95       	ret

0000028a <setplane_x>:
     28a:	88 30       	cpi	r24, 0x08	; 8
     28c:	91 05       	cpc	r25, r1
     28e:	28 f5       	brcc	.+74     	; 0x2da <setplane_x+0x50>
     290:	31 e0       	ldi	r19, 0x01	; 1
     292:	01 c0       	rjmp	.+2      	; 0x296 <setplane_x+0xc>
     294:	33 0f       	add	r19, r19
     296:	8a 95       	dec	r24
     298:	ea f7       	brpl	.-6      	; 0x294 <setplane_x+0xa>
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	b0 e0       	ldi	r27, 0x00	; 0
     2a0:	a0 e0       	ldi	r26, 0x00	; 0
     2a2:	11 c0       	rjmp	.+34     	; 0x2c6 <setplane_x+0x3c>
     2a4:	fa 01       	movw	r30, r20
     2a6:	e8 0f       	add	r30, r24
     2a8:	f9 1f       	adc	r31, r25
     2aa:	e6 52       	subi	r30, 0x26	; 38
     2ac:	ff 4f       	sbci	r31, 0xFF	; 255
     2ae:	20 81       	ld	r18, Z
     2b0:	23 2b       	or	r18, r19
     2b2:	20 83       	st	Z, r18
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	88 30       	cpi	r24, 0x08	; 8
     2b8:	91 05       	cpc	r25, r1
     2ba:	a1 f7       	brne	.-24     	; 0x2a4 <setplane_x+0x1a>
     2bc:	6f 5f       	subi	r22, 0xFF	; 255
     2be:	7f 4f       	sbci	r23, 0xFF	; 255
     2c0:	68 30       	cpi	r22, 0x08	; 8
     2c2:	71 05       	cpc	r23, r1
     2c4:	51 f0       	breq	.+20     	; 0x2da <setplane_x+0x50>
     2c6:	8b 2f       	mov	r24, r27
     2c8:	9a 2f       	mov	r25, r26
     2ca:	ab 01       	movw	r20, r22
     2cc:	44 0f       	add	r20, r20
     2ce:	55 1f       	adc	r21, r21
     2d0:	44 0f       	add	r20, r20
     2d2:	55 1f       	adc	r21, r21
     2d4:	44 0f       	add	r20, r20
     2d6:	55 1f       	adc	r21, r21
     2d8:	e5 cf       	rjmp	.-54     	; 0x2a4 <setplane_x+0x1a>
     2da:	08 95       	ret

000002dc <setplane_y>:
     2dc:	88 30       	cpi	r24, 0x08	; 8
     2de:	91 05       	cpc	r25, r1
     2e0:	a0 f4       	brcc	.+40     	; 0x30a <setplane_y+0x2e>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	4f ef       	ldi	r20, 0xFF	; 255
     2e8:	f9 01       	movw	r30, r18
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	ee 0f       	add	r30, r30
     2f4:	ff 1f       	adc	r31, r31
     2f6:	e8 0f       	add	r30, r24
     2f8:	f9 1f       	adc	r31, r25
     2fa:	e6 52       	subi	r30, 0x26	; 38
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	40 83       	st	Z, r20
     300:	2f 5f       	subi	r18, 0xFF	; 255
     302:	3f 4f       	sbci	r19, 0xFF	; 255
     304:	28 30       	cpi	r18, 0x08	; 8
     306:	31 05       	cpc	r19, r1
     308:	79 f7       	brne	.-34     	; 0x2e8 <setplane_y+0xc>
     30a:	08 95       	ret

0000030c <setplane>:
     30c:	89 37       	cpi	r24, 0x79	; 121
     30e:	49 f0       	breq	.+18     	; 0x322 <setplane+0x16>
     310:	8a 37       	cpi	r24, 0x7A	; 122
     312:	61 f0       	breq	.+24     	; 0x32c <setplane+0x20>
     314:	88 37       	cpi	r24, 0x78	; 120
     316:	71 f4       	brne	.+28     	; 0x334 <setplane+0x28>
     318:	86 2f       	mov	r24, r22
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 45 01 	call	0x28a	; 0x28a <setplane_x>
     320:	08 95       	ret
     322:	86 2f       	mov	r24, r22
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 6e 01 	call	0x2dc	; 0x2dc <setplane_y>
     32a:	08 95       	ret
     32c:	86 2f       	mov	r24, r22
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 2d 01 	call	0x25a	; 0x25a <setplane_z>
     334:	08 95       	ret

00000336 <fill>:
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	a0 e0       	ldi	r26, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	10 c0       	rjmp	.+32     	; 0x360 <fill+0x2a>
     340:	fa 01       	movw	r30, r20
     342:	e2 0f       	add	r30, r18
     344:	f3 1f       	adc	r31, r19
     346:	e6 52       	subi	r30, 0x26	; 38
     348:	ff 4f       	sbci	r31, 0xFF	; 255
     34a:	80 83       	st	Z, r24
     34c:	2f 5f       	subi	r18, 0xFF	; 255
     34e:	3f 4f       	sbci	r19, 0xFF	; 255
     350:	28 30       	cpi	r18, 0x08	; 8
     352:	31 05       	cpc	r19, r1
     354:	a9 f7       	brne	.-22     	; 0x340 <fill+0xa>
     356:	6f 5f       	subi	r22, 0xFF	; 255
     358:	7f 4f       	sbci	r23, 0xFF	; 255
     35a:	68 30       	cpi	r22, 0x08	; 8
     35c:	71 05       	cpc	r23, r1
     35e:	51 f0       	breq	.+20     	; 0x374 <fill+0x3e>
     360:	2a 2f       	mov	r18, r26
     362:	39 2f       	mov	r19, r25
     364:	ab 01       	movw	r20, r22
     366:	44 0f       	add	r20, r20
     368:	55 1f       	adc	r21, r21
     36a:	44 0f       	add	r20, r20
     36c:	55 1f       	adc	r21, r21
     36e:	44 0f       	add	r20, r20
     370:	55 1f       	adc	r21, r21
     372:	e6 cf       	rjmp	.-52     	; 0x340 <fill+0xa>
     374:	08 95       	ret

00000376 <byteline>:
     376:	6f 5f       	subi	r22, 0xFF	; 255
     378:	7f 4f       	sbci	r23, 0xFF	; 255
     37a:	2f ef       	ldi	r18, 0xFF	; 255
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	a9 01       	movw	r20, r18
     380:	02 c0       	rjmp	.+4      	; 0x386 <byteline+0x10>
     382:	44 0f       	add	r20, r20
     384:	55 1f       	adc	r21, r21
     386:	6a 95       	dec	r22
     388:	e2 f7       	brpl	.-8      	; 0x382 <byteline+0xc>
     38a:	40 95       	com	r20
     38c:	b9 01       	movw	r22, r18
     38e:	02 c0       	rjmp	.+4      	; 0x394 <byteline+0x1e>
     390:	66 0f       	add	r22, r22
     392:	77 1f       	adc	r23, r23
     394:	8a 95       	dec	r24
     396:	e2 f7       	brpl	.-8      	; 0x390 <byteline+0x1a>
     398:	cb 01       	movw	r24, r22
     39a:	84 23       	and	r24, r20
     39c:	08 95       	ret

0000039e <box_wireframe>:
     39e:	6f 92       	push	r6
     3a0:	7f 92       	push	r7
     3a2:	8f 92       	push	r8
     3a4:	9f 92       	push	r9
     3a6:	af 92       	push	r10
     3a8:	bf 92       	push	r11
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	6c 01       	movw	r12, r24
     3bc:	5b 01       	movw	r10, r22
     3be:	ea 01       	movw	r28, r20
     3c0:	39 01       	movw	r6, r18
     3c2:	47 01       	movw	r8, r14
     3c4:	28 17       	cp	r18, r24
     3c6:	39 07       	cpc	r19, r25
     3c8:	2c f4       	brge	.+10     	; 0x3d4 <box_wireframe+0x36>
     3ca:	98 2f       	mov	r25, r24
     3cc:	8d 2d       	mov	r24, r13
     3ce:	69 01       	movw	r12, r18
     3d0:	69 2e       	mov	r6, r25
     3d2:	78 2e       	mov	r7, r24
     3d4:	0a 15       	cp	r16, r10
     3d6:	1b 05       	cpc	r17, r11
     3d8:	0c f4       	brge	.+2      	; 0x3dc <box_wireframe+0x3e>
     3da:	a6 c0       	rjmp	.+332    	; 0x528 <__FUSE_REGION_LENGTH__+0x128>
     3dc:	8c 16       	cp	r8, r28
     3de:	9d 06       	cpc	r9, r29
     3e0:	0c f0       	brlt	.+2      	; 0x3e4 <box_wireframe+0x46>
     3e2:	a6 c0       	rjmp	.+332    	; 0x530 <__FUSE_REGION_LENGTH__+0x130>
     3e4:	9c 2f       	mov	r25, r28
     3e6:	8d 2f       	mov	r24, r29
     3e8:	e4 01       	movw	r28, r8
     3ea:	89 2e       	mov	r8, r25
     3ec:	98 2e       	mov	r9, r24
     3ee:	a0 c0       	rjmp	.+320    	; 0x530 <__FUSE_REGION_LENGTH__+0x130>
     3f0:	b3 01       	movw	r22, r6
     3f2:	c6 01       	movw	r24, r12
     3f4:	0e 94 bb 01 	call	0x376	; 0x376 <byteline>
     3f8:	9e 01       	movw	r18, r28
     3fa:	22 0f       	add	r18, r18
     3fc:	33 1f       	adc	r19, r19
     3fe:	22 0f       	add	r18, r18
     400:	33 1f       	adc	r19, r19
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	f9 01       	movw	r30, r18
     408:	e0 0f       	add	r30, r16
     40a:	f1 1f       	adc	r31, r17
     40c:	e6 52       	subi	r30, 0x26	; 38
     40e:	ff 4f       	sbci	r31, 0xFF	; 255
     410:	80 83       	st	Z, r24
     412:	2a 0d       	add	r18, r10
     414:	3b 1d       	adc	r19, r11
     416:	f9 01       	movw	r30, r18
     418:	e6 52       	subi	r30, 0x26	; 38
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	80 83       	st	Z, r24
     41e:	94 01       	movw	r18, r8
     420:	22 0f       	add	r18, r18
     422:	33 1f       	adc	r19, r19
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	22 0f       	add	r18, r18
     42a:	33 1f       	adc	r19, r19
     42c:	f9 01       	movw	r30, r18
     42e:	e0 0f       	add	r30, r16
     430:	f1 1f       	adc	r31, r17
     432:	e6 52       	subi	r30, 0x26	; 38
     434:	ff 4f       	sbci	r31, 0xFF	; 255
     436:	80 83       	st	Z, r24
     438:	2a 0d       	add	r18, r10
     43a:	3b 1d       	adc	r19, r11
     43c:	f9 01       	movw	r30, r18
     43e:	e6 52       	subi	r30, 0x26	; 38
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	80 83       	st	Z, r24
     444:	9a 2d       	mov	r25, r10
     446:	8b 2d       	mov	r24, r11
     448:	58 01       	movw	r10, r16
     44a:	09 2f       	mov	r16, r25
     44c:	18 2f       	mov	r17, r24
     44e:	75 01       	movw	r14, r10
     450:	ae 01       	movw	r20, r28
     452:	b7 01       	movw	r22, r14
     454:	c6 01       	movw	r24, r12
     456:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     45a:	a4 01       	movw	r20, r8
     45c:	b7 01       	movw	r22, r14
     45e:	c6 01       	movw	r24, r12
     460:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     464:	ae 01       	movw	r20, r28
     466:	b7 01       	movw	r22, r14
     468:	c3 01       	movw	r24, r6
     46a:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     46e:	a4 01       	movw	r20, r8
     470:	b7 01       	movw	r22, r14
     472:	c3 01       	movw	r24, r6
     474:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	e8 1a       	sub	r14, r24
     47c:	f8 0a       	sbc	r15, r24
     47e:	0e 15       	cp	r16, r14
     480:	1f 05       	cpc	r17, r15
     482:	34 f7       	brge	.-52     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
     484:	8c 16       	cp	r8, r28
     486:	9d 06       	cpc	r9, r29
     488:	0c f4       	brge	.+2      	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
     48a:	7d c0       	rjmp	.+250    	; 0x586 <__FUSE_REGION_LENGTH__+0x186>
     48c:	ae 01       	movw	r20, r28
     48e:	b5 01       	movw	r22, r10
     490:	c6 01       	movw	r24, r12
     492:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     496:	ae 01       	movw	r20, r28
     498:	b8 01       	movw	r22, r16
     49a:	c6 01       	movw	r24, r12
     49c:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     4a0:	ae 01       	movw	r20, r28
     4a2:	b5 01       	movw	r22, r10
     4a4:	c3 01       	movw	r24, r6
     4a6:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     4aa:	ae 01       	movw	r20, r28
     4ac:	b8 01       	movw	r22, r16
     4ae:	c3 01       	movw	r24, r6
     4b0:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     4b4:	21 96       	adiw	r28, 0x01	; 1
     4b6:	8c 16       	cp	r8, r28
     4b8:	9d 06       	cpc	r9, r29
     4ba:	44 f7       	brge	.-48     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
     4bc:	64 c0       	rjmp	.+200    	; 0x586 <__FUSE_REGION_LENGTH__+0x186>
     4be:	b3 01       	movw	r22, r6
     4c0:	c6 01       	movw	r24, r12
     4c2:	0e 94 bb 01 	call	0x376	; 0x376 <byteline>
     4c6:	94 01       	movw	r18, r8
     4c8:	22 0f       	add	r18, r18
     4ca:	33 1f       	adc	r19, r19
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	22 0f       	add	r18, r18
     4d2:	33 1f       	adc	r19, r19
     4d4:	f9 01       	movw	r30, r18
     4d6:	e0 0f       	add	r30, r16
     4d8:	f1 1f       	adc	r31, r17
     4da:	e6 52       	subi	r30, 0x26	; 38
     4dc:	ff 4f       	sbci	r31, 0xFF	; 255
     4de:	80 83       	st	Z, r24
     4e0:	2a 0d       	add	r18, r10
     4e2:	3b 1d       	adc	r19, r11
     4e4:	f9 01       	movw	r30, r18
     4e6:	e6 52       	subi	r30, 0x26	; 38
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	80 83       	st	Z, r24
     4ec:	9e 01       	movw	r18, r28
     4ee:	22 0f       	add	r18, r18
     4f0:	33 1f       	adc	r19, r19
     4f2:	22 0f       	add	r18, r18
     4f4:	33 1f       	adc	r19, r19
     4f6:	22 0f       	add	r18, r18
     4f8:	33 1f       	adc	r19, r19
     4fa:	f9 01       	movw	r30, r18
     4fc:	e0 0f       	add	r30, r16
     4fe:	f1 1f       	adc	r31, r17
     500:	e6 52       	subi	r30, 0x26	; 38
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	80 83       	st	Z, r24
     506:	2a 0d       	add	r18, r10
     508:	3b 1d       	adc	r19, r11
     50a:	f9 01       	movw	r30, r18
     50c:	e6 52       	subi	r30, 0x26	; 38
     50e:	ff 4f       	sbci	r31, 0xFF	; 255
     510:	80 83       	st	Z, r24
     512:	9c 2f       	mov	r25, r28
     514:	8d 2f       	mov	r24, r29
     516:	e4 01       	movw	r28, r8
     518:	89 2e       	mov	r8, r25
     51a:	98 2e       	mov	r9, r24
     51c:	9a 2d       	mov	r25, r10
     51e:	8b 2d       	mov	r24, r11
     520:	58 01       	movw	r10, r16
     522:	09 2f       	mov	r16, r25
     524:	18 2f       	mov	r17, r24
     526:	93 cf       	rjmp	.-218    	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     528:	8c 16       	cp	r8, r28
     52a:	9d 06       	cpc	r9, r29
     52c:	44 f2       	brlt	.-112    	; 0x4be <__FUSE_REGION_LENGTH__+0xbe>
     52e:	60 cf       	rjmp	.-320    	; 0x3f0 <box_wireframe+0x52>
     530:	b3 01       	movw	r22, r6
     532:	c6 01       	movw	r24, r12
     534:	0e 94 bb 01 	call	0x376	; 0x376 <byteline>
     538:	9e 01       	movw	r18, r28
     53a:	22 0f       	add	r18, r18
     53c:	33 1f       	adc	r19, r19
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	f9 01       	movw	r30, r18
     548:	ea 0d       	add	r30, r10
     54a:	fb 1d       	adc	r31, r11
     54c:	e6 52       	subi	r30, 0x26	; 38
     54e:	ff 4f       	sbci	r31, 0xFF	; 255
     550:	80 83       	st	Z, r24
     552:	20 0f       	add	r18, r16
     554:	31 1f       	adc	r19, r17
     556:	f9 01       	movw	r30, r18
     558:	e6 52       	subi	r30, 0x26	; 38
     55a:	ff 4f       	sbci	r31, 0xFF	; 255
     55c:	80 83       	st	Z, r24
     55e:	94 01       	movw	r18, r8
     560:	22 0f       	add	r18, r18
     562:	33 1f       	adc	r19, r19
     564:	22 0f       	add	r18, r18
     566:	33 1f       	adc	r19, r19
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	f9 01       	movw	r30, r18
     56e:	ea 0d       	add	r30, r10
     570:	fb 1d       	adc	r31, r11
     572:	e6 52       	subi	r30, 0x26	; 38
     574:	ff 4f       	sbci	r31, 0xFF	; 255
     576:	80 83       	st	Z, r24
     578:	20 0f       	add	r18, r16
     57a:	31 1f       	adc	r19, r17
     57c:	f9 01       	movw	r30, r18
     57e:	e6 52       	subi	r30, 0x26	; 38
     580:	ff 4f       	sbci	r31, 0xFF	; 255
     582:	80 83       	st	Z, r24
     584:	64 cf       	rjmp	.-312    	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	7f 90       	pop	r7
     5a0:	6f 90       	pop	r6
     5a2:	08 95       	ret

000005a4 <flipbyte>:
     5a4:	28 2f       	mov	r18, r24
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	98 2f       	mov	r25, r24
     5aa:	92 95       	swap	r25
     5ac:	96 95       	lsr	r25
     5ae:	97 70       	andi	r25, 0x07	; 7
     5b0:	92 70       	andi	r25, 0x02	; 2
     5b2:	48 2f       	mov	r20, r24
     5b4:	44 1f       	adc	r20, r20
     5b6:	44 27       	eor	r20, r20
     5b8:	44 1f       	adc	r20, r20
     5ba:	94 2b       	or	r25, r20
     5bc:	48 2f       	mov	r20, r24
     5be:	46 95       	lsr	r20
     5c0:	46 95       	lsr	r20
     5c2:	46 95       	lsr	r20
     5c4:	44 70       	andi	r20, 0x04	; 4
     5c6:	94 2b       	or	r25, r20
     5c8:	86 95       	lsr	r24
     5ca:	88 70       	andi	r24, 0x08	; 8
     5cc:	98 2b       	or	r25, r24
     5ce:	b9 01       	movw	r22, r18
     5d0:	66 0f       	add	r22, r22
     5d2:	77 1f       	adc	r23, r23
     5d4:	86 2f       	mov	r24, r22
     5d6:	80 71       	andi	r24, 0x10	; 16
     5d8:	89 2b       	or	r24, r25
     5da:	b9 01       	movw	r22, r18
     5dc:	66 0f       	add	r22, r22
     5de:	77 1f       	adc	r23, r23
     5e0:	66 0f       	add	r22, r22
     5e2:	77 1f       	adc	r23, r23
     5e4:	66 0f       	add	r22, r22
     5e6:	77 1f       	adc	r23, r23
     5e8:	60 72       	andi	r22, 0x20	; 32
     5ea:	86 2b       	or	r24, r22
     5ec:	a9 01       	movw	r20, r18
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	42 95       	swap	r20
     5f4:	52 95       	swap	r21
     5f6:	50 7f       	andi	r21, 0xF0	; 240
     5f8:	54 27       	eor	r21, r20
     5fa:	40 7f       	andi	r20, 0xF0	; 240
     5fc:	54 27       	eor	r21, r20
     5fe:	40 74       	andi	r20, 0x40	; 64
     600:	84 2b       	or	r24, r20
     602:	36 95       	lsr	r19
     604:	32 2f       	mov	r19, r18
     606:	22 27       	eor	r18, r18
     608:	37 95       	ror	r19
     60a:	27 95       	ror	r18
     60c:	82 2b       	or	r24, r18
     60e:	08 95       	ret

00000610 <delay_ms>:
     610:	9c 01       	movw	r18, r24
     612:	89 2b       	or	r24, r25
     614:	61 f4       	brne	.+24     	; 0x62e <delay_ms+0x1e>
     616:	08 95       	ret
	...
     624:	91 50       	subi	r25, 0x01	; 1
     626:	c1 f7       	brne	.-16     	; 0x618 <delay_ms+0x8>
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	31 09       	sbc	r19, r1
     62c:	11 f0       	breq	.+4      	; 0x632 <delay_ms+0x22>
     62e:	9a e5       	ldi	r25, 0x5A	; 90
     630:	f3 cf       	rjmp	.-26     	; 0x618 <delay_ms+0x8>
     632:	08 95       	ret

00000634 <shift>:
// Shift the entire contents of the cube along an axis
// This is great for effects where you want to draw something
// on one side of the cube and have it flow towards the other
// side. Like rain flowing down the Z axiz.
void shift (char axis, int direction)
{
     634:	2f 92       	push	r2
     636:	3f 92       	push	r3
     638:	4f 92       	push	r4
     63a:	5f 92       	push	r5
     63c:	6f 92       	push	r6
     63e:	7f 92       	push	r7
     640:	8f 92       	push	r8
     642:	9f 92       	push	r9
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	18 2f       	mov	r17, r24
     65a:	5b 01       	movw	r10, r22
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
     65c:	c1 2c       	mov	r12, r1
     65e:	d1 2c       	mov	r13, r1
     660:	0f 2e       	mov	r0, r31
     662:	f7 e0       	ldi	r31, 0x07	; 7
     664:	8f 2e       	mov	r8, r31
     666:	91 2c       	mov	r9, r1
     668:	f0 2d       	mov	r31, r0
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
     66a:	00 e0       	ldi	r16, 0x00	; 0
     66c:	41 2c       	mov	r4, r1
     66e:	50 2e       	mov	r5, r16
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
     670:	4f ef       	ldi	r20, 0xFF	; 255
     672:	a4 16       	cp	r10, r20
     674:	b4 06       	cpc	r11, r20
     676:	21 f0       	breq	.+8      	; 0x680 <shift+0x4c>
     678:	74 01       	movw	r14, r8
     67a:	ec 18       	sub	r14, r12
     67c:	fd 08       	sbc	r15, r13
     67e:	01 c0       	rjmp	.+2      	; 0x682 <shift+0x4e>
     680:	76 01       	movw	r14, r12
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
				{
					iii = ii+1;
     682:	97 01       	movw	r18, r14
     684:	2f 5f       	subi	r18, 0xFF	; 255
     686:	3f 4f       	sbci	r19, 0xFF	; 255
				} else
				{
					iii = ii-1;
     688:	c7 01       	movw	r24, r14
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	4f ef       	ldi	r20, 0xFF	; 255
     68e:	a4 16       	cp	r10, r20
     690:	b4 06       	cpc	r11, r20
     692:	19 f4       	brne	.+6      	; 0x69a <shift+0x66>
     694:	62 2e       	mov	r6, r18
     696:	73 2e       	mov	r7, r19
     698:	02 c0       	rjmp	.+4      	; 0x69e <shift+0x6a>
     69a:	68 2e       	mov	r6, r24
     69c:	79 2e       	mov	r7, r25
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
     69e:	21 2c       	mov	r2, r1
     6a0:	30 2e       	mov	r3, r16
     6a2:	3a c0       	rjmp	.+116    	; 0x718 <shift+0xe4>
				} else
				{
					iii = ii-1;
				}
				
				if (axis == AXIS_Z)
     6a4:	1a 37       	cpi	r17, 0x7A	; 122
     6a6:	71 f4       	brne	.+28     	; 0x6c4 <shift+0x90>
				{
					state = getvoxel(x,y,iii);
     6a8:	46 2d       	mov	r20, r6
     6aa:	57 2d       	mov	r21, r7
     6ac:	be 01       	movw	r22, r28
     6ae:	c1 01       	movw	r24, r2
     6b0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <getvoxel>
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
					altervoxel(x,y,ii,state);
     6b8:	a7 01       	movw	r20, r14
     6ba:	be 01       	movw	r22, r28
     6bc:	c1 01       	movw	r24, r2
     6be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <altervoxel>
     6c2:	1f c0       	rjmp	.+62     	; 0x702 <shift+0xce>
				}
				
				if (axis == AXIS_Y)
     6c4:	19 37       	cpi	r17, 0x79	; 121
     6c6:	71 f4       	brne	.+28     	; 0x6e4 <shift+0xb0>
				{
					state = getvoxel(x,iii,y);
     6c8:	ae 01       	movw	r20, r28
     6ca:	66 2d       	mov	r22, r6
     6cc:	77 2d       	mov	r23, r7
     6ce:	c1 01       	movw	r24, r2
     6d0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <getvoxel>
     6d4:	28 2f       	mov	r18, r24
     6d6:	30 e0       	ldi	r19, 0x00	; 0
					altervoxel(x,ii,y,state);
     6d8:	ae 01       	movw	r20, r28
     6da:	b7 01       	movw	r22, r14
     6dc:	c1 01       	movw	r24, r2
     6de:	0e 94 fd 00 	call	0x1fa	; 0x1fa <altervoxel>
     6e2:	0f c0       	rjmp	.+30     	; 0x702 <shift+0xce>
				}
				
				if (axis == AXIS_X)
     6e4:	18 37       	cpi	r17, 0x78	; 120
     6e6:	69 f4       	brne	.+26     	; 0x702 <shift+0xce>
				{
					state = getvoxel(iii,y,x);
     6e8:	a1 01       	movw	r20, r2
     6ea:	be 01       	movw	r22, r28
     6ec:	86 2d       	mov	r24, r6
     6ee:	97 2d       	mov	r25, r7
     6f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <getvoxel>
     6f4:	28 2f       	mov	r18, r24
     6f6:	30 e0       	ldi	r19, 0x00	; 0
					altervoxel(ii,y,x,state);
     6f8:	a1 01       	movw	r20, r2
     6fa:	be 01       	movw	r22, r28
     6fc:	c7 01       	movw	r24, r14
     6fe:	0e 94 fd 00 	call	0x1fa	; 0x1fa <altervoxel>
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
     702:	21 96       	adiw	r28, 0x01	; 1
     704:	c8 30       	cpi	r28, 0x08	; 8
     706:	d1 05       	cpc	r29, r1
     708:	69 f6       	brne	.-102    	; 0x6a4 <shift+0x70>
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
     70a:	8f ef       	ldi	r24, 0xFF	; 255
     70c:	28 1a       	sub	r2, r24
     70e:	38 0a       	sbc	r3, r24
     710:	48 e0       	ldi	r20, 0x08	; 8
     712:	24 16       	cp	r2, r20
     714:	31 04       	cpc	r3, r1
     716:	19 f0       	breq	.+6      	; 0x71e <shift+0xea>
     718:	c4 2d       	mov	r28, r4
     71a:	d5 2d       	mov	r29, r5
     71c:	c3 cf       	rjmp	.-122    	; 0x6a4 <shift+0x70>
{
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	c8 1a       	sub	r12, r24
     722:	d8 0a       	sbc	r13, r24
     724:	48 e0       	ldi	r20, 0x08	; 8
     726:	c4 16       	cp	r12, r20
     728:	d1 04       	cpc	r13, r1
     72a:	09 f0       	breq	.+2      	; 0x72e <shift+0xfa>
     72c:	a1 cf       	rjmp	.-190    	; 0x670 <shift+0x3c>
				}
			}
		}
	}
	
	if (direction == -1)
     72e:	ab 20       	and	r10, r11
     730:	a0 94       	com	r10
     732:	19 f0       	breq	.+6      	; 0x73a <shift+0x106>
	{
		i = 7;
	} else
	{
		i = 0;
     734:	e1 2c       	mov	r14, r1
     736:	f1 2c       	mov	r15, r1
     738:	05 c0       	rjmp	.+10     	; 0x744 <shift+0x110>
		}
	}
	
	if (direction == -1)
	{
		i = 7;
     73a:	0f 2e       	mov	r0, r31
     73c:	f7 e0       	ldi	r31, 0x07	; 7
     73e:	ef 2e       	mov	r14, r31
     740:	f1 2c       	mov	r15, r1
     742:	f0 2d       	mov	r31, r0
	} else
	{
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
     744:	a1 2c       	mov	r10, r1
     746:	b1 2c       	mov	r11, r1
	if (direction == -1)
	{
		i = 7;
	} else
	{
		i = 0;
     748:	c1 2c       	mov	r12, r1
     74a:	d1 2c       	mov	r13, r1
     74c:	22 c0       	rjmp	.+68     	; 0x792 <shift+0x15e>
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
		{
			if (axis == AXIS_Z)
     74e:	1a 37       	cpi	r17, 0x7A	; 122
     750:	31 f4       	brne	.+12     	; 0x75e <shift+0x12a>
				clrvoxel(x,y,i);
     752:	a7 01       	movw	r20, r14
     754:	be 01       	movw	r22, r28
     756:	c5 01       	movw	r24, r10
     758:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
     75c:	0f c0       	rjmp	.+30     	; 0x77c <shift+0x148>
				
			if (axis == AXIS_Y)
     75e:	19 37       	cpi	r17, 0x79	; 121
     760:	31 f4       	brne	.+12     	; 0x76e <shift+0x13a>
				clrvoxel(x,i,y);
     762:	ae 01       	movw	r20, r28
     764:	b7 01       	movw	r22, r14
     766:	c5 01       	movw	r24, r10
     768:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
     76c:	07 c0       	rjmp	.+14     	; 0x77c <shift+0x148>
			
			if (axis == AXIS_X)
     76e:	18 37       	cpi	r17, 0x78	; 120
     770:	29 f4       	brne	.+10     	; 0x77c <shift+0x148>
				clrvoxel(i,y,x);
     772:	a5 01       	movw	r20, r10
     774:	be 01       	movw	r22, r28
     776:	c7 01       	movw	r24, r14
     778:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
     77c:	21 96       	adiw	r28, 0x01	; 1
     77e:	c8 30       	cpi	r28, 0x08	; 8
     780:	d1 05       	cpc	r29, r1
     782:	29 f7       	brne	.-54     	; 0x74e <shift+0x11a>
	} else
	{
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
     784:	4f ef       	ldi	r20, 0xFF	; 255
     786:	a4 1a       	sub	r10, r20
     788:	b4 0a       	sbc	r11, r20
     78a:	88 e0       	ldi	r24, 0x08	; 8
     78c:	a8 16       	cp	r10, r24
     78e:	b1 04       	cpc	r11, r1
     790:	19 f0       	breq	.+6      	; 0x798 <shift+0x164>
	if (direction == -1)
	{
		i = 7;
	} else
	{
		i = 0;
     792:	cc 2d       	mov	r28, r12
     794:	dd 2d       	mov	r29, r13
     796:	db cf       	rjmp	.-74     	; 0x74e <shift+0x11a>
			
			if (axis == AXIS_X)
				clrvoxel(i,y,x);
		}
	}
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	9f 90       	pop	r9
     7ae:	8f 90       	pop	r8
     7b0:	7f 90       	pop	r7
     7b2:	6f 90       	pop	r6
     7b4:	5f 90       	pop	r5
     7b6:	4f 90       	pop	r4
     7b8:	3f 90       	pop	r3
     7ba:	2f 90       	pop	r2
     7bc:	08 95       	ret

000007be <mirror_y>:

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
     7be:	4f 92       	push	r4
     7c0:	5f 92       	push	r5
     7c2:	6f 92       	push	r6
     7c4:	7f 92       	push	r7
     7c6:	8f 92       	push	r8
     7c8:	9f 92       	push	r9
     7ca:	af 92       	push	r10
     7cc:	bf 92       	push	r11
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	c0 54       	subi	r28, 0x40	; 64
     7e4:	d1 09       	sbc	r29, r1
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
     7f0:	80 e4       	ldi	r24, 0x40	; 64
     7f2:	ea ed       	ldi	r30, 0xDA	; 218
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	de 01       	movw	r26, r28
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	01 90       	ld	r0, Z+
     7fc:	0d 92       	st	X+, r0
     7fe:	8a 95       	dec	r24
     800:	e1 f7       	brne	.-8      	; 0x7fa <mirror_y+0x3c>

    fill(0x00);
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     808:	ce 01       	movw	r24, r28
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	4c 01       	movw	r8, r24
     80e:	a1 2c       	mov	r10, r1
     810:	b1 2c       	mov	r11, r1
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
     812:	0f 2e       	mov	r0, r31
     814:	f7 e0       	ldi	r31, 0x07	; 7
     816:	4f 2e       	mov	r4, r31
     818:	f0 2d       	mov	r31, r0
     81a:	51 2c       	mov	r5, r1
     81c:	61 2c       	mov	r6, r1
     81e:	71 2c       	mov	r7, r1
     820:	2a c0       	rjmp	.+84     	; 0x876 <__stack+0x17>
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
            {
                if (buffer[z][y] & (0x01 << x))
     822:	f7 01       	movw	r30, r14
     824:	80 81       	ld	r24, Z
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	00 2e       	mov	r0, r16
     82a:	02 c0       	rjmp	.+4      	; 0x830 <mirror_y+0x72>
     82c:	95 95       	asr	r25
     82e:	87 95       	ror	r24
     830:	0a 94       	dec	r0
     832:	e2 f7       	brpl	.-8      	; 0x82c <mirror_y+0x6e>
     834:	80 ff       	sbrs	r24, 0
     836:	06 c0       	rjmp	.+12     	; 0x844 <mirror_y+0x86>
                    setvoxel(x,CUBE_SIZE-1-y,z);
     838:	a5 01       	movw	r20, r10
     83a:	b6 01       	movw	r22, r12
     83c:	80 2f       	mov	r24, r16
     83e:	91 2f       	mov	r25, r17
     840:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     844:	0f 5f       	subi	r16, 0xFF	; 255
     846:	1f 4f       	sbci	r17, 0xFF	; 255
    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
     848:	08 30       	cpi	r16, 0x08	; 8
     84a:	11 05       	cpc	r17, r1
     84c:	51 f7       	brne	.-44     	; 0x822 <mirror_y+0x64>
     84e:	ff ef       	ldi	r31, 0xFF	; 255
     850:	ef 1a       	sub	r14, r31
     852:	ff 0a       	sbc	r15, r31
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	c8 1a       	sub	r12, r24
     858:	d1 08       	sbc	r13, r1
     85a:	18 f0       	brcs	.+6      	; 0x862 <__stack+0x3>
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
     85c:	06 2d       	mov	r16, r6
     85e:	17 2d       	mov	r17, r7
     860:	e0 cf       	rjmp	.-64     	; 0x822 <mirror_y+0x64>
     862:	ef ef       	ldi	r30, 0xFF	; 255
     864:	ae 1a       	sub	r10, r30
     866:	be 0a       	sbc	r11, r30
     868:	f8 e0       	ldi	r31, 0x08	; 8
     86a:	8f 0e       	add	r8, r31
     86c:	91 1c       	adc	r9, r1
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	a8 16       	cp	r10, r24
     872:	b1 04       	cpc	r11, r1
     874:	21 f0       	breq	.+8      	; 0x87e <__stack+0x1f>
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
     876:	74 01       	movw	r14, r8
     878:	c4 2c       	mov	r12, r4
     87a:	d5 2c       	mov	r13, r5
     87c:	ef cf       	rjmp	.-34     	; 0x85c <mirror_y+0x9e>
                    setvoxel(x,CUBE_SIZE-1-y,z);
            }
        }
    }

}
     87e:	c0 5c       	subi	r28, 0xC0	; 192
     880:	df 4f       	sbci	r29, 0xFF	; 255
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	bf 90       	pop	r11
     89e:	af 90       	pop	r10
     8a0:	9f 90       	pop	r9
     8a2:	8f 90       	pop	r8
     8a4:	7f 90       	pop	r7
     8a6:	6f 90       	pop	r6
     8a8:	5f 90       	pop	r5
     8aa:	4f 90       	pop	r4
     8ac:	08 95       	ret

000008ae <mirror_x>:

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
     8ae:	6f 92       	push	r6
     8b0:	7f 92       	push	r7
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	c0 54       	subi	r28, 0x40	; 64
     8d0:	d1 09       	sbc	r29, r1
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
     8dc:	80 e4       	ldi	r24, 0x40	; 64
     8de:	ea ed       	ldi	r30, 0xDA	; 218
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	de 01       	movw	r26, r28
     8e4:	11 96       	adiw	r26, 0x01	; 1
     8e6:	01 90       	ld	r0, Z+
     8e8:	0d 92       	st	X+, r0
     8ea:	8a 95       	dec	r24
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <mirror_x+0x38>

    fill(0x00);
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	4c 01       	movw	r8, r24
     8fa:	a1 2c       	mov	r10, r1
     8fc:	b1 2c       	mov	r11, r1

}

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
     8fe:	61 2c       	mov	r6, r1
     900:	71 2c       	mov	r7, r1
     902:	1a c0       	rjmp	.+52     	; 0x938 <mirror_x+0x8a>
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
     904:	f7 01       	movw	r30, r14
     906:	81 91       	ld	r24, Z+
     908:	7f 01       	movw	r14, r30
     90a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <flipbyte>
     90e:	f6 01       	movw	r30, r12
     910:	e0 0f       	add	r30, r16
     912:	f1 1f       	adc	r31, r17
     914:	e6 52       	subi	r30, 0x26	; 38
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	80 83       	st	Z, r24
     91a:	0f 5f       	subi	r16, 0xFF	; 255
     91c:	1f 4f       	sbci	r17, 0xFF	; 255

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
     91e:	08 30       	cpi	r16, 0x08	; 8
     920:	11 05       	cpc	r17, r1
     922:	81 f7       	brne	.-32     	; 0x904 <mirror_x+0x56>
     924:	ff ef       	ldi	r31, 0xFF	; 255
     926:	af 1a       	sub	r10, r31
     928:	bf 0a       	sbc	r11, r31
     92a:	88 e0       	ldi	r24, 0x08	; 8
     92c:	88 0e       	add	r8, r24
     92e:	91 1c       	adc	r9, r1

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
     930:	98 e0       	ldi	r25, 0x08	; 8
     932:	a9 16       	cp	r10, r25
     934:	b1 04       	cpc	r11, r1
     936:	59 f0       	breq	.+22     	; 0x94e <mirror_x+0xa0>

}

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
     938:	74 01       	movw	r14, r8
     93a:	06 2d       	mov	r16, r6
     93c:	17 2d       	mov	r17, r7
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
     93e:	65 01       	movw	r12, r10
     940:	cc 0c       	add	r12, r12
     942:	dd 1c       	adc	r13, r13
     944:	cc 0c       	add	r12, r12
     946:	dd 1c       	adc	r13, r13
     948:	cc 0c       	add	r12, r12
     94a:	dd 1c       	adc	r13, r13
     94c:	db cf       	rjmp	.-74     	; 0x904 <mirror_x+0x56>
        }
    }
}
     94e:	c0 5c       	subi	r28, 0xC0	; 192
     950:	df 4f       	sbci	r29, 0xFF	; 255
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	cf 90       	pop	r12
     96c:	bf 90       	pop	r11
     96e:	af 90       	pop	r10
     970:	9f 90       	pop	r9
     972:	8f 90       	pop	r8
     974:	7f 90       	pop	r7
     976:	6f 90       	pop	r6
     978:	08 95       	ret

0000097a <mirror_z>:

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	c0 54       	subi	r28, 0x40	; 64
     98a:	d1 09       	sbc	r29, r1
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
     996:	80 e4       	ldi	r24, 0x40	; 64
     998:	ea ed       	ldi	r30, 0xDA	; 218
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	de 01       	movw	r26, r28
     99e:	11 96       	adiw	r26, 0x01	; 1
     9a0:	01 90       	ld	r0, Z+
     9a2:	0d 92       	st	X+, r0
     9a4:	8a 95       	dec	r24
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <mirror_z+0x26>
     9a8:	8e 01       	movw	r16, r28
     9aa:	0f 5f       	subi	r16, 0xFF	; 255
     9ac:	1f 4f       	sbci	r17, 0xFF	; 255
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	50 e0       	ldi	r21, 0x00	; 0
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
     9b2:	0f 2e       	mov	r0, r31
     9b4:	f7 e0       	ldi	r31, 0x07	; 7
     9b6:	ff 2e       	mov	r15, r31
     9b8:	f0 2d       	mov	r31, r0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	19 c0       	rjmp	.+50     	; 0x9f0 <mirror_z+0x76>

    for (y=0; y<CUBE_SIZE; y++)
    {
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
     9be:	2c 91       	ld	r18, X
     9c0:	fc 01       	movw	r30, r24
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	ee 0f       	add	r30, r30
     9cc:	ff 1f       	adc	r31, r31
     9ce:	e4 0f       	add	r30, r20
     9d0:	f5 1f       	adc	r31, r21
     9d2:	e6 52       	subi	r30, 0x26	; 38
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	20 83       	st	Z, r18
     9d8:	18 96       	adiw	r26, 0x08	; 8
     9da:	01 97       	sbiw	r24, 0x01	; 1

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
    {
        for (z=0; z<CUBE_SIZE; z++)
     9dc:	a6 17       	cp	r26, r22
     9de:	b7 07       	cpc	r27, r23
     9e0:	71 f7       	brne	.-36     	; 0x9be <mirror_z+0x44>
     9e2:	4f 5f       	subi	r20, 0xFF	; 255
     9e4:	5f 4f       	sbci	r21, 0xFF	; 255
     9e6:	0f 5f       	subi	r16, 0xFF	; 255
     9e8:	1f 4f       	sbci	r17, 0xFF	; 255
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
     9ea:	48 30       	cpi	r20, 0x08	; 8
     9ec:	51 05       	cpc	r21, r1
     9ee:	39 f0       	breq	.+14     	; 0x9fe <mirror_z+0x84>
     9f0:	b8 01       	movw	r22, r16
     9f2:	60 5c       	subi	r22, 0xC0	; 192
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
     9f6:	d8 01       	movw	r26, r16
     9f8:	8f 2d       	mov	r24, r15
     9fa:	93 2f       	mov	r25, r19
     9fc:	e0 cf       	rjmp	.-64     	; 0x9be <mirror_z+0x44>
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
        }
    }
}
     9fe:	c0 5c       	subi	r28, 0xC0	; 192
     a00:	df 4f       	sbci	r29, 0xFF	; 255
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	08 95       	ret

00000a18 <effect_stringfly2>:
			sendvoxel_z(x,y,z,delay);
			delay_ms(wait);
			loop--; // one down, loop-- to go. when this hits 0, the loop exits. 
		}
	}
}
     a18:	2f 92       	push	r2
     a1a:	3f 92       	push	r3
     a1c:	4f 92       	push	r4
     a1e:	5f 92       	push	r5
     a20:	6f 92       	push	r6
     a22:	7f 92       	push	r7
     a24:	8f 92       	push	r8
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <effect_stringfly2+0x26>
     a3e:	00 d0       	rcall	.+0      	; 0xa40 <effect_stringfly2+0x28>
     a40:	1f 92       	push	r1
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	4c 01       	movw	r8, r24
     a48:	68 94       	set
     a4a:	44 24       	eor	r4, r4
     a4c:	41 f8       	bld	r4, 1
     a4e:	51 2c       	mov	r5, r1
     a50:	68 94       	set
     a52:	cc 24       	eor	r12, r12
     a54:	c7 f8       	bld	r12, 7
     a56:	d1 2c       	mov	r13, r1
     a58:	61 2c       	mov	r6, r1
     a5a:	71 2c       	mov	r7, r1
     a5c:	0f 2e       	mov	r0, r31
     a5e:	f6 e0       	ldi	r31, 0x06	; 6
     a60:	3f 2e       	mov	r3, r31
     a62:	f0 2d       	mov	r31, r0
     a64:	21 2c       	mov	r2, r1
     a66:	3f c0       	rjmp	.+126    	; 0xae6 <effect_stringfly2+0xce>
     a68:	be 01       	movw	r22, r28
     a6a:	6f 5f       	subi	r22, 0xFF	; 255
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <font_getchar>
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	7c 01       	movw	r14, r24
     a78:	a4 2c       	mov	r10, r4
     a7a:	b5 2c       	mov	r11, r5
     a7c:	23 c0       	rjmp	.+70     	; 0xac4 <effect_stringfly2+0xac>
     a7e:	f7 01       	movw	r30, r14
     a80:	80 81       	ld	r24, Z
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	96 01       	movw	r18, r12
     a86:	00 2e       	mov	r0, r16
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <effect_stringfly2+0x76>
     a8a:	35 95       	asr	r19
     a8c:	27 95       	ror	r18
     a8e:	0a 94       	dec	r0
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <effect_stringfly2+0x72>
     a92:	82 23       	and	r24, r18
     a94:	93 23       	and	r25, r19
     a96:	89 2b       	or	r24, r25
     a98:	31 f0       	breq	.+12     	; 0xaa6 <effect_stringfly2+0x8e>
     a9a:	a8 01       	movw	r20, r16
     a9c:	b5 01       	movw	r22, r10
     a9e:	87 e0       	ldi	r24, 0x07	; 7
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     aa6:	0f 5f       	subi	r16, 0xFF	; 255
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	08 30       	cpi	r16, 0x08	; 8
     aac:	11 05       	cpc	r17, r1
     aae:	39 f7       	brne	.-50     	; 0xa7e <effect_stringfly2+0x66>
     ab0:	ff ef       	ldi	r31, 0xFF	; 255
     ab2:	ef 1a       	sub	r14, r31
     ab4:	ff 0a       	sbc	r15, r31
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	a8 1a       	sub	r10, r24
     aba:	b8 0a       	sbc	r11, r24
     abc:	97 e0       	ldi	r25, 0x07	; 7
     abe:	a9 16       	cp	r10, r25
     ac0:	b1 04       	cpc	r11, r1
     ac2:	19 f0       	breq	.+6      	; 0xaca <effect_stringfly2+0xb2>
     ac4:	06 2d       	mov	r16, r6
     ac6:	17 2d       	mov	r17, r7
     ac8:	da cf       	rjmp	.-76     	; 0xa7e <effect_stringfly2+0x66>
     aca:	03 2d       	mov	r16, r3
     acc:	12 2d       	mov	r17, r2
     ace:	88 ee       	ldi	r24, 0xE8	; 232
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     ad6:	6f ef       	ldi	r22, 0xFF	; 255
     ad8:	7f ef       	ldi	r23, 0xFF	; 255
     ada:	88 e7       	ldi	r24, 0x78	; 120
     adc:	0e 94 1a 03 	call	0x634	; 0x634 <shift>
     ae0:	01 50       	subi	r16, 0x01	; 1
     ae2:	11 09       	sbc	r17, r1
     ae4:	a1 f7       	brne	.-24     	; 0xace <effect_stringfly2+0xb6>
     ae6:	f4 01       	movw	r30, r8
     ae8:	81 91       	ld	r24, Z+
     aea:	4f 01       	movw	r8, r30
     aec:	81 11       	cpse	r24, r1
     aee:	bc cf       	rjmp	.-136    	; 0xa68 <effect_stringfly2+0x50>
     af0:	08 e0       	ldi	r16, 0x08	; 8
     af2:	10 e0       	ldi	r17, 0x00	; 0
     af4:	88 ee       	ldi	r24, 0xE8	; 232
     af6:	93 e0       	ldi	r25, 0x03	; 3
     af8:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     afc:	6f ef       	ldi	r22, 0xFF	; 255
     afe:	7f ef       	ldi	r23, 0xFF	; 255
     b00:	88 e7       	ldi	r24, 0x78	; 120
     b02:	0e 94 1a 03 	call	0x634	; 0x634 <shift>
     b06:	01 50       	subi	r16, 0x01	; 1
     b08:	11 09       	sbc	r17, r1
     b0a:	a1 f7       	brne	.-24     	; 0xaf4 <effect_stringfly2+0xdc>
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
     b28:	af 90       	pop	r10
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	7f 90       	pop	r7
     b30:	6f 90       	pop	r6
     b32:	5f 90       	pop	r5
     b34:	4f 90       	pop	r4
     b36:	3f 90       	pop	r3
     b38:	2f 90       	pop	r2
     b3a:	08 95       	ret

00000b3c <effect_planboing>:
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	08 2f       	mov	r16, r24
     b4a:	c0 e0       	ldi	r28, 0x00	; 0
     b4c:	16 2f       	mov	r17, r22
     b4e:	d7 2f       	mov	r29, r23
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     b56:	6c 2f       	mov	r22, r28
     b58:	80 2f       	mov	r24, r16
     b5a:	0e 94 86 01 	call	0x30c	; 0x30c <setplane>
     b5e:	f1 2e       	mov	r15, r17
     b60:	ed 2e       	mov	r14, r29
     b62:	81 2f       	mov	r24, r17
     b64:	9d 2f       	mov	r25, r29
     b66:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     b6a:	cf 5f       	subi	r28, 0xFF	; 255
     b6c:	c8 30       	cpi	r28, 0x08	; 8
     b6e:	81 f7       	brne	.-32     	; 0xb50 <effect_planboing+0x14>
     b70:	c7 e0       	ldi	r28, 0x07	; 7
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     b78:	6c 2f       	mov	r22, r28
     b7a:	80 2f       	mov	r24, r16
     b7c:	0e 94 86 01 	call	0x30c	; 0x30c <setplane>
     b80:	8f 2d       	mov	r24, r15
     b82:	9e 2d       	mov	r25, r14
     b84:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     b88:	c1 50       	subi	r28, 0x01	; 1
     b8a:	98 f7       	brcc	.-26     	; 0xb72 <effect_planboing+0x36>
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	08 95       	ret

00000b9a <effect_blinky2>:
     b9a:	6f 92       	push	r6
     b9c:	7f 92       	push	r7
     b9e:	8f 92       	push	r8
     ba0:	9f 92       	push	r9
     ba2:	af 92       	push	r10
     ba4:	bf 92       	push	r11
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     bbc:	68 94       	set
     bbe:	aa 24       	eor	r10, r10
     bc0:	a1 f8       	bld	r10, 1
     bc2:	b1 2c       	mov	r11, r1
     bc4:	0f 2e       	mov	r0, r31
     bc6:	fe ee       	ldi	r31, 0xEE	; 238
     bc8:	6f 2e       	mov	r6, r31
     bca:	f0 2d       	mov	r31, r0
     bcc:	68 94       	set
     bce:	77 24       	eor	r7, r7
     bd0:	71 f8       	bld	r7, 1
     bd2:	0f 2e       	mov	r0, r31
     bd4:	fa e0       	ldi	r31, 0x0A	; 10
     bd6:	ef 2e       	mov	r14, r31
     bd8:	f1 2c       	mov	r15, r1
     bda:	f0 2d       	mov	r31, r0
     bdc:	08 ee       	ldi	r16, 0xE8	; 232
     bde:	13 e0       	ldi	r17, 0x03	; 3
     be0:	0f 2e       	mov	r0, r31
     be2:	f1 ef       	ldi	r31, 0xF1	; 241
     be4:	8f 2e       	mov	r8, r31
     be6:	99 24       	eor	r9, r9
     be8:	9a 94       	dec	r9
     bea:	f0 2d       	mov	r31, r0
     bec:	0f 2e       	mov	r0, r31
     bee:	ff ee       	ldi	r31, 0xEF	; 239
     bf0:	cf 2e       	mov	r12, r31
     bf2:	f2 e0       	ldi	r31, 0x02	; 2
     bf4:	df 2e       	mov	r13, r31
     bf6:	f0 2d       	mov	r31, r0
     bf8:	43 c0       	rjmp	.+134    	; 0xc80 <effect_blinky2+0xe6>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     c00:	ce 01       	movw	r24, r28
     c02:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     c0c:	84 e6       	ldi	r24, 0x64	; 100
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     c14:	ce 01       	movw	r24, r28
     c16:	b7 01       	movw	r22, r14
     c18:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
     c1c:	c8 01       	movw	r24, r16
     c1e:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
     c22:	c4 01       	movw	r24, r8
     c24:	86 1b       	sub	r24, r22
     c26:	97 0b       	sbc	r25, r23
     c28:	c8 0f       	add	r28, r24
     c2a:	d9 1f       	adc	r29, r25
     c2c:	1c 16       	cp	r1, r28
     c2e:	1d 06       	cpc	r1, r29
     c30:	24 f3       	brlt	.-56     	; 0xbfa <effect_blinky2+0x60>
     c32:	c8 01       	movw	r24, r16
     c34:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     c38:	c6 2d       	mov	r28, r6
     c3a:	d7 2d       	mov	r29, r7
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     c42:	c6 01       	movw	r24, r12
     c44:	8c 1b       	sub	r24, r28
     c46:	9d 0b       	sbc	r25, r29
     c48:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     c52:	84 e6       	ldi	r24, 0x64	; 100
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     c5a:	ce 01       	movw	r24, r28
     c5c:	b7 01       	movw	r22, r14
     c5e:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
     c62:	c8 01       	movw	r24, r16
     c64:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
     c68:	c4 01       	movw	r24, r8
     c6a:	86 1b       	sub	r24, r22
     c6c:	97 0b       	sbc	r25, r23
     c6e:	c8 0f       	add	r28, r24
     c70:	d9 1f       	adc	r29, r25
     c72:	1c 16       	cp	r1, r28
     c74:	1d 06       	cpc	r1, r29
     c76:	14 f3       	brlt	.-60     	; 0xc3c <effect_blinky2+0xa2>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	a8 1a       	sub	r10, r24
     c7c:	b1 08       	sbc	r11, r1
     c7e:	19 f0       	breq	.+6      	; 0xc86 <effect_blinky2+0xec>
     c80:	c6 2d       	mov	r28, r6
     c82:	d7 2d       	mov	r29, r7
     c84:	ba cf       	rjmp	.-140    	; 0xbfa <effect_blinky2+0x60>
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	cf 90       	pop	r12
     c96:	bf 90       	pop	r11
     c98:	af 90       	pop	r10
     c9a:	9f 90       	pop	r9
     c9c:	8f 90       	pop	r8
     c9e:	7f 90       	pop	r7
     ca0:	6f 90       	pop	r6
     ca2:	08 95       	ret

00000ca4 <effect_box_shrink_grow>:
     ca4:	2f 92       	push	r2
     ca6:	3f 92       	push	r3
     ca8:	4f 92       	push	r4
     caa:	5f 92       	push	r5
     cac:	6f 92       	push	r6
     cae:	7f 92       	push	r7
     cb0:	8f 92       	push	r8
     cb2:	9f 92       	push	r9
     cb4:	af 92       	push	r10
     cb6:	bf 92       	push	r11
     cb8:	cf 92       	push	r12
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	28 97       	sbiw	r28, 0x08	; 8
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	18 16       	cp	r1, r24
     cda:	19 06       	cpc	r1, r25
     cdc:	0c f4       	brge	.+2      	; 0xce0 <effect_box_shrink_grow+0x3c>
     cde:	4f c0       	rjmp	.+158    	; 0xd7e <effect_box_shrink_grow+0xda>
     ce0:	67 c0       	rjmp	.+206    	; 0xdb0 <effect_box_shrink_grow+0x10c>
     ce2:	2f 81       	ldd	r18, Y+7	; 0x07
     ce4:	38 85       	ldd	r19, Y+8	; 0x08
     ce6:	28 30       	cpi	r18, 0x08	; 8
     ce8:	31 05       	cpc	r19, r1
     cea:	24 f4       	brge	.+8      	; 0xcf4 <effect_box_shrink_grow+0x50>
     cec:	64 01       	movw	r12, r8
     cee:	c2 1a       	sub	r12, r18
     cf0:	d3 0a       	sbc	r13, r19
     cf2:	05 c0       	rjmp	.+10     	; 0xcfe <effect_box_shrink_grow+0x5a>
     cf4:	cf 80       	ldd	r12, Y+7	; 0x07
     cf6:	d8 84       	ldd	r13, Y+8	; 0x08
     cf8:	38 e0       	ldi	r19, 0x08	; 8
     cfa:	c3 1a       	sub	r12, r19
     cfc:	d1 08       	sbc	r13, r1
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     d0c:	f8 94       	cli
     d0e:	76 01       	movw	r14, r12
     d10:	86 01       	movw	r16, r12
     d12:	96 01       	movw	r18, r12
     d14:	42 2d       	mov	r20, r2
     d16:	53 2d       	mov	r21, r3
     d18:	62 2d       	mov	r22, r2
     d1a:	73 2d       	mov	r23, r3
     d1c:	82 2d       	mov	r24, r2
     d1e:	93 2d       	mov	r25, r3
     d20:	0e 94 cf 01 	call	0x39e	; 0x39e <box_wireframe>
     d24:	14 14       	cp	r1, r4
     d26:	15 04       	cpc	r1, r5
     d28:	14 f4       	brge	.+4      	; 0xd2e <effect_box_shrink_grow+0x8a>
     d2a:	0e 94 bd 04 	call	0x97a	; 0x97a <mirror_z>
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	a8 16       	cp	r10, r24
     d32:	b1 04       	cpc	r11, r1
     d34:	11 f4       	brne	.+4      	; 0xd3a <effect_box_shrink_grow+0x96>
     d36:	0e 94 df 03 	call	0x7be	; 0x7be <mirror_y>
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	69 16       	cp	r6, r25
     d3e:	71 04       	cpc	r7, r1
     d40:	10 f4       	brcc	.+4      	; 0xd46 <effect_box_shrink_grow+0xa2>
     d42:	0e 94 57 04 	call	0x8ae	; 0x8ae <mirror_x>
     d46:	78 94       	sei
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     d56:	ef 81       	ldd	r30, Y+7	; 0x07
     d58:	f8 85       	ldd	r31, Y+8	; 0x08
     d5a:	31 96       	adiw	r30, 0x01	; 1
     d5c:	f8 87       	std	Y+8, r31	; 0x08
     d5e:	ef 83       	std	Y+7, r30	; 0x07
     d60:	70 97       	sbiw	r30, 0x10	; 16
     d62:	09 f0       	breq	.+2      	; 0xd66 <effect_box_shrink_grow+0xc2>
     d64:	be cf       	rjmp	.-132    	; 0xce2 <effect_box_shrink_grow+0x3e>
     d66:	2b 81       	ldd	r18, Y+3	; 0x03
     d68:	3c 81       	ldd	r19, Y+4	; 0x04
     d6a:	2f 5f       	subi	r18, 0xFF	; 255
     d6c:	3f 4f       	sbci	r19, 0xFF	; 255
     d6e:	3c 83       	std	Y+4, r19	; 0x04
     d70:	2b 83       	std	Y+3, r18	; 0x03
     d72:	8d 81       	ldd	r24, Y+5	; 0x05
     d74:	9e 81       	ldd	r25, Y+6	; 0x06
     d76:	28 17       	cp	r18, r24
     d78:	39 07       	cpc	r19, r25
     d7a:	b1 f4       	brne	.+44     	; 0xda8 <effect_box_shrink_grow+0x104>
     d7c:	19 c0       	rjmp	.+50     	; 0xdb0 <effect_box_shrink_grow+0x10c>
     d7e:	3a 83       	std	Y+2, r19	; 0x02
     d80:	29 83       	std	Y+1, r18	; 0x01
     d82:	2a 01       	movw	r4, r20
     d84:	3b 01       	movw	r6, r22
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 83       	std	Y+5, r24	; 0x05
     d8a:	1c 82       	std	Y+4, r1	; 0x04
     d8c:	1b 82       	std	Y+3, r1	; 0x03
     d8e:	21 2c       	mov	r2, r1
     d90:	31 2c       	mov	r3, r1
     d92:	0f 2e       	mov	r0, r31
     d94:	f7 e0       	ldi	r31, 0x07	; 7
     d96:	8f 2e       	mov	r8, r31
     d98:	91 2c       	mov	r9, r1
     d9a:	f0 2d       	mov	r31, r0
     d9c:	5b 01       	movw	r10, r22
     d9e:	e8 94       	clt
     da0:	a1 f8       	bld	r10, 1
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	69 1a       	sub	r6, r25
     da6:	71 08       	sbc	r7, r1
     da8:	2f 82       	std	Y+7, r2	; 0x07
     daa:	38 86       	std	Y+8, r3	; 0x08
     dac:	64 01       	movw	r12, r8
     dae:	a7 cf       	rjmp	.-178    	; 0xcfe <effect_box_shrink_grow+0x5a>
     db0:	28 96       	adiw	r28, 0x08	; 8
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	7f 90       	pop	r7
     dd6:	6f 90       	pop	r6
     dd8:	5f 90       	pop	r5
     dda:	4f 90       	pop	r4
     ddc:	3f 90       	pop	r3
     dde:	2f 90       	pop	r2
     de0:	08 95       	ret

00000de2 <effect_box_woopwoop>:
     de2:	8f 92       	push	r8
     de4:	9f 92       	push	r9
     de6:	af 92       	push	r10
     de8:	bf 92       	push	r11
     dea:	cf 92       	push	r12
     dec:	df 92       	push	r13
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	5c 01       	movw	r10, r24
     dfc:	6b 01       	movw	r12, r22
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     e04:	c0 e0       	ldi	r28, 0x00	; 0
     e06:	d0 e0       	ldi	r29, 0x00	; 0
     e08:	0f 2e       	mov	r0, r31
     e0a:	f3 e0       	ldi	r31, 0x03	; 3
     e0c:	8f 2e       	mov	r8, r31
     e0e:	91 2c       	mov	r9, r1
     e10:	f0 2d       	mov	r31, r0
     e12:	1c 14       	cp	r1, r12
     e14:	1d 04       	cpc	r1, r13
     e16:	24 f4       	brge	.+8      	; 0xe20 <effect_box_woopwoop+0x3e>
     e18:	c4 01       	movw	r24, r8
     e1a:	8c 1b       	sub	r24, r28
     e1c:	9d 0b       	sbc	r25, r29
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <effect_box_woopwoop+0x40>
     e20:	ce 01       	movw	r24, r28
     e22:	94 01       	movw	r18, r8
     e24:	28 1b       	sub	r18, r24
     e26:	39 0b       	sbc	r19, r25
     e28:	04 96       	adiw	r24, 0x04	; 4
     e2a:	79 01       	movw	r14, r18
     e2c:	89 01       	movw	r16, r18
     e2e:	ac 01       	movw	r20, r24
     e30:	bc 01       	movw	r22, r24
     e32:	0e 94 cf 01 	call	0x39e	; 0x39e <box_wireframe>
     e36:	c5 01       	movw	r24, r10
     e38:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     e42:	21 96       	adiw	r28, 0x01	; 1
     e44:	c4 30       	cpi	r28, 0x04	; 4
     e46:	d1 05       	cpc	r29, r1
     e48:	21 f7       	brne	.-56     	; 0xe12 <effect_box_woopwoop+0x30>
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	bf 90       	pop	r11
     e5c:	af 90       	pop	r10
     e5e:	9f 90       	pop	r9
     e60:	8f 90       	pop	r8
     e62:	08 95       	ret

00000e64 <sendvoxel_z>:
     e64:	5f 92       	push	r5
     e66:	6f 92       	push	r6
     e68:	7f 92       	push	r7
     e6a:	8f 92       	push	r8
     e6c:	9f 92       	push	r9
     e6e:	af 92       	push	r10
     e70:	bf 92       	push	r11
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	54 2e       	mov	r5, r20
     e84:	39 01       	movw	r6, r18
     e86:	c0 e0       	ldi	r28, 0x00	; 0
     e88:	d0 e0       	ldi	r29, 0x00	; 0
     e8a:	06 2f       	mov	r16, r22
     e8c:	10 e0       	ldi	r17, 0x00	; 0
     e8e:	88 2e       	mov	r8, r24
     e90:	91 2c       	mov	r9, r1
     e92:	0f 2e       	mov	r0, r31
     e94:	f7 e0       	ldi	r31, 0x07	; 7
     e96:	af 2e       	mov	r10, r31
     e98:	b1 2c       	mov	r11, r1
     e9a:	f0 2d       	mov	r31, r0
     e9c:	68 94       	set
     e9e:	cc 24       	eor	r12, r12
     ea0:	c3 f8       	bld	r12, 3
     ea2:	d1 2c       	mov	r13, r1
     ea4:	87 e0       	ldi	r24, 0x07	; 7
     ea6:	58 12       	cpse	r5, r24
     ea8:	0b c0       	rjmp	.+22     	; 0xec0 <sendvoxel_z+0x5c>
     eaa:	75 01       	movw	r14, r10
     eac:	ec 1a       	sub	r14, r28
     eae:	fd 0a       	sbc	r15, r29
     eb0:	a6 01       	movw	r20, r12
     eb2:	4c 1b       	sub	r20, r28
     eb4:	5d 0b       	sbc	r21, r29
     eb6:	b8 01       	movw	r22, r16
     eb8:	c4 01       	movw	r24, r8
     eba:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
     ebe:	08 c0       	rjmp	.+16     	; 0xed0 <sendvoxel_z+0x6c>
     ec0:	ae 01       	movw	r20, r28
     ec2:	41 50       	subi	r20, 0x01	; 1
     ec4:	51 09       	sbc	r21, r1
     ec6:	b8 01       	movw	r22, r16
     ec8:	c4 01       	movw	r24, r8
     eca:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
     ece:	7e 01       	movw	r14, r28
     ed0:	a7 01       	movw	r20, r14
     ed2:	b8 01       	movw	r22, r16
     ed4:	c4 01       	movw	r24, r8
     ed6:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     eda:	c3 01       	movw	r24, r6
     edc:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
     ee0:	21 96       	adiw	r28, 0x01	; 1
     ee2:	c8 30       	cpi	r28, 0x08	; 8
     ee4:	d1 05       	cpc	r29, r1
     ee6:	f1 f6       	brne	.-68     	; 0xea4 <sendvoxel_z+0x40>
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	bf 90       	pop	r11
     efa:	af 90       	pop	r10
     efc:	9f 90       	pop	r9
     efe:	8f 90       	pop	r8
     f00:	7f 90       	pop	r7
     f02:	6f 90       	pop	r6
     f04:	5f 90       	pop	r5
     f06:	08 95       	ret

00000f08 <sendvoxels_rand_z>:

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
     f08:	8f 92       	push	r8
     f0a:	9f 92       	push	r9
     f0c:	af 92       	push	r10
     f0e:	bf 92       	push	r11
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	7c 01       	movw	r14, r24
     f22:	5b 01       	movw	r10, r22
     f24:	6a 01       	movw	r12, r20
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
     f2c:	00 e0       	ldi	r16, 0x00	; 0
     f2e:	10 e0       	ldi	r17, 0x00	; 0
}

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
     f30:	81 2c       	mov	r8, r1
     f32:	91 2c       	mov	r9, r1
     f34:	20 c0       	rjmp	.+64     	; 0xf76 <sendvoxels_rand_z+0x6e>
	{
		for (y=0;y<8;y++)
		{
			// Then set a voxel either at the top or at the bottom
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
     f36:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     f3a:	81 70       	andi	r24, 0x01	; 1
     f3c:	90 78       	andi	r25, 0x80	; 128
     f3e:	99 23       	and	r25, r25
     f40:	24 f4       	brge	.+8      	; 0xf4a <sendvoxels_rand_z+0x42>
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	8e 6f       	ori	r24, 0xFE	; 254
     f46:	9f 6f       	ori	r25, 0xFF	; 255
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	ac 01       	movw	r20, r24
     f4c:	44 0f       	add	r20, r20
     f4e:	55 1f       	adc	r21, r21
     f50:	44 0f       	add	r20, r20
     f52:	55 1f       	adc	r21, r21
     f54:	44 0f       	add	r20, r20
     f56:	55 1f       	adc	r21, r21
     f58:	48 1b       	sub	r20, r24
     f5a:	59 0b       	sbc	r21, r25
     f5c:	be 01       	movw	r22, r28
     f5e:	c8 01       	movw	r24, r16
     f60:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
     f64:	21 96       	adiw	r28, 0x01	; 1
	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
	{
		for (y=0;y<8;y++)
     f66:	c8 30       	cpi	r28, 0x08	; 8
     f68:	d1 05       	cpc	r29, r1
     f6a:	29 f7       	brne	.-54     	; 0xf36 <sendvoxels_rand_z+0x2e>
     f6c:	0f 5f       	subi	r16, 0xFF	; 255
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
     f70:	08 30       	cpi	r16, 0x08	; 8
     f72:	11 05       	cpc	r17, r1
     f74:	19 f0       	breq	.+6      	; 0xf7c <sendvoxels_rand_z+0x74>
}

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
     f76:	c8 2d       	mov	r28, r8
     f78:	d9 2d       	mov	r29, r9
     f7a:	dd cf       	rjmp	.-70     	; 0xf36 <sendvoxels_rand_z+0x2e>
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
     f7c:	1e 14       	cp	r1, r14
     f7e:	1f 04       	cpc	r1, r15
     f80:	0c f0       	brlt	.+2      	; 0xf84 <sendvoxels_rand_z+0x7c>
     f82:	40 c0       	rjmp	.+128    	; 0x1004 <sendvoxels_rand_z+0xfc>
     f84:	d0 e0       	ldi	r29, 0x00	; 0
     f86:	91 2c       	mov	r9, r1
     f88:	81 2c       	mov	r8, r1
	{
		// Pick a random x,y position
		x = rand()%8;
     f8a:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     f8e:	8c 01       	movw	r16, r24
		y = rand()%8;
     f90:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     f94:	87 70       	andi	r24, 0x07	; 7
     f96:	90 78       	andi	r25, 0x80	; 128
     f98:	99 23       	and	r25, r25
     f9a:	24 f4       	brge	.+8      	; 0xfa4 <sendvoxels_rand_z+0x9c>
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	88 6f       	ori	r24, 0xF8	; 248
     fa0:	9f 6f       	ori	r25, 0xFF	; 255
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	bc 01       	movw	r22, r24
     fa6:	c8 2f       	mov	r28, r24
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
     fa8:	89 15       	cp	r24, r9
     faa:	31 f1       	breq	.+76     	; 0xff8 <sendvoxels_rand_z+0xf0>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
     fac:	c8 01       	movw	r24, r16
     fae:	87 70       	andi	r24, 0x07	; 7
     fb0:	90 78       	andi	r25, 0x80	; 128
     fb2:	99 23       	and	r25, r25
     fb4:	24 f4       	brge	.+8      	; 0xfbe <sendvoxels_rand_z+0xb6>
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	88 6f       	ori	r24, 0xF8	; 248
     fba:	9f 6f       	ori	r25, 0xFF	; 255
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	18 2f       	mov	r17, r24
		y = rand()%8;
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
     fc0:	88 15       	cp	r24, r8
     fc2:	d1 f0       	breq	.+52     	; 0xff8 <sendvoxels_rand_z+0xf0>
		{
			// If the voxel at this x,y is at the bottom
			if (getvoxel(x,y,0))
     fc4:	77 27       	eor	r23, r23
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <getvoxel>
     fd0:	88 23       	and	r24, r24
     fd2:	39 f0       	breq	.+14     	; 0xfe2 <sendvoxels_rand_z+0xda>
			{
				// send it to the top
				sendvoxel_z(x,y,0,delay);
     fd4:	95 01       	movw	r18, r10
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	6c 2f       	mov	r22, r28
     fda:	81 2f       	mov	r24, r17
     fdc:	0e 94 32 07 	call	0xe64	; 0xe64 <sendvoxel_z>
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <sendvoxels_rand_z+0xe6>
			} else
			{
				// if its at the top, send it to the bottom
				sendvoxel_z(x,y,7,delay);
     fe2:	95 01       	movw	r18, r10
     fe4:	47 e0       	ldi	r20, 0x07	; 7
     fe6:	6c 2f       	mov	r22, r28
     fe8:	81 2f       	mov	r24, r17
     fea:	0e 94 32 07 	call	0xe64	; 0xe64 <sendvoxel_z>
			}
			delay_ms(wait);
     fee:	c6 01       	movw	r24, r12
     ff0:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			
			// Remember the last move
			last_y = y;
     ff4:	9c 2e       	mov	r9, r28
			last_x = x;
     ff6:	81 2e       	mov	r8, r17
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
     ff8:	df 5f       	subi	r29, 0xFF	; 255
     ffa:	8d 2f       	mov	r24, r29
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	8e 15       	cp	r24, r14
    1000:	9f 05       	cpc	r25, r15
    1002:	1c f2       	brlt	.-122    	; 0xf8a <sendvoxels_rand_z+0x82>
			last_y = y;
			last_x = x;
		}
	}

}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	9f 90       	pop	r9
    101a:	8f 90       	pop	r8
    101c:	08 95       	ret

0000101e <boingboing>:


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
{
    101e:	2f 92       	push	r2
    1020:	3f 92       	push	r3
    1022:	4f 92       	push	r4
    1024:	5f 92       	push	r5
    1026:	6f 92       	push	r6
    1028:	7f 92       	push	r7
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	ea 97       	sbiw	r28, 0x3a	; 58
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	9c ab       	std	Y+52, r25	; 0x34
    1054:	8b ab       	std	Y+51, r24	; 0x33
    1056:	7a af       	std	Y+58, r23	; 0x3a
    1058:	69 af       	std	Y+57, r22	; 0x39
    105a:	2d ab       	std	Y+53, r18	; 0x35
	fill(0x00);		// Blank the cube
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
	int x, y, z;		// Current coordinates for the point
	int dx, dy, dz;	// Direction of movement
	int lol, i;		// lol?
	unsigned char crash_x, crash_y, crash_z;

	y = rand()%8;
    1062:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1066:	87 70       	andi	r24, 0x07	; 7
    1068:	90 78       	andi	r25, 0x80	; 128
    106a:	99 23       	and	r25, r25
    106c:	24 f4       	brge	.+8      	; 0x1076 <boingboing+0x58>
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	88 6f       	ori	r24, 0xF8	; 248
    1072:	9f 6f       	ori	r25, 0xFF	; 255
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	6c 01       	movw	r12, r24
	x = rand()%8;
    1078:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    107c:	87 70       	andi	r24, 0x07	; 7
    107e:	90 78       	andi	r25, 0x80	; 128
    1080:	99 23       	and	r25, r25
    1082:	24 f4       	brge	.+8      	; 0x108c <boingboing+0x6e>
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	88 6f       	ori	r24, 0xF8	; 248
    1088:	9f 6f       	ori	r25, 0xFF	; 255
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	7c 01       	movw	r14, r24
	z = rand()%8;
    108e:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1092:	87 70       	andi	r24, 0x07	; 7
    1094:	90 78       	andi	r25, 0x80	; 128
    1096:	99 23       	and	r25, r25
    1098:	24 f4       	brge	.+8      	; 0x10a2 <boingboing+0x84>
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	88 6f       	ori	r24, 0xF8	; 248
    109e:	9f 6f       	ori	r25, 0xFF	; 255
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	4c 01       	movw	r8, r24
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	1e 01       	movw	r2, r28
    10aa:	21 e3       	ldi	r18, 0x31	; 49
    10ac:	22 0e       	add	r2, r18
    10ae:	31 1c       	adc	r3, r1
    10b0:	fc 01       	movw	r30, r24

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
	{
		snake[i][0] = x;
    10b2:	f1 82       	std	Z+1, r15	; 0x01
    10b4:	e0 82       	st	Z, r14
		snake[i][1] = y;
    10b6:	d3 82       	std	Z+3, r13	; 0x03
    10b8:	c2 82       	std	Z+2, r12	; 0x02
		snake[i][2] = z;
    10ba:	95 82       	std	Z+5, r9	; 0x05
    10bc:	84 82       	std	Z+4, r8	; 0x04
    10be:	36 96       	adiw	r30, 0x06	; 6
	x = rand()%8;
	z = rand()%8;

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
    10c0:	e2 15       	cp	r30, r2
    10c2:	f3 05       	cpc	r31, r3
    10c4:	b1 f7       	brne	.-20     	; 0x10b2 <boingboing+0x94>
	
	dx = 1;
	dy = 1;
	dz = 1;
	
	while(iterations)
    10c6:	eb a9       	ldd	r30, Y+51	; 0x33
    10c8:	fc a9       	ldd	r31, Y+52	; 0x34
    10ca:	ef 2b       	or	r30, r31
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <boingboing+0xb2>
    10ce:	aa c2       	rjmp	.+1364   	; 0x1624 <boingboing+0x606>
    10d0:	66 24       	eor	r6, r6
    10d2:	63 94       	inc	r6
    10d4:	71 2c       	mov	r7, r1
    10d6:	44 24       	eor	r4, r4
    10d8:	43 94       	inc	r4
    10da:	51 2c       	mov	r5, r1
    10dc:	aa 24       	eor	r10, r10
    10de:	a3 94       	inc	r10
    10e0:	b1 2c       	mov	r11, r1
    10e2:	9e 01       	movw	r18, r28
    10e4:	2b 50       	subi	r18, 0x0B	; 11
    10e6:	31 09       	sbc	r19, r1
    10e8:	3a ab       	std	Y+50, r19	; 0x32
    10ea:	29 ab       	std	Y+49, r18	; 0x31
				snake[i][1] = snake[i-1][1];
				snake[i][2] = snake[i-1][2];
			}
			snake[0][0] = x;
			snake[0][1] = y;
			snake[0][2] = z;
    10ec:	8f ab       	std	Y+55, r24	; 0x37
    10ee:	98 af       	std	Y+56, r25	; 0x38
		crash_y = 0;
		crash_z = 0;
	

		// Let's mix things up a little:
		if (rand()%3 == 0)
    10f0:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    10f4:	63 e0       	ldi	r22, 0x03	; 3
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    10fc:	89 2b       	or	r24, r25
    10fe:	69 f5       	brne	.+90     	; 0x115a <boingboing+0x13c>
		{
			// Pick a random axis, and set the speed to a random number.
			lol = rand()%3;
    1100:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1104:	63 e0       	ldi	r22, 0x03	; 3
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
			if (lol == 0)
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	59 f4       	brne	.+22     	; 0x1126 <boingboing+0x108>
				dx = rand()%3 - 1;
    1110:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1114:	63 e0       	ldi	r22, 0x03	; 3
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    111c:	5c 01       	movw	r10, r24
    111e:	31 e0       	ldi	r19, 0x01	; 1
    1120:	a3 1a       	sub	r10, r19
    1122:	b1 08       	sbc	r11, r1
    1124:	1a c0       	rjmp	.+52     	; 0x115a <boingboing+0x13c>
			
			if (lol == 1)
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	59 f4       	brne	.+22     	; 0x1142 <boingboing+0x124>
				dy = rand()%3 - 1;
    112c:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1130:	63 e0       	ldi	r22, 0x03	; 3
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    1138:	2c 01       	movw	r4, r24
    113a:	e1 e0       	ldi	r30, 0x01	; 1
    113c:	4e 1a       	sub	r4, r30
    113e:	51 08       	sbc	r5, r1
    1140:	0c c0       	rjmp	.+24     	; 0x115a <boingboing+0x13c>
				
			if (lol == 2)
    1142:	02 97       	sbiw	r24, 0x02	; 2
    1144:	51 f4       	brne	.+20     	; 0x115a <boingboing+0x13c>
				dz = rand()%3 - 1;
    1146:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    114a:	63 e0       	ldi	r22, 0x03	; 3
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    1152:	3c 01       	movw	r6, r24
    1154:	f1 e0       	ldi	r31, 0x01	; 1
    1156:	6f 1a       	sub	r6, r31
    1158:	71 08       	sbc	r7, r1
		}

	    // The point has reached 0 on the x-axis and is trying to go to -1
        // aka a crash
		if (dx == -1 && x == 0)
    115a:	2f ef       	ldi	r18, 0xFF	; 255
    115c:	a2 16       	cp	r10, r18
    115e:	b2 06       	cpc	r11, r18
    1160:	99 f4       	brne	.+38     	; 0x1188 <boingboing+0x16a>
    1162:	e1 14       	cp	r14, r1
    1164:	f1 04       	cpc	r15, r1
    1166:	91 f4       	brne	.+36     	; 0x118c <boingboing+0x16e>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    1168:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    116c:	63 e0       	ldi	r22, 0x03	; 3
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    1174:	21 e0       	ldi	r18, 0x01	; 1
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	09 f0       	breq	.+2      	; 0x117e <boingboing+0x160>
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	a2 2e       	mov	r10, r18
    1180:	b3 2e       	mov	r11, r19

	    // The point has reached 0 on the x-axis and is trying to go to -1
        // aka a crash
		if (dx == -1 && x == 0)
		{
			crash_x = 0x01;
    1182:	31 e0       	ldi	r19, 0x01	; 1
    1184:	3e ab       	std	Y+54, r19	; 0x36
    1186:	03 c0       	rjmp	.+6      	; 0x118e <boingboing+0x170>
	dy = 1;
	dz = 1;
	
	while(iterations)
	{
		crash_x = 0;
    1188:	1e aa       	std	Y+54, r1	; 0x36
    118a:	01 c0       	rjmp	.+2      	; 0x118e <boingboing+0x170>
    118c:	1e aa       	std	Y+54, r1	; 0x36
				dx = 0;
			}
		}
		
        // y axis 0 crash
		if (dy == -1 && y == 0)
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	48 16       	cp	r4, r24
    1192:	58 06       	cpc	r5, r24
    1194:	91 f4       	brne	.+36     	; 0x11ba <boingboing+0x19c>
    1196:	c1 14       	cp	r12, r1
    1198:	d1 04       	cpc	r13, r1
    119a:	89 f4       	brne	.+34     	; 0x11be <boingboing+0x1a0>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    119c:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    11a0:	63 e0       	ldi	r22, 0x03	; 3
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <boingboing+0x194>
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	42 2e       	mov	r4, r18
    11b4:	53 2e       	mov	r5, r19
		}
		
        // y axis 0 crash
		if (dy == -1 && y == 0)
		{
			crash_y = 0x01;
    11b6:	01 e0       	ldi	r16, 0x01	; 1
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <boingboing+0x1a2>
	dz = 1;
	
	while(iterations)
	{
		crash_x = 0;
		crash_y = 0;
    11ba:	00 e0       	ldi	r16, 0x00	; 0
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <boingboing+0x1a2>
    11be:	00 e0       	ldi	r16, 0x00	; 0
				dy = 0;
			}
		}
		
        // z axis 0 crash
		if (dz == -1 && z == 0)
    11c0:	9f ef       	ldi	r25, 0xFF	; 255
    11c2:	69 16       	cp	r6, r25
    11c4:	79 06       	cpc	r7, r25
    11c6:	a1 f4       	brne	.+40     	; 0x11f0 <boingboing+0x1d2>
    11c8:	81 14       	cp	r8, r1
    11ca:	91 04       	cpc	r9, r1
    11cc:	99 f4       	brne	.+38     	; 0x11f4 <boingboing+0x1d6>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    11ce:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    11d2:	63 e0       	ldi	r22, 0x03	; 3
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    11da:	9c 01       	movw	r18, r24
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	21 30       	cpi	r18, 0x01	; 1
    11e2:	31 05       	cpc	r19, r1
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <boingboing+0x1ca>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	68 2e       	mov	r6, r24
    11ea:	79 2e       	mov	r7, r25
		}
		
        // z axis 0 crash
		if (dz == -1 && z == 0)
		{
			crash_z = 0x01;
    11ec:	11 e0       	ldi	r17, 0x01	; 1
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <boingboing+0x1d8>
	
	while(iterations)
	{
		crash_x = 0;
		crash_y = 0;
		crash_z = 0;
    11f0:	10 e0       	ldi	r17, 0x00	; 0
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <boingboing+0x1d8>
    11f4:	10 e0       	ldi	r17, 0x00	; 0
				dz = 0;
			}
		}
	    
        // x axis 7 crash
		if (dx == 1 && x == 7)
    11f6:	e1 e0       	ldi	r30, 0x01	; 1
    11f8:	ae 16       	cp	r10, r30
    11fa:	b1 04       	cpc	r11, r1
    11fc:	a9 f4       	brne	.+42     	; 0x1228 <boingboing+0x20a>
    11fe:	f7 e0       	ldi	r31, 0x07	; 7
    1200:	ef 16       	cp	r14, r31
    1202:	f1 04       	cpc	r15, r1
    1204:	89 f4       	brne	.+34     	; 0x1228 <boingboing+0x20a>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    1206:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    120a:	63 e0       	ldi	r22, 0x03	; 3
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    1212:	aa 24       	eor	r10, r10
    1214:	a3 94       	inc	r10
    1216:	b1 2c       	mov	r11, r1
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	09 f0       	breq	.+2      	; 0x121e <boingboing+0x200>
    121c:	a1 2c       	mov	r10, r1
    121e:	b1 94       	neg	r11
    1220:	a1 94       	neg	r10
    1222:	b1 08       	sbc	r11, r1
		}
	    
        // x axis 7 crash
		if (dx == 1 && x == 7)
		{
			crash_x = 0x01;
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	2e ab       	std	Y+54, r18	; 0x36
				dx = 0;
			}
		}
		
        // y axis 7 crash
		if (dy == 1 && y == 7)
    1228:	31 e0       	ldi	r19, 0x01	; 1
    122a:	43 16       	cp	r4, r19
    122c:	51 04       	cpc	r5, r1
    122e:	a1 f4       	brne	.+40     	; 0x1258 <boingboing+0x23a>
    1230:	87 e0       	ldi	r24, 0x07	; 7
    1232:	c8 16       	cp	r12, r24
    1234:	d1 04       	cpc	r13, r1
    1236:	81 f4       	brne	.+32     	; 0x1258 <boingboing+0x23a>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    1238:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    123c:	63 e0       	ldi	r22, 0x03	; 3
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    1244:	44 24       	eor	r4, r4
    1246:	43 94       	inc	r4
    1248:	51 2c       	mov	r5, r1
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	09 f0       	breq	.+2      	; 0x1250 <boingboing+0x232>
    124e:	41 2c       	mov	r4, r1
    1250:	51 94       	neg	r5
    1252:	41 94       	neg	r4
    1254:	51 08       	sbc	r5, r1
		}
		
        // y axis 7 crash
		if (dy == 1 && y == 7)
		{
			crash_y = 0x01;
    1256:	01 e0       	ldi	r16, 0x01	; 1
				dy = 0;
			}
		}
		
        // z azis 7 crash
		if (dz == 1 && z == 7)
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	69 16       	cp	r6, r25
    125c:	71 04       	cpc	r7, r1
    125e:	a1 f4       	brne	.+40     	; 0x1288 <boingboing+0x26a>
    1260:	e7 e0       	ldi	r30, 0x07	; 7
    1262:	8e 16       	cp	r8, r30
    1264:	91 04       	cpc	r9, r1
    1266:	81 f4       	brne	.+32     	; 0x1288 <boingboing+0x26a>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    1268:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    126c:	63 e0       	ldi	r22, 0x03	; 3
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    1274:	66 24       	eor	r6, r6
    1276:	63 94       	inc	r6
    1278:	71 2c       	mov	r7, r1
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	09 f0       	breq	.+2      	; 0x1280 <boingboing+0x262>
    127e:	61 2c       	mov	r6, r1
    1280:	71 94       	neg	r7
    1282:	61 94       	neg	r6
    1284:	71 08       	sbc	r7, r1
		}
		
        // z azis 7 crash
		if (dz == 1 && z == 7)
		{
			crash_z = 0x01;
    1286:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		// mode bit 0 sets crash action enable
		if (mode | 0x01)
		{
			if (crash_x)
    1288:	fe a9       	ldd	r31, Y+54	; 0x36
    128a:	ff 23       	and	r31, r31
    128c:	f1 f1       	breq	.+124    	; 0x130a <boingboing+0x2ec>
			{
				if (dy == 0)
    128e:	41 14       	cp	r4, r1
    1290:	51 04       	cpc	r5, r1
    1292:	e1 f4       	brne	.+56     	; 0x12cc <boingboing+0x2ae>
				{
					if (y == 7)
    1294:	27 e0       	ldi	r18, 0x07	; 7
    1296:	c2 16       	cp	r12, r18
    1298:	d1 04       	cpc	r13, r1
    129a:	59 f0       	breq	.+22     	; 0x12b2 <boingboing+0x294>
					{
						dy = -1;
					} else if (y == 0)
    129c:	c1 14       	cp	r12, r1
    129e:	d1 04       	cpc	r13, r1
    12a0:	69 f0       	breq	.+26     	; 0x12bc <boingboing+0x29e>
					{
						dy = +1;
					} else
					{
						if (rand()%2 == 0)
    12a2:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    12a6:	80 ff       	sbrs	r24, 0
    12a8:	0d c0       	rjmp	.+26     	; 0x12c4 <boingboing+0x2a6>
						{
							dy = -1;
						} else
						{
							dy = 1;
    12aa:	44 24       	eor	r4, r4
    12ac:	43 94       	inc	r4
    12ae:	51 2c       	mov	r5, r1
    12b0:	0d c0       	rjmp	.+26     	; 0x12cc <boingboing+0x2ae>
			{
				if (dy == 0)
				{
					if (y == 7)
					{
						dy = -1;
    12b2:	44 24       	eor	r4, r4
    12b4:	4a 94       	dec	r4
    12b6:	55 24       	eor	r5, r5
    12b8:	5a 94       	dec	r5
    12ba:	08 c0       	rjmp	.+16     	; 0x12cc <boingboing+0x2ae>
					} else if (y == 0)
					{
						dy = +1;
    12bc:	44 24       	eor	r4, r4
    12be:	43 94       	inc	r4
    12c0:	51 2c       	mov	r5, r1
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <boingboing+0x2ae>
					} else
					{
						if (rand()%2 == 0)
						{
							dy = -1;
    12c4:	44 24       	eor	r4, r4
    12c6:	4a 94       	dec	r4
    12c8:	55 24       	eor	r5, r5
    12ca:	5a 94       	dec	r5
						{
							dy = 1;
						}
					}
				}
				if (dz == 0)
    12cc:	61 14       	cp	r6, r1
    12ce:	71 04       	cpc	r7, r1
    12d0:	e1 f4       	brne	.+56     	; 0x130a <boingboing+0x2ec>
				{
					if (z == 7)
    12d2:	37 e0       	ldi	r19, 0x07	; 7
    12d4:	83 16       	cp	r8, r19
    12d6:	91 04       	cpc	r9, r1
    12d8:	59 f0       	breq	.+22     	; 0x12f0 <boingboing+0x2d2>
					{
						dz = -1;
					} else if (z == 0)
    12da:	81 14       	cp	r8, r1
    12dc:	91 04       	cpc	r9, r1
    12de:	69 f0       	breq	.+26     	; 0x12fa <boingboing+0x2dc>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    12e0:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    12e4:	80 ff       	sbrs	r24, 0
    12e6:	0d c0       	rjmp	.+26     	; 0x1302 <boingboing+0x2e4>
						{
							dz = -1;
						} else
						{
							dz = 1;
    12e8:	66 24       	eor	r6, r6
    12ea:	63 94       	inc	r6
    12ec:	71 2c       	mov	r7, r1
    12ee:	0d c0       	rjmp	.+26     	; 0x130a <boingboing+0x2ec>
				}
				if (dz == 0)
				{
					if (z == 7)
					{
						dz = -1;
    12f0:	66 24       	eor	r6, r6
    12f2:	6a 94       	dec	r6
    12f4:	77 24       	eor	r7, r7
    12f6:	7a 94       	dec	r7
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <boingboing+0x2ec>
					} else if (z == 0)
					{
						dz = 1;
    12fa:	66 24       	eor	r6, r6
    12fc:	63 94       	inc	r6
    12fe:	71 2c       	mov	r7, r1
    1300:	04 c0       	rjmp	.+8      	; 0x130a <boingboing+0x2ec>
					} else
					{
						if (rand()%2 == 0)
						{
							dz = -1;
    1302:	66 24       	eor	r6, r6
    1304:	6a 94       	dec	r6
    1306:	77 24       	eor	r7, r7
    1308:	7a 94       	dec	r7
						}
					}	
				}
			}
			
			if (crash_y)
    130a:	00 23       	and	r16, r16
    130c:	f1 f1       	breq	.+124    	; 0x138a <boingboing+0x36c>
			{
				if (dx == 0)
    130e:	a1 14       	cp	r10, r1
    1310:	b1 04       	cpc	r11, r1
    1312:	e1 f4       	brne	.+56     	; 0x134c <boingboing+0x32e>
				{
					if (x == 7)
    1314:	87 e0       	ldi	r24, 0x07	; 7
    1316:	e8 16       	cp	r14, r24
    1318:	f1 04       	cpc	r15, r1
    131a:	59 f0       	breq	.+22     	; 0x1332 <boingboing+0x314>
					{
						dx = -1;
					} else if (x == 0)
    131c:	e1 14       	cp	r14, r1
    131e:	f1 04       	cpc	r15, r1
    1320:	69 f0       	breq	.+26     	; 0x133c <boingboing+0x31e>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    1322:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1326:	80 ff       	sbrs	r24, 0
    1328:	0d c0       	rjmp	.+26     	; 0x1344 <boingboing+0x326>
						{
							dx = -1;
						} else
						{
							dx = 1;
    132a:	aa 24       	eor	r10, r10
    132c:	a3 94       	inc	r10
    132e:	b1 2c       	mov	r11, r1
    1330:	0d c0       	rjmp	.+26     	; 0x134c <boingboing+0x32e>
			{
				if (dx == 0)
				{
					if (x == 7)
					{
						dx = -1;
    1332:	aa 24       	eor	r10, r10
    1334:	aa 94       	dec	r10
    1336:	bb 24       	eor	r11, r11
    1338:	ba 94       	dec	r11
    133a:	08 c0       	rjmp	.+16     	; 0x134c <boingboing+0x32e>
					} else if (x == 0)
					{
						dx = 1;
    133c:	aa 24       	eor	r10, r10
    133e:	a3 94       	inc	r10
    1340:	b1 2c       	mov	r11, r1
    1342:	04 c0       	rjmp	.+8      	; 0x134c <boingboing+0x32e>
					} else
					{
						if (rand()%2 == 0)
						{
							dx = -1;
    1344:	aa 24       	eor	r10, r10
    1346:	aa 94       	dec	r10
    1348:	bb 24       	eor	r11, r11
    134a:	ba 94       	dec	r11
						{
							dx = 1;
						}
					}
				}
				if (dz == 0)
    134c:	61 14       	cp	r6, r1
    134e:	71 04       	cpc	r7, r1
    1350:	e1 f4       	brne	.+56     	; 0x138a <boingboing+0x36c>
				{
					if (z == 3)
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	89 16       	cp	r8, r25
    1356:	91 04       	cpc	r9, r1
    1358:	59 f0       	breq	.+22     	; 0x1370 <boingboing+0x352>
					{
						dz = -1;
					} else if (z == 0)
    135a:	81 14       	cp	r8, r1
    135c:	91 04       	cpc	r9, r1
    135e:	69 f0       	breq	.+26     	; 0x137a <boingboing+0x35c>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    1360:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1364:	80 ff       	sbrs	r24, 0
    1366:	0d c0       	rjmp	.+26     	; 0x1382 <boingboing+0x364>
						{
							dz = -1;
						} else
						{
							dz = 1;
    1368:	66 24       	eor	r6, r6
    136a:	63 94       	inc	r6
    136c:	71 2c       	mov	r7, r1
    136e:	0d c0       	rjmp	.+26     	; 0x138a <boingboing+0x36c>
				}
				if (dz == 0)
				{
					if (z == 3)
					{
						dz = -1;
    1370:	66 24       	eor	r6, r6
    1372:	6a 94       	dec	r6
    1374:	77 24       	eor	r7, r7
    1376:	7a 94       	dec	r7
    1378:	08 c0       	rjmp	.+16     	; 0x138a <boingboing+0x36c>
					} else if (z == 0)
					{
						dz = 1;
    137a:	66 24       	eor	r6, r6
    137c:	63 94       	inc	r6
    137e:	71 2c       	mov	r7, r1
    1380:	04 c0       	rjmp	.+8      	; 0x138a <boingboing+0x36c>
					} else
					{
						if (rand()%2 == 0)
						{
							dz = -1;
    1382:	66 24       	eor	r6, r6
    1384:	6a 94       	dec	r6
    1386:	77 24       	eor	r7, r7
    1388:	7a 94       	dec	r7
						}
					}	
				}
			}
			
			if (crash_z)
    138a:	11 23       	and	r17, r17
    138c:	89 f1       	breq	.+98     	; 0x13f0 <boingboing+0x3d2>
			{
				if (dy == 0)
    138e:	41 14       	cp	r4, r1
    1390:	51 04       	cpc	r5, r1
    1392:	e1 f4       	brne	.+56     	; 0x13cc <boingboing+0x3ae>
				{
					if (y == 7)
    1394:	e7 e0       	ldi	r30, 0x07	; 7
    1396:	ce 16       	cp	r12, r30
    1398:	d1 04       	cpc	r13, r1
    139a:	59 f0       	breq	.+22     	; 0x13b2 <boingboing+0x394>
					{
						dy = -1;
					} else if (y == 0)
    139c:	c1 14       	cp	r12, r1
    139e:	d1 04       	cpc	r13, r1
    13a0:	69 f0       	breq	.+26     	; 0x13bc <boingboing+0x39e>
					{
						dy = 1;
					} else
					{
						if (rand()%2 == 0)
    13a2:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    13a6:	80 ff       	sbrs	r24, 0
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <boingboing+0x3a6>
						{
							dy = -1;
						} else
						{
							dy = 1;
    13aa:	44 24       	eor	r4, r4
    13ac:	43 94       	inc	r4
    13ae:	51 2c       	mov	r5, r1
    13b0:	0d c0       	rjmp	.+26     	; 0x13cc <boingboing+0x3ae>
			{
				if (dy == 0)
				{
					if (y == 7)
					{
						dy = -1;
    13b2:	44 24       	eor	r4, r4
    13b4:	4a 94       	dec	r4
    13b6:	55 24       	eor	r5, r5
    13b8:	5a 94       	dec	r5
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <boingboing+0x3ae>
					} else if (y == 0)
					{
						dy = 1;
    13bc:	44 24       	eor	r4, r4
    13be:	43 94       	inc	r4
    13c0:	51 2c       	mov	r5, r1
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <boingboing+0x3ae>
					} else
					{
						if (rand()%2 == 0)
						{
							dy = -1;
    13c4:	44 24       	eor	r4, r4
    13c6:	4a 94       	dec	r4
    13c8:	55 24       	eor	r5, r5
    13ca:	5a 94       	dec	r5
						{
							dy = 1;
						}
					}	
				}
				if (dx == 0)
    13cc:	a1 14       	cp	r10, r1
    13ce:	b1 04       	cpc	r11, r1
    13d0:	79 f4       	brne	.+30     	; 0x13f0 <boingboing+0x3d2>
				{
					if (x == 7)
    13d2:	f7 e0       	ldi	r31, 0x07	; 7
    13d4:	ef 16       	cp	r14, r31
    13d6:	f1 04       	cpc	r15, r1
    13d8:	89 f1       	breq	.+98     	; 0x143c <boingboing+0x41e>
					{
						dx = -1;
					} else if (x == 0)
    13da:	e1 14       	cp	r14, r1
    13dc:	f1 04       	cpc	r15, r1
    13de:	61 f0       	breq	.+24     	; 0x13f8 <boingboing+0x3da>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    13e0:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    13e4:	80 ff       	sbrs	r24, 0
    13e6:	09 c1       	rjmp	.+530    	; 0x15fa <boingboing+0x5dc>
						{
							dx = -1;
						} else
						{
							dx = 1;
    13e8:	aa 24       	eor	r10, r10
    13ea:	a3 94       	inc	r10
    13ec:	b1 2c       	mov	r11, r1
    13ee:	61 c0       	rjmp	.+194    	; 0x14b2 <boingboing+0x494>
		}
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
    13f0:	e1 14       	cp	r14, r1
    13f2:	f1 04       	cpc	r15, r1
    13f4:	f1 f4       	brne	.+60     	; 0x1432 <boingboing+0x414>
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <boingboing+0x3e0>
					if (x == 7)
					{
						dx = -1;
					} else if (x == 0)
					{
						dx = 1;
    13f8:	aa 24       	eor	r10, r10
    13fa:	a3 94       	inc	r10
    13fc:	b1 2c       	mov	r11, r1
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
				(x == 0 && y == 0 && z == 0) ||
    13fe:	c1 14       	cp	r12, r1
    1400:	d1 04       	cpc	r13, r1
    1402:	49 f4       	brne	.+18     	; 0x1416 <boingboing+0x3f8>
    1404:	81 14       	cp	r8, r1
    1406:	91 04       	cpc	r9, r1
    1408:	a9 f1       	breq	.+106    	; 0x1474 <boingboing+0x456>
    140a:	27 e0       	ldi	r18, 0x07	; 7
    140c:	82 16       	cp	r8, r18
    140e:	91 04       	cpc	r9, r1
    1410:	09 f0       	breq	.+2      	; 0x1414 <boingboing+0x3f6>
    1412:	fe c0       	rjmp	.+508    	; 0x1610 <boingboing+0x5f2>
    1414:	2f c0       	rjmp	.+94     	; 0x1474 <boingboing+0x456>
				(x == 0 && y == 0 && z == 7) ||
				(x == 0 && y == 7 && z == 0) ||
    1416:	37 e0       	ldi	r19, 0x07	; 7
    1418:	c3 16       	cp	r12, r19
    141a:	d1 04       	cpc	r13, r1
    141c:	09 f0       	breq	.+2      	; 0x1420 <boingboing+0x402>
    141e:	fd c0       	rjmp	.+506    	; 0x161a <boingboing+0x5fc>
    1420:	81 14       	cp	r8, r1
    1422:	91 04       	cpc	r9, r1
    1424:	39 f1       	breq	.+78     	; 0x1474 <boingboing+0x456>
				(x == 0 && y == 7 && z == 7) ||
    1426:	87 e0       	ldi	r24, 0x07	; 7
    1428:	88 16       	cp	r8, r24
    142a:	91 04       	cpc	r9, r1
    142c:	09 f0       	breq	.+2      	; 0x1430 <boingboing+0x412>
    142e:	f5 c0       	rjmp	.+490    	; 0x161a <boingboing+0x5fc>
    1430:	21 c0       	rjmp	.+66     	; 0x1474 <boingboing+0x456>
    1432:	97 e0       	ldi	r25, 0x07	; 7
    1434:	e9 16       	cp	r14, r25
    1436:	f1 04       	cpc	r15, r1
    1438:	e1 f5       	brne	.+120    	; 0x14b2 <boingboing+0x494>
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <boingboing+0x426>
				}
				if (dx == 0)
				{
					if (x == 7)
					{
						dx = -1;
    143c:	aa 24       	eor	r10, r10
    143e:	aa 94       	dec	r10
    1440:	bb 24       	eor	r11, r11
    1442:	ba 94       	dec	r11
			if (	// We are in one of 8 corner positions
				(x == 0 && y == 0 && z == 0) ||
				(x == 0 && y == 0 && z == 7) ||
				(x == 0 && y == 7 && z == 0) ||
				(x == 0 && y == 7 && z == 7) ||
				(x == 7 && y == 0 && z == 0) ||
    1444:	c1 14       	cp	r12, r1
    1446:	d1 04       	cpc	r13, r1
    1448:	49 f4       	brne	.+18     	; 0x145c <boingboing+0x43e>
    144a:	81 14       	cp	r8, r1
    144c:	91 04       	cpc	r9, r1
    144e:	91 f0       	breq	.+36     	; 0x1474 <boingboing+0x456>
				(x == 7 && y == 0 && z == 7) ||
    1450:	e7 e0       	ldi	r30, 0x07	; 7
    1452:	8e 16       	cp	r8, r30
    1454:	91 04       	cpc	r9, r1
    1456:	09 f0       	breq	.+2      	; 0x145a <boingboing+0x43c>
    1458:	db c0       	rjmp	.+438    	; 0x1610 <boingboing+0x5f2>
    145a:	0c c0       	rjmp	.+24     	; 0x1474 <boingboing+0x456>
				(x == 7 && y == 7 && z == 0) ||
    145c:	f7 e0       	ldi	r31, 0x07	; 7
    145e:	cf 16       	cp	r12, r31
    1460:	d1 04       	cpc	r13, r1
    1462:	09 f0       	breq	.+2      	; 0x1466 <boingboing+0x448>
    1464:	da c0       	rjmp	.+436    	; 0x161a <boingboing+0x5fc>
    1466:	81 14       	cp	r8, r1
    1468:	91 04       	cpc	r9, r1
    146a:	21 f0       	breq	.+8      	; 0x1474 <boingboing+0x456>
				(x == 7 && y == 7 && z == 7)
    146c:	27 e0       	ldi	r18, 0x07	; 7
    146e:	82 16       	cp	r8, r18
    1470:	91 04       	cpc	r9, r1
    1472:	49 f5       	brne	.+82     	; 0x14c6 <boingboing+0x4a8>
				// and the exact opposite corner
				// We don't want that!
			
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
    1474:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
				if (lol == 0)
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	41 f0       	breq	.+16     	; 0x1494 <boingboing+0x476>
					dx = 0;
				
				if (lol == 1)
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	41 f0       	breq	.+16     	; 0x149a <boingboing+0x47c>
					dy = 0;
					
				if (lol == 2)
    148a:	02 97       	sbiw	r24, 0x02	; 2
    148c:	41 f4       	brne	.+16     	; 0x149e <boingboing+0x480>
					dz = 0;
    148e:	61 2c       	mov	r6, r1
    1490:	71 2c       	mov	r7, r1
    1492:	05 c0       	rjmp	.+10     	; 0x149e <boingboing+0x480>
			
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
				if (lol == 0)
					dx = 0;
    1494:	a1 2c       	mov	r10, r1
    1496:	b1 2c       	mov	r11, r1
    1498:	02 c0       	rjmp	.+4      	; 0x149e <boingboing+0x480>
				
				if (lol == 1)
					dy = 0;
    149a:	41 2c       	mov	r4, r1
    149c:	51 2c       	mov	r5, r1
					dz = 0;
			}
		}

        // one last sanity check
        if (x == 0 && dx == -1)
    149e:	e1 14       	cp	r14, r1
    14a0:	f1 04       	cpc	r15, r1
    14a2:	39 f4       	brne	.+14     	; 0x14b2 <boingboing+0x494>
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	a3 16       	cp	r10, r19
    14a8:	b3 06       	cpc	r11, r19
    14aa:	19 f4       	brne	.+6      	; 0x14b2 <boingboing+0x494>
            dx = 1;
    14ac:	aa 24       	eor	r10, r10
    14ae:	a3 94       	inc	r10
    14b0:	b1 2c       	mov	r11, r1
	
        if (y == 0 && dy == -1)
    14b2:	c1 14       	cp	r12, r1
    14b4:	d1 04       	cpc	r13, r1
    14b6:	39 f4       	brne	.+14     	; 0x14c6 <boingboing+0x4a8>
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	48 16       	cp	r4, r24
    14bc:	58 06       	cpc	r5, r24
    14be:	19 f4       	brne	.+6      	; 0x14c6 <boingboing+0x4a8>
            dy = 1;
    14c0:	44 24       	eor	r4, r4
    14c2:	43 94       	inc	r4
    14c4:	51 2c       	mov	r5, r1
	
        if (z == 0 && dz == -1)
    14c6:	81 14       	cp	r8, r1
    14c8:	91 04       	cpc	r9, r1
    14ca:	39 f4       	brne	.+14     	; 0x14da <boingboing+0x4bc>
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	69 16       	cp	r6, r25
    14d0:	79 06       	cpc	r7, r25
    14d2:	19 f4       	brne	.+6      	; 0x14da <boingboing+0x4bc>
            dz = 1;
    14d4:	66 24       	eor	r6, r6
    14d6:	63 94       	inc	r6
    14d8:	71 2c       	mov	r7, r1
	
        if (x == 7 && dx == 1)
    14da:	e7 e0       	ldi	r30, 0x07	; 7
    14dc:	ee 16       	cp	r14, r30
    14de:	f1 04       	cpc	r15, r1
    14e0:	41 f4       	brne	.+16     	; 0x14f2 <boingboing+0x4d4>
    14e2:	f1 e0       	ldi	r31, 0x01	; 1
    14e4:	af 16       	cp	r10, r31
    14e6:	b1 04       	cpc	r11, r1
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <boingboing+0x4d4>
            dx = -1;
    14ea:	aa 24       	eor	r10, r10
    14ec:	aa 94       	dec	r10
    14ee:	bb 24       	eor	r11, r11
    14f0:	ba 94       	dec	r11
	
        if (y == 7 && dy == 1)
    14f2:	27 e0       	ldi	r18, 0x07	; 7
    14f4:	c2 16       	cp	r12, r18
    14f6:	d1 04       	cpc	r13, r1
    14f8:	41 f4       	brne	.+16     	; 0x150a <boingboing+0x4ec>
    14fa:	31 e0       	ldi	r19, 0x01	; 1
    14fc:	43 16       	cp	r4, r19
    14fe:	51 04       	cpc	r5, r1
    1500:	21 f4       	brne	.+8      	; 0x150a <boingboing+0x4ec>
            dy = -1;
    1502:	44 24       	eor	r4, r4
    1504:	4a 94       	dec	r4
    1506:	55 24       	eor	r5, r5
    1508:	5a 94       	dec	r5
	
        if (z == 7 && dz == 1)
    150a:	87 e0       	ldi	r24, 0x07	; 7
    150c:	88 16       	cp	r8, r24
    150e:	91 04       	cpc	r9, r1
    1510:	41 f4       	brne	.+16     	; 0x1522 <boingboing+0x504>
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	69 16       	cp	r6, r25
    1516:	71 04       	cpc	r7, r1
    1518:	21 f4       	brne	.+8      	; 0x1522 <boingboing+0x504>
            dz = -1;
    151a:	66 24       	eor	r6, r6
    151c:	6a 94       	dec	r6
    151e:	77 24       	eor	r7, r7
    1520:	7a 94       	dec	r7
	
	
		// Finally, move the voxel.
		x = x + dx;
    1522:	ea 0c       	add	r14, r10
    1524:	fb 1c       	adc	r15, r11
		y = y + dy;
    1526:	c4 0c       	add	r12, r4
    1528:	d5 1c       	adc	r13, r5
		z = z + dz;
    152a:	86 0c       	add	r8, r6
    152c:	97 1c       	adc	r9, r7
		
		if (drawmode == 0x01) // show one voxel at time
    152e:	ed a9       	ldd	r30, Y+53	; 0x35
    1530:	e1 30       	cpi	r30, 0x01	; 1
    1532:	79 f4       	brne	.+30     	; 0x1552 <boingboing+0x534>
		{
			setvoxel(x,y,z);
    1534:	a4 01       	movw	r20, r8
    1536:	b6 01       	movw	r22, r12
    1538:	c7 01       	movw	r24, r14
    153a:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
			delay_ms(delay);
    153e:	89 ad       	ldd	r24, Y+57	; 0x39
    1540:	9a ad       	ldd	r25, Y+58	; 0x3a
    1542:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			clrvoxel(x,y,z);	
    1546:	a4 01       	movw	r20, r8
    1548:	b6 01       	movw	r22, r12
    154a:	c7 01       	movw	r24, r14
    154c:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
    1550:	4a c0       	rjmp	.+148    	; 0x15e6 <boingboing+0x5c8>
		} else if (drawmode == 0x02) // flip the voxel in question
    1552:	fd a9       	ldd	r31, Y+53	; 0x35
    1554:	f2 30       	cpi	r31, 0x02	; 2
    1556:	09 f0       	breq	.+2      	; 0x155a <boingboing+0x53c>
    1558:	55 c0       	rjmp	.+170    	; 0x1604 <boingboing+0x5e6>
		{
			flpvoxel(x,y,z);
    155a:	a4 01       	movw	r20, r8
    155c:	b6 01       	movw	r22, r12
    155e:	c7 01       	movw	r24, r14
    1560:	0e 94 06 01 	call	0x20c	; 0x20c <flpvoxel>
			delay_ms(delay);
    1564:	89 ad       	ldd	r24, Y+57	; 0x39
    1566:	9a ad       	ldd	r25, Y+58	; 0x3a
    1568:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
    156c:	3c c0       	rjmp	.+120    	; 0x15e6 <boingboing+0x5c8>
		} if (drawmode == 0x03) // draw a snake
		{
			for (i=7;i>=0;i--)
			{
				snake[i][0] = snake[i-1][0];
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	97 83       	std	Z+7, r25	; 0x07
    1574:	86 83       	std	Z+6, r24	; 0x06
				snake[i][1] = snake[i-1][1];
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	91 87       	std	Z+9, r25	; 0x09
    157c:	80 87       	std	Z+8, r24	; 0x08
				snake[i][2] = snake[i-1][2];
    157e:	84 81       	ldd	r24, Z+4	; 0x04
    1580:	95 81       	ldd	r25, Z+5	; 0x05
    1582:	93 87       	std	Z+11, r25	; 0x0b
    1584:	82 87       	std	Z+10, r24	; 0x0a
    1586:	36 97       	sbiw	r30, 0x06	; 6
		{
			flpvoxel(x,y,z);
			delay_ms(delay);
		} if (drawmode == 0x03) // draw a snake
		{
			for (i=7;i>=0;i--)
    1588:	29 a9       	ldd	r18, Y+49	; 0x31
    158a:	3a a9       	ldd	r19, Y+50	; 0x32
    158c:	e2 17       	cp	r30, r18
    158e:	f3 07       	cpc	r31, r19
    1590:	71 f7       	brne	.-36     	; 0x156e <boingboing+0x550>
			{
				snake[i][0] = snake[i-1][0];
				snake[i][1] = snake[i-1][1];
				snake[i][2] = snake[i-1][2];
			}
			snake[0][0] = x;
    1592:	fa 82       	std	Y+2, r15	; 0x02
    1594:	e9 82       	std	Y+1, r14	; 0x01
			snake[0][1] = y;
    1596:	dc 82       	std	Y+4, r13	; 0x04
    1598:	cb 82       	std	Y+3, r12	; 0x03
			snake[0][2] = z;
    159a:	9e 82       	std	Y+6, r9	; 0x06
    159c:	8d 82       	std	Y+5, r8	; 0x05
    159e:	0f a9       	ldd	r16, Y+55	; 0x37
    15a0:	18 ad       	ldd	r17, Y+56	; 0x38
				
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
    15a2:	f8 01       	movw	r30, r16
    15a4:	44 81       	ldd	r20, Z+4	; 0x04
    15a6:	55 81       	ldd	r21, Z+5	; 0x05
    15a8:	62 81       	ldd	r22, Z+2	; 0x02
    15aa:	73 81       	ldd	r23, Z+3	; 0x03
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    15b4:	0a 5f       	subi	r16, 0xFA	; 250
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			snake[0][0] = x;
			snake[0][1] = y;
			snake[0][2] = z;
				
			for (i=0;i<8;i++)
    15b8:	02 15       	cp	r16, r2
    15ba:	13 05       	cpc	r17, r3
    15bc:	91 f7       	brne	.-28     	; 0x15a2 <boingboing+0x584>
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
    15be:	89 ad       	ldd	r24, Y+57	; 0x39
    15c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    15c2:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
    15c6:	0f a9       	ldd	r16, Y+55	; 0x37
    15c8:	18 ad       	ldd	r17, Y+56	; 0x38
			for (i=0;i<8;i++)
			{
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
    15ca:	f8 01       	movw	r30, r16
    15cc:	44 81       	ldd	r20, Z+4	; 0x04
    15ce:	55 81       	ldd	r21, Z+5	; 0x05
    15d0:	62 81       	ldd	r22, Z+2	; 0x02
    15d2:	73 81       	ldd	r23, Z+3	; 0x03
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
    15dc:	0a 5f       	subi	r16, 0xFA	; 250
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
			for (i=0;i<8;i++)
    15e0:	02 15       	cp	r16, r2
    15e2:	13 05       	cpc	r17, r3
    15e4:	91 f7       	brne	.-28     	; 0x15ca <boingboing+0x5ac>
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
		}
		
	
		iterations--;
    15e6:	2b a9       	ldd	r18, Y+51	; 0x33
    15e8:	3c a9       	ldd	r19, Y+52	; 0x34
    15ea:	21 50       	subi	r18, 0x01	; 1
    15ec:	31 09       	sbc	r19, r1
    15ee:	3c ab       	std	Y+52, r19	; 0x34
    15f0:	2b ab       	std	Y+51, r18	; 0x33
	
	dx = 1;
	dy = 1;
	dz = 1;
	
	while(iterations)
    15f2:	23 2b       	or	r18, r19
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <boingboing+0x5da>
    15f6:	7c cd       	rjmp	.-1288   	; 0x10f0 <boingboing+0xd2>
    15f8:	15 c0       	rjmp	.+42     	; 0x1624 <boingboing+0x606>
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
						{
							dx = -1;
    15fa:	aa 24       	eor	r10, r10
    15fc:	aa 94       	dec	r10
    15fe:	bb 24       	eor	r11, r11
    1600:	ba 94       	dec	r11
    1602:	57 cf       	rjmp	.-338    	; 0x14b2 <boingboing+0x494>
			clrvoxel(x,y,z);	
		} else if (drawmode == 0x02) // flip the voxel in question
		{
			flpvoxel(x,y,z);
			delay_ms(delay);
		} if (drawmode == 0x03) // draw a snake
    1604:	3d a9       	ldd	r19, Y+53	; 0x35
    1606:	33 30       	cpi	r19, 0x03	; 3
    1608:	71 f7       	brne	.-36     	; 0x15e6 <boingboing+0x5c8>
    160a:	fe 01       	movw	r30, r28
    160c:	b5 96       	adiw	r30, 0x25	; 37
    160e:	af cf       	rjmp	.-162    	; 0x156e <boingboing+0x550>
					dz = 0;
			}
		}

        // one last sanity check
        if (x == 0 && dx == -1)
    1610:	e1 14       	cp	r14, r1
    1612:	f1 04       	cpc	r15, r1
    1614:	09 f4       	brne	.+2      	; 0x1618 <boingboing+0x5fa>
    1616:	46 cf       	rjmp	.-372    	; 0x14a4 <boingboing+0x486>
    1618:	4f cf       	rjmp	.-354    	; 0x14b8 <boingboing+0x49a>
    161a:	e1 14       	cp	r14, r1
    161c:	f1 04       	cpc	r15, r1
    161e:	09 f4       	brne	.+2      	; 0x1622 <boingboing+0x604>
    1620:	41 cf       	rjmp	.-382    	; 0x14a4 <boingboing+0x486>
    1622:	51 cf       	rjmp	.-350    	; 0x14c6 <boingboing+0x4a8>
		}
		
	
		iterations--;
	}
}
    1624:	ea 96       	adiw	r28, 0x3a	; 58
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	9f 90       	pop	r9
    1646:	8f 90       	pop	r8
    1648:	7f 90       	pop	r7
    164a:	6f 90       	pop	r6
    164c:	5f 90       	pop	r5
    164e:	4f 90       	pop	r4
    1650:	3f 90       	pop	r3
    1652:	2f 90       	pop	r2
    1654:	08 95       	ret

00001656 <effect_random_filler>:

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    1656:	8f 92       	push	r8
    1658:	9f 92       	push	r9
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	7c 01       	movw	r14, r24
    1670:	eb 01       	movw	r28, r22
	int x,y,z;
	int loop = 0;
	
	
	if (state == 1)
    1672:	61 30       	cpi	r22, 0x01	; 1
    1674:	71 05       	cpc	r23, r1
    1676:	21 f4       	brne	.+8      	; 0x1680 <effect_random_filler+0x2a>
	{
		fill(0x00);
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
    167e:	55 c0       	rjmp	.+170    	; 0x172a <effect_random_filler+0xd4>
	} else
	{
		fill(0xff);
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
    1686:	51 c0       	rjmp	.+162    	; 0x172a <effect_random_filler+0xd4>
	}
	
	while (loop<511)
	{
		x = rand()%8;
    1688:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    168c:	87 70       	andi	r24, 0x07	; 7
    168e:	90 78       	andi	r25, 0x80	; 128
    1690:	99 23       	and	r25, r25
    1692:	24 f4       	brge	.+8      	; 0x169c <effect_random_filler+0x46>
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	88 6f       	ori	r24, 0xF8	; 248
    1698:	9f 6f       	ori	r25, 0xFF	; 255
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	c8 2e       	mov	r12, r24
    169e:	d9 2e       	mov	r13, r25
		y = rand()%8;
    16a0:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    16a4:	87 70       	andi	r24, 0x07	; 7
    16a6:	90 78       	andi	r25, 0x80	; 128
    16a8:	99 23       	and	r25, r25
    16aa:	24 f4       	brge	.+8      	; 0x16b4 <effect_random_filler+0x5e>
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	88 6f       	ori	r24, 0xF8	; 248
    16b0:	9f 6f       	ori	r25, 0xFF	; 255
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	a8 2e       	mov	r10, r24
    16b6:	b9 2e       	mov	r11, r25
		z = rand()%8;
    16b8:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    16bc:	87 70       	andi	r24, 0x07	; 7
    16be:	90 78       	andi	r25, 0x80	; 128
    16c0:	99 23       	and	r25, r25
    16c2:	24 f4       	brge	.+8      	; 0x16cc <effect_random_filler+0x76>
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	88 6f       	ori	r24, 0xF8	; 248
    16c8:	9f 6f       	ori	r25, 0xFF	; 255
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	88 2e       	mov	r8, r24
    16ce:	99 2e       	mov	r9, r25

		if ((state == 0 && getvoxel(x,y,z) == 0x01) || (state == 1 && getvoxel(x,y,z) == 0x00))
    16d0:	20 97       	sbiw	r28, 0x00	; 0
    16d2:	51 f4       	brne	.+20     	; 0x16e8 <effect_random_filler+0x92>
    16d4:	ac 01       	movw	r20, r24
    16d6:	6a 2d       	mov	r22, r10
    16d8:	7b 2d       	mov	r23, r11
    16da:	8c 2d       	mov	r24, r12
    16dc:	9d 2d       	mov	r25, r13
    16de:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <getvoxel>
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	e1 f4       	brne	.+56     	; 0x171e <effect_random_filler+0xc8>
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <effect_random_filler+0xac>
    16e8:	c1 30       	cpi	r28, 0x01	; 1
    16ea:	d1 05       	cpc	r29, r1
    16ec:	c1 f4       	brne	.+48     	; 0x171e <effect_random_filler+0xc8>
    16ee:	48 2f       	mov	r20, r24
    16f0:	59 2f       	mov	r21, r25
    16f2:	6a 2d       	mov	r22, r10
    16f4:	7b 2d       	mov	r23, r11
    16f6:	8c 2d       	mov	r24, r12
    16f8:	9d 2d       	mov	r25, r13
    16fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <getvoxel>
    16fe:	81 11       	cpse	r24, r1
    1700:	0e c0       	rjmp	.+28     	; 0x171e <effect_random_filler+0xc8>
		{
			altervoxel(x,y,z,state);
    1702:	9e 01       	movw	r18, r28
    1704:	48 2d       	mov	r20, r8
    1706:	59 2d       	mov	r21, r9
    1708:	6a 2d       	mov	r22, r10
    170a:	7b 2d       	mov	r23, r11
    170c:	8c 2d       	mov	r24, r12
    170e:	9d 2d       	mov	r25, r13
    1710:	0e 94 fd 00 	call	0x1fa	; 0x1fa <altervoxel>
			delay_ms(delay);
    1714:	c7 01       	movw	r24, r14
    1716:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			loop++;
    171a:	0f 5f       	subi	r16, 0xFF	; 255
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
	} else
	{
		fill(0xff);
	}
	
	while (loop<511)
    171e:	0f 3f       	cpi	r16, 0xFF	; 255
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	18 07       	cpc	r17, r24
    1724:	0c f4       	brge	.+2      	; 0x1728 <effect_random_filler+0xd2>
    1726:	b0 cf       	rjmp	.-160    	; 0x1688 <effect_random_filler+0x32>
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <effect_random_filler+0xda>
	}
}

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    172a:	00 e0       	ldi	r16, 0x00	; 0
    172c:	10 e0       	ldi	r17, 0x00	; 0
    172e:	ac cf       	rjmp	.-168    	; 0x1688 <effect_random_filler+0x32>
			altervoxel(x,y,z,state);
			delay_ms(delay);
			loop++;
		}	
	}
}
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	bf 90       	pop	r11
    1742:	af 90       	pop	r10
    1744:	9f 90       	pop	r9
    1746:	8f 90       	pop	r8
    1748:	08 95       	ret

0000174a <effect_rain>:


void effect_rain (int iterations)
{
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    1762:	18 16       	cp	r1, r24
    1764:	19 06       	cpc	r1, r25
    1766:	0c f0       	brlt	.+2      	; 0x176a <effect_rain+0x20>
    1768:	46 c0       	rjmp	.+140    	; 0x17f6 <effect_rain+0xac>
    176a:	6c 01       	movw	r12, r24
    176c:	e1 2c       	mov	r14, r1
    176e:	f1 2c       	mov	r15, r1
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
    1770:	81 2c       	mov	r8, r1
    1772:	91 2c       	mov	r9, r1
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
    1774:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1778:	83 70       	andi	r24, 0x03	; 3
    177a:	90 78       	andi	r25, 0x80	; 128
    177c:	99 23       	and	r25, r25
    177e:	24 f4       	brge	.+8      	; 0x1788 <effect_rain+0x3e>
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	8c 6f       	ori	r24, 0xFC	; 252
    1784:	9f 6f       	ori	r25, 0xFF	; 255
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	8c 01       	movw	r16, r24
		
		for (i=0; i < rnd_num;i++)
    178a:	18 16       	cp	r1, r24
    178c:	19 06       	cpc	r1, r25
    178e:	1c f5       	brge	.+70     	; 0x17d6 <effect_rain+0x8c>
    1790:	c8 2d       	mov	r28, r8
    1792:	d9 2d       	mov	r29, r9
		{
			rnd_x = rand()%8;
    1794:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1798:	5c 01       	movw	r10, r24
			rnd_y = rand()%8;
    179a:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    179e:	bc 01       	movw	r22, r24
    17a0:	67 70       	andi	r22, 0x07	; 7
    17a2:	70 78       	andi	r23, 0x80	; 128
    17a4:	77 23       	and	r23, r23
    17a6:	34 f4       	brge	.+12     	; 0x17b4 <effect_rain+0x6a>
    17a8:	61 50       	subi	r22, 0x01	; 1
    17aa:	71 09       	sbc	r23, r1
    17ac:	68 6f       	ori	r22, 0xF8	; 248
    17ae:	7f 6f       	ori	r23, 0xFF	; 255
    17b0:	6f 5f       	subi	r22, 0xFF	; 255
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
		{
			rnd_x = rand()%8;
    17b4:	c5 01       	movw	r24, r10
    17b6:	87 70       	andi	r24, 0x07	; 7
    17b8:	90 78       	andi	r25, 0x80	; 128
    17ba:	99 23       	and	r25, r25
    17bc:	24 f4       	brge	.+8      	; 0x17c6 <effect_rain+0x7c>
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	88 6f       	ori	r24, 0xF8	; 248
    17c2:	9f 6f       	ori	r25, 0xFF	; 255
    17c4:	01 96       	adiw	r24, 0x01	; 1
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
    17c6:	47 e0       	ldi	r20, 0x07	; 7
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
    17ce:	21 96       	adiw	r28, 0x01	; 1
    17d0:	c0 17       	cp	r28, r16
    17d2:	d1 07       	cpc	r29, r17
    17d4:	f9 f6       	brne	.-66     	; 0x1794 <effect_rain+0x4a>
			rnd_x = rand()%8;
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
		}
		
		delay_ms(1000);
    17d6:	88 ee       	ldi	r24, 0xE8	; 232
    17d8:	93 e0       	ldi	r25, 0x03	; 3
    17da:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
		shift(AXIS_Z,-1);
    17de:	6f ef       	ldi	r22, 0xFF	; 255
    17e0:	7f ef       	ldi	r23, 0xFF	; 255
    17e2:	8a e7       	ldi	r24, 0x7A	; 122
    17e4:	0e 94 1a 03 	call	0x634	; 0x634 <shift>
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	e8 1a       	sub	r14, r24
    17ec:	f8 0a       	sbc	r15, r24
    17ee:	ec 14       	cp	r14, r12
    17f0:	fd 04       	cpc	r15, r13
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <effect_rain+0xac>
    17f4:	bf cf       	rjmp	.-130    	; 0x1774 <effect_rain+0x2a>
		}
		
		delay_ms(1000);
		shift(AXIS_Z,-1);
	}
}
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	df 90       	pop	r13
    1804:	cf 90       	pop	r12
    1806:	bf 90       	pop	r11
    1808:	af 90       	pop	r10
    180a:	9f 90       	pop	r9
    180c:	8f 90       	pop	r8
    180e:	08 95       	ret

00001810 <draw_positions_axis>:
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, unsigned char positions[64], int invert)
{
    1810:	7f 92       	push	r7
    1812:	8f 92       	push	r8
    1814:	9f 92       	push	r9
    1816:	af 92       	push	r10
    1818:	bf 92       	push	r11
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	18 2f       	mov	r17, r24
    182c:	d6 2f       	mov	r29, r22
    182e:	c7 2f       	mov	r28, r23
    1830:	6a 01       	movw	r12, r20
	int x, y, p;
	
	fill(0x00);
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
    1838:	ed 2e       	mov	r14, r29
    183a:	fc 2e       	mov	r15, r28
	
	for (x=0; x<8; x++)
    183c:	a1 2c       	mov	r10, r1
    183e:	b1 2c       	mov	r11, r1
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, unsigned char positions[64], int invert)
{
    1840:	71 2c       	mov	r7, r1
    1842:	00 e0       	ldi	r16, 0x00	; 0
	{
		for (y=0; y<8; y++)
		{
			if (invert)
			{
				p = (7-positions[(x*8)+y]);
    1844:	0f 2e       	mov	r0, r31
    1846:	f7 e0       	ldi	r31, 0x07	; 7
    1848:	8f 2e       	mov	r8, r31
    184a:	91 2c       	mov	r9, r1
    184c:	f0 2d       	mov	r31, r0
    184e:	35 c0       	rjmp	.+106    	; 0x18ba <draw_positions_axis+0xaa>
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
		{
			if (invert)
    1850:	c1 14       	cp	r12, r1
    1852:	d1 04       	cpc	r13, r1
    1854:	49 f0       	breq	.+18     	; 0x1868 <draw_positions_axis+0x58>
    1856:	f7 01       	movw	r30, r14
    1858:	ec 0f       	add	r30, r28
    185a:	fd 1f       	adc	r31, r29
			{
				p = (7-positions[(x*8)+y]);
    185c:	80 81       	ld	r24, Z
    185e:	94 01       	movw	r18, r8
    1860:	28 1b       	sub	r18, r24
    1862:	31 09       	sbc	r19, r1
    1864:	c9 01       	movw	r24, r18
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <draw_positions_axis+0x62>
    1868:	f7 01       	movw	r30, r14
    186a:	ec 0f       	add	r30, r28
    186c:	fd 1f       	adc	r31, r29
			} else
			{
				p = positions[(x*8)+y];
    186e:	80 81       	ld	r24, Z
    1870:	90 e0       	ldi	r25, 0x00	; 0
			}
		
			if (axis == AXIS_Z)
    1872:	1a 37       	cpi	r17, 0x7A	; 122
    1874:	31 f4       	brne	.+12     	; 0x1882 <draw_positions_axis+0x72>
				setvoxel(x,y,p);
    1876:	ac 01       	movw	r20, r24
    1878:	be 01       	movw	r22, r28
    187a:	c5 01       	movw	r24, r10
    187c:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    1880:	0e c0       	rjmp	.+28     	; 0x189e <draw_positions_axis+0x8e>
				
			if (axis == AXIS_Y)
    1882:	19 37       	cpi	r17, 0x79	; 121
    1884:	31 f4       	brne	.+12     	; 0x1892 <draw_positions_axis+0x82>
				setvoxel(x,p,y);
    1886:	ae 01       	movw	r20, r28
    1888:	bc 01       	movw	r22, r24
    188a:	c5 01       	movw	r24, r10
    188c:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    1890:	06 c0       	rjmp	.+12     	; 0x189e <draw_positions_axis+0x8e>
				
			if (axis == AXIS_X)
    1892:	18 37       	cpi	r17, 0x78	; 120
    1894:	21 f4       	brne	.+8      	; 0x189e <draw_positions_axis+0x8e>
				setvoxel(p,y,x);
    1896:	a5 01       	movw	r20, r10
    1898:	be 01       	movw	r22, r28
    189a:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
	
	fill(0x00);
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
    189e:	21 96       	adiw	r28, 0x01	; 1
    18a0:	c8 30       	cpi	r28, 0x08	; 8
    18a2:	d1 05       	cpc	r29, r1
    18a4:	a9 f6       	brne	.-86     	; 0x1850 <draw_positions_axis+0x40>
{
	int x, y, p;
	
	fill(0x00);
	
	for (x=0; x<8; x++)
    18a6:	3f ef       	ldi	r19, 0xFF	; 255
    18a8:	a3 1a       	sub	r10, r19
    18aa:	b3 0a       	sbc	r11, r19
    18ac:	88 e0       	ldi	r24, 0x08	; 8
    18ae:	e8 0e       	add	r14, r24
    18b0:	f1 1c       	adc	r15, r1
    18b2:	28 e0       	ldi	r18, 0x08	; 8
    18b4:	a2 16       	cp	r10, r18
    18b6:	b1 04       	cpc	r11, r1
    18b8:	19 f0       	breq	.+6      	; 0x18c0 <draw_positions_axis+0xb0>
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, unsigned char positions[64], int invert)
{
    18ba:	c7 2d       	mov	r28, r7
    18bc:	d0 2f       	mov	r29, r16
    18be:	c8 cf       	rjmp	.-112    	; 0x1850 <draw_positions_axis+0x40>
			if (axis == AXIS_X)
				setvoxel(p,y,x);
		}
	}
	
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	9f 90       	pop	r9
    18d6:	8f 90       	pop	r8
    18d8:	7f 90       	pop	r7
    18da:	08 95       	ret

000018dc <effect_z_updown_move>:
	}

}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	8c 01       	movw	r16, r24
    18ea:	fc 01       	movw	r30, r24
    18ec:	a6 2f       	mov	r26, r22
    18ee:	b7 2f       	mov	r27, r23
    18f0:	bc 01       	movw	r22, r24
    18f2:	60 5c       	subi	r22, 0xC0	; 192
    18f4:	7f 4f       	sbci	r23, 0xFF	; 255
    18f6:	7f 01       	movw	r14, r30
	int px;
	for (px=0; px<64; px++)
	{
		if (positions[px]<destinations[px])
    18f8:	90 81       	ld	r25, Z
    18fa:	9d 01       	movw	r18, r26
    18fc:	4c 91       	ld	r20, X
    18fe:	94 17       	cp	r25, r20
    1900:	10 f4       	brcc	.+4      	; 0x1906 <effect_z_updown_move+0x2a>
		{
			positions[px]++;
    1902:	9f 5f       	subi	r25, 0xFF	; 255
    1904:	90 83       	st	Z, r25
		}
		if (positions[px]>destinations[px])
    1906:	e7 01       	movw	r28, r14
    1908:	98 81       	ld	r25, Y
    190a:	11 96       	adiw	r26, 0x01	; 1
    190c:	e9 01       	movw	r28, r18
    190e:	28 81       	ld	r18, Y
    1910:	29 17       	cp	r18, r25
    1912:	18 f4       	brcc	.+6      	; 0x191a <effect_z_updown_move+0x3e>
		{
			positions[px]--;
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	e7 01       	movw	r28, r14
    1918:	98 83       	st	Y, r25
    191a:	31 96       	adiw	r30, 0x01	; 1
}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
	int px;
	for (px=0; px<64; px++)
    191c:	e6 17       	cp	r30, r22
    191e:	f7 07       	cpc	r31, r23
    1920:	51 f7       	brne	.-44     	; 0x18f6 <effect_z_updown_move+0x1a>
		{
			positions[px]--;
		}
	}
		
	draw_positions_axis (AXIS_Z, positions,0);
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	b8 01       	movw	r22, r16
    1928:	8a e7       	ldi	r24, 0x7A	; 122
    192a:	0e 94 08 0c 	call	0x1810	; 0x1810 <draw_positions_axis>
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	08 95       	ret

0000193c <effect_z_updown>:
		shift(AXIS_Z,-1);
	}
}

void effect_z_updown (int iterations, int delay)
{
    193c:	2f 92       	push	r2
    193e:	3f 92       	push	r3
    1940:	4f 92       	push	r4
    1942:	5f 92       	push	r5
    1944:	6f 92       	push	r6
    1946:	7f 92       	push	r7
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	c0 58       	subi	r28, 0x80	; 128
    1966:	d1 09       	sbc	r29, r1
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	4c 01       	movw	r8, r24
    1974:	1b 01       	movw	r2, r22
    1976:	8e 01       	movw	r16, r28
    1978:	0f 5f       	subi	r16, 0xFF	; 255
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	7e 01       	movw	r14, r28
    197e:	81 e4       	ldi	r24, 0x41	; 65
    1980:	e8 0e       	add	r14, r24
    1982:	f1 1c       	adc	r15, r1
    1984:	67 01       	movw	r12, r14

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
    1986:	68 94       	set
    1988:	bb 24       	eor	r11, r11
    198a:	b2 f8       	bld	r11, 2
    198c:	f8 01       	movw	r30, r16
    198e:	b1 92       	st	Z+, r11
    1990:	8f 01       	movw	r16, r30
		destinations[i] = rand()%8;
    1992:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1996:	87 70       	andi	r24, 0x07	; 7
    1998:	90 78       	andi	r25, 0x80	; 128
    199a:	99 23       	and	r25, r25
    199c:	24 f4       	brge	.+8      	; 0x19a6 <effect_z_updown+0x6a>
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	88 6f       	ori	r24, 0xF8	; 248
    19a2:	9f 6f       	ori	r25, 0xFF	; 255
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	f7 01       	movw	r30, r14
    19a8:	81 93       	st	Z+, r24
    19aa:	7f 01       	movw	r14, r30
	unsigned char positions[64];
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++)
    19ac:	0c 15       	cp	r16, r12
    19ae:	1d 05       	cpc	r17, r13
    19b0:	69 f7       	brne	.-38     	; 0x198c <effect_z_updown+0x50>
    19b2:	08 e0       	ldi	r16, 0x08	; 8
    19b4:	10 e0       	ldi	r17, 0x00	; 0
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
    19b6:	e2 2c       	mov	r14, r2
    19b8:	f3 2c       	mov	r15, r3
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	be 01       	movw	r22, r28
    19be:	6f 5b       	subi	r22, 0xBF	; 191
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	ce 01       	movw	r24, r28
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <effect_z_updown_move>
		delay_ms(delay);
    19ca:	7e 2c       	mov	r7, r14
    19cc:	6f 2c       	mov	r6, r15
    19ce:	8e 2d       	mov	r24, r14
    19d0:	9f 2d       	mov	r25, r15
    19d2:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
    19d6:	01 50       	subi	r16, 0x01	; 1
    19d8:	11 09       	sbc	r17, r1
	{
		positions[i] = 4;
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
    19da:	79 f7       	brne	.-34     	; 0x19ba <effect_z_updown+0x7e>
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
    19dc:	18 14       	cp	r1, r8
    19de:	19 04       	cpc	r1, r9
    19e0:	0c f0       	brlt	.+2      	; 0x19e4 <effect_z_updown+0xa8>
    19e2:	4a c0       	rjmp	.+148    	; 0x1a78 <effect_z_updown+0x13c>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    19e4:	22 0c       	add	r2, r2
    19e6:	33 1c       	adc	r3, r3
    19e8:	22 0c       	add	r2, r2
    19ea:	33 1c       	adc	r3, r3
    19ec:	a1 2c       	mov	r10, r1
    19ee:	b1 2c       	mov	r11, r1
	
	for (i=0;i<iterations;i++)
	{
		for (move=0;move<8;move++)
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
    19f0:	6e 01       	movw	r12, r28
    19f2:	f1 e4       	ldi	r31, 0x41	; 65
    19f4:	cf 0e       	add	r12, r31
    19f6:	d1 1c       	adc	r13, r1
    19f8:	4c 2c       	mov	r4, r12
    19fa:	5d 2c       	mov	r5, r13
    19fc:	3a c0       	rjmp	.+116    	; 0x1a72 <effect_z_updown+0x136>
    19fe:	4a e7       	ldi	r20, 0x7A	; 122
    1a00:	64 2d       	mov	r22, r4
    1a02:	75 2d       	mov	r23, r5
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <effect_z_updown_move>
			delay_ms(delay);
    1a0c:	87 2d       	mov	r24, r7
    1a0e:	96 2d       	mov	r25, r6
    1a10:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
    1a14:	01 50       	subi	r16, 0x01	; 1
    1a16:	11 09       	sbc	r17, r1
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
	{
		for (move=0;move<8;move++)
    1a18:	91 f7       	brne	.-28     	; 0x19fe <effect_z_updown+0xc2>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    1a1a:	c1 01       	movw	r24, r2
    1a1c:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
    1a20:	68 94       	set
    1a22:	ee 24       	eor	r14, r14
    1a24:	e5 f8       	bld	r14, 5
    1a26:	f1 2c       	mov	r15, r1


		for (y=0;y<32;y++)
		{
				destinations[rand()%64] = rand()%8;
    1a28:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1a2c:	8c 01       	movw	r16, r24
    1a2e:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1a32:	0f 73       	andi	r16, 0x3F	; 63
    1a34:	10 78       	andi	r17, 0x80	; 128
    1a36:	11 23       	and	r17, r17
    1a38:	34 f4       	brge	.+12     	; 0x1a46 <effect_z_updown+0x10a>
    1a3a:	01 50       	subi	r16, 0x01	; 1
    1a3c:	11 09       	sbc	r17, r1
    1a3e:	00 6c       	ori	r16, 0xC0	; 192
    1a40:	1f 6f       	ori	r17, 0xFF	; 255
    1a42:	0f 5f       	subi	r16, 0xFF	; 255
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	f6 01       	movw	r30, r12
    1a48:	e0 0f       	add	r30, r16
    1a4a:	f1 1f       	adc	r31, r17
    1a4c:	87 70       	andi	r24, 0x07	; 7
    1a4e:	90 78       	andi	r25, 0x80	; 128
    1a50:	99 23       	and	r25, r25
    1a52:	24 f4       	brge	.+8      	; 0x1a5c <effect_z_updown+0x120>
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	88 6f       	ori	r24, 0xF8	; 248
    1a58:	9f 6f       	ori	r25, 0xFF	; 255
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	80 83       	st	Z, r24
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	e8 1a       	sub	r14, r24
    1a62:	f1 08       	sbc	r15, r1
		}

		delay_ms(delay*4);


		for (y=0;y<32;y++)
    1a64:	09 f7       	brne	.-62     	; 0x1a28 <effect_z_updown+0xec>
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
    1a66:	ef ef       	ldi	r30, 0xFF	; 255
    1a68:	ae 1a       	sub	r10, r30
    1a6a:	be 0a       	sbc	r11, r30
    1a6c:	a8 14       	cp	r10, r8
    1a6e:	b9 04       	cpc	r11, r9
    1a70:	19 f0       	breq	.+6      	; 0x1a78 <effect_z_updown+0x13c>
    1a72:	08 e0       	ldi	r16, 0x08	; 8
    1a74:	10 e0       	ldi	r17, 0x00	; 0
    1a76:	c3 cf       	rjmp	.-122    	; 0x19fe <effect_z_updown+0xc2>
				destinations[rand()%64] = rand()%8;
		}
		
	}

}
    1a78:	c0 58       	subi	r28, 0x80	; 128
    1a7a:	df 4f       	sbci	r29, 0xFF	; 255
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	ff 90       	pop	r15
    1a90:	ef 90       	pop	r14
    1a92:	df 90       	pop	r13
    1a94:	cf 90       	pop	r12
    1a96:	bf 90       	pop	r11
    1a98:	af 90       	pop	r10
    1a9a:	9f 90       	pop	r9
    1a9c:	8f 90       	pop	r8
    1a9e:	7f 90       	pop	r7
    1aa0:	6f 90       	pop	r6
    1aa2:	5f 90       	pop	r5
    1aa4:	4f 90       	pop	r4
    1aa6:	3f 90       	pop	r3
    1aa8:	2f 90       	pop	r2
    1aaa:	08 95       	ret

00001aac <effect_axis_updown_randsuspend>:
		
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    1aac:	3f 92       	push	r3
    1aae:	4f 92       	push	r4
    1ab0:	5f 92       	push	r5
    1ab2:	6f 92       	push	r6
    1ab4:	7f 92       	push	r7
    1ab6:	8f 92       	push	r8
    1ab8:	9f 92       	push	r9
    1aba:	af 92       	push	r10
    1abc:	bf 92       	push	r11
    1abe:	cf 92       	push	r12
    1ac0:	df 92       	push	r13
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	c6 58       	subi	r28, 0x86	; 134
    1ad4:	d1 09       	sbc	r29, r1
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	98 2e       	mov	r9, r24
    1ae2:	86 2e       	mov	r8, r22
    1ae4:	77 2e       	mov	r7, r23
    1ae6:	cb 57       	subi	r28, 0x7B	; 123
    1ae8:	df 4f       	sbci	r29, 0xFF	; 255
    1aea:	59 83       	std	Y+1, r21	; 0x01
    1aec:	48 83       	st	Y, r20
    1aee:	c5 58       	subi	r28, 0x85	; 133
    1af0:	d0 40       	sbci	r29, 0x00	; 0
    1af2:	59 01       	movw	r10, r18
    1af4:	ce 01       	movw	r24, r28
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	cd 57       	subi	r28, 0x7D	; 125
    1afa:	df 4f       	sbci	r29, 0xFF	; 255
    1afc:	99 83       	std	Y+1, r25	; 0x01
    1afe:	88 83       	st	Y, r24
    1b00:	c3 58       	subi	r28, 0x83	; 131
    1b02:	d0 40       	sbci	r29, 0x00	; 0
    1b04:	de 01       	movw	r26, r28
    1b06:	af 5b       	subi	r26, 0xBF	; 191
    1b08:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0a:	cf 57       	subi	r28, 0x7F	; 127
    1b0c:	df 4f       	sbci	r29, 0xFF	; 255
    1b0e:	b9 83       	std	Y+1, r27	; 0x01
    1b10:	a8 83       	st	Y, r26
    1b12:	c1 58       	subi	r28, 0x81	; 129
    1b14:	d0 40       	sbci	r29, 0x00	; 0
    1b16:	8d 01       	movw	r16, r26
    1b18:	6d 01       	movw	r12, r26
    1b1a:	7c 01       	movw	r14, r24
	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
	{
		positions[i] = 0; // Set all starting positions to 0
    1b1c:	d7 01       	movw	r26, r14
    1b1e:	1d 92       	st	X+, r1
    1b20:	7d 01       	movw	r14, r26
		destinations[i] = rand()%8;
    1b22:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1b26:	87 70       	andi	r24, 0x07	; 7
    1b28:	90 78       	andi	r25, 0x80	; 128
    1b2a:	99 23       	and	r25, r25
    1b2c:	24 f4       	brge	.+8      	; 0x1b36 <effect_axis_updown_randsuspend+0x8a>
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	88 6f       	ori	r24, 0xF8	; 248
    1b32:	9f 6f       	ori	r25, 0xFF	; 255
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	f6 01       	movw	r30, r12
    1b38:	81 93       	st	Z+, r24
    1b3a:	6f 01       	movw	r12, r30
	unsigned char destinations[64];

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
    1b3c:	e0 16       	cp	r14, r16
    1b3e:	f1 06       	cpc	r15, r17
    1b40:	69 f7       	brne	.-38     	; 0x1b1c <effect_axis_updown_randsuspend+0x70>
    1b42:	68 94       	set
    1b44:	ee 24       	eor	r14, r14
    1b46:	e3 f8       	bld	r14, 3
    1b48:	f1 2c       	mov	r15, r1
		
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    1b4a:	cf 57       	subi	r28, 0x7F	; 127
    1b4c:	df 4f       	sbci	r29, 0xFF	; 255
    1b4e:	38 80       	ld	r3, Y
    1b50:	c1 58       	subi	r28, 0x81	; 129
    1b52:	d0 40       	sbci	r29, 0x00	; 0
    1b54:	ce 57       	subi	r28, 0x7E	; 126
    1b56:	df 4f       	sbci	r29, 0xFF	; 255
    1b58:	48 80       	ld	r4, Y
    1b5a:	c2 58       	subi	r28, 0x82	; 130
    1b5c:	d0 40       	sbci	r29, 0x00	; 0
    1b5e:	cd 57       	subi	r28, 0x7D	; 125
    1b60:	df 4f       	sbci	r29, 0xFF	; 255
    1b62:	58 80       	ld	r5, Y
    1b64:	c3 58       	subi	r28, 0x83	; 131
    1b66:	d0 40       	sbci	r29, 0x00	; 0
    1b68:	cc 57       	subi	r28, 0x7C	; 124
    1b6a:	df 4f       	sbci	r29, 0xFF	; 255
    1b6c:	68 80       	ld	r6, Y
    1b6e:	c4 58       	subi	r28, 0x84	; 132
    1b70:	d0 40       	sbci	r29, 0x00	; 0
				positions[px]++;
			}
		}
        // Draw the positions and take a nap
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
    1b72:	c8 2c       	mov	r12, r8
    1b74:	d7 2c       	mov	r13, r7
    1b76:	1b c0       	rjmp	.+54     	; 0x1bae <effect_axis_updown_randsuspend+0x102>
	for (i=0; i<8; i++)
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    1b78:	80 81       	ld	r24, Z
    1b7a:	9d 91       	ld	r25, X+
    1b7c:	89 17       	cp	r24, r25
    1b7e:	10 f4       	brcc	.+4      	; 0x1b84 <effect_axis_updown_randsuspend+0xd8>
			{
				positions[px]++;
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	80 83       	st	Z, r24
    1b84:	31 96       	adiw	r30, 0x01	; 1

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
    1b86:	0e 17       	cp	r16, r30
    1b88:	1f 07       	cpc	r17, r31
    1b8a:	b1 f7       	brne	.-20     	; 0x1b78 <effect_axis_updown_randsuspend+0xcc>
			{
				positions[px]++;
			}
		}
        // Draw the positions and take a nap
		draw_positions_axis (axis, positions,invert);
    1b8c:	a5 01       	movw	r20, r10
    1b8e:	be 01       	movw	r22, r28
    1b90:	6f 5f       	subi	r22, 0xFF	; 255
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	89 2d       	mov	r24, r9
    1b96:	0e 94 08 0c 	call	0x1810	; 0x1810 <draw_positions_axis>
		delay_ms(delay);
    1b9a:	8c 2c       	mov	r8, r12
    1b9c:	7d 2c       	mov	r7, r13
    1b9e:	8c 2d       	mov	r24, r12
    1ba0:	9d 2d       	mov	r25, r13
    1ba2:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
    1ba6:	f1 e0       	ldi	r31, 0x01	; 1
    1ba8:	ef 1a       	sub	r14, r31
    1baa:	f1 08       	sbc	r15, r1
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    1bac:	29 f0       	breq	.+10     	; 0x1bb8 <effect_axis_updown_randsuspend+0x10c>
		
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    1bae:	a3 2d       	mov	r26, r3
    1bb0:	b4 2d       	mov	r27, r4
    1bb2:	e5 2d       	mov	r30, r5
    1bb4:	f6 2d       	mov	r31, r6
    1bb6:	e0 cf       	rjmp	.-64     	; 0x1b78 <effect_axis_updown_randsuspend+0xcc>
    1bb8:	9e 01       	movw	r18, r28
    1bba:	2f 57       	subi	r18, 0x7F	; 127
    1bbc:	3f 4f       	sbci	r19, 0xFF	; 255
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ef 5b       	subi	r30, 0xBF	; 191
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
	{
		destinations[i] = 7;
    1bc4:	87 e0       	ldi	r24, 0x07	; 7
    1bc6:	81 93       	st	Z+, r24
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
    1bc8:	e2 17       	cp	r30, r18
    1bca:	f3 07       	cpc	r31, r19
    1bcc:	e1 f7       	brne	.-8      	; 0x1bc6 <effect_axis_updown_randsuspend+0x11a>
	{
		destinations[i] = 7;
	}
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
    1bce:	cb 57       	subi	r28, 0x7B	; 123
    1bd0:	df 4f       	sbci	r29, 0xFF	; 255
    1bd2:	88 81       	ld	r24, Y
    1bd4:	99 81       	ldd	r25, Y+1	; 0x01
    1bd6:	c5 58       	subi	r28, 0x85	; 133
    1bd8:	d0 40       	sbci	r29, 0x00	; 0
    1bda:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
    1bde:	68 94       	set
    1be0:	ee 24       	eor	r14, r14
    1be2:	e3 f8       	bld	r14, 3
    1be4:	f1 2c       	mov	r15, r1
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    1be6:	cf 57       	subi	r28, 0x7F	; 127
    1be8:	df 4f       	sbci	r29, 0xFF	; 255
    1bea:	d8 80       	ld	r13, Y
    1bec:	c1 58       	subi	r28, 0x81	; 129
    1bee:	d0 40       	sbci	r29, 0x00	; 0
    1bf0:	ce 57       	subi	r28, 0x7E	; 126
    1bf2:	df 4f       	sbci	r29, 0xFF	; 255
    1bf4:	c8 80       	ld	r12, Y
    1bf6:	c2 58       	subi	r28, 0x82	; 130
    1bf8:	d0 40       	sbci	r29, 0x00	; 0
    1bfa:	cd 57       	subi	r28, 0x7D	; 125
    1bfc:	df 4f       	sbci	r29, 0xFF	; 255
    1bfe:	68 80       	ld	r6, Y
    1c00:	c3 58       	subi	r28, 0x83	; 131
    1c02:	d0 40       	sbci	r29, 0x00	; 0
    1c04:	cc 57       	subi	r28, 0x7C	; 124
    1c06:	df 4f       	sbci	r29, 0xFF	; 255
    1c08:	58 80       	ld	r5, Y
    1c0a:	c4 58       	subi	r28, 0x84	; 132
    1c0c:	d0 40       	sbci	r29, 0x00	; 0
    1c0e:	22 c0       	rjmp	.+68     	; 0x1c54 <effect_axis_updown_randsuspend+0x1a8>
    1c10:	af 01       	movw	r20, r30
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    1c12:	80 81       	ld	r24, Z
    1c14:	d9 01       	movw	r26, r18
    1c16:	9d 91       	ld	r25, X+
    1c18:	9d 01       	movw	r18, r26
    1c1a:	89 17       	cp	r24, r25
    1c1c:	10 f4       	brcc	.+4      	; 0x1c22 <effect_axis_updown_randsuspend+0x176>
			{
				positions[px]++;
    1c1e:	8f 5f       	subi	r24, 0xFF	; 255
    1c20:	80 83       	st	Z, r24
			}
			if (positions[px]>destinations[px])
    1c22:	da 01       	movw	r26, r20
    1c24:	8c 91       	ld	r24, X
    1c26:	98 17       	cp	r25, r24
    1c28:	10 f4       	brcc	.+4      	; 0x1c2e <effect_axis_updown_randsuspend+0x182>
			{
				positions[px]--;
    1c2a:	81 50       	subi	r24, 0x01	; 1
    1c2c:	8c 93       	st	X, r24
    1c2e:	31 96       	adiw	r30, 0x01	; 1
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
    1c30:	0e 17       	cp	r16, r30
    1c32:	1f 07       	cpc	r17, r31
    1c34:	69 f7       	brne	.-38     	; 0x1c10 <effect_axis_updown_randsuspend+0x164>
			if (positions[px]>destinations[px])
			{
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    1c36:	a5 01       	movw	r20, r10
    1c38:	be 01       	movw	r22, r28
    1c3a:	6f 5f       	subi	r22, 0xFF	; 255
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	89 2d       	mov	r24, r9
    1c40:	0e 94 08 0c 	call	0x1810	; 0x1810 <draw_positions_axis>
		delay_ms(delay);
    1c44:	88 2d       	mov	r24, r8
    1c46:	97 2d       	mov	r25, r7
    1c48:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
    1c4c:	b1 e0       	ldi	r27, 0x01	; 1
    1c4e:	eb 1a       	sub	r14, r27
    1c50:	f1 08       	sbc	r15, r1
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
    1c52:	29 f0       	breq	.+10     	; 0x1c5e <effect_axis_updown_randsuspend+0x1b2>
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    1c54:	2d 2d       	mov	r18, r13
    1c56:	3c 2d       	mov	r19, r12
    1c58:	e6 2d       	mov	r30, r6
    1c5a:	f5 2d       	mov	r31, r5
    1c5c:	d9 cf       	rjmp	.-78     	; 0x1c10 <effect_axis_updown_randsuspend+0x164>
			}
		}
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
}
    1c5e:	ca 57       	subi	r28, 0x7A	; 122
    1c60:	df 4f       	sbci	r29, 0xFF	; 255
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	bf 90       	pop	r11
    1c7e:	af 90       	pop	r10
    1c80:	9f 90       	pop	r9
    1c82:	8f 90       	pop	r8
    1c84:	7f 90       	pop	r7
    1c86:	6f 90       	pop	r6
    1c88:	5f 90       	pop	r5
    1c8a:	4f 90       	pop	r4
    1c8c:	3f 90       	pop	r3
    1c8e:	08 95       	ret

00001c90 <effect_boxside_randsend_parallel>:
	
}


void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
{
    1c90:	2f 92       	push	r2
    1c92:	3f 92       	push	r3
    1c94:	4f 92       	push	r4
    1c96:	5f 92       	push	r5
    1c98:	6f 92       	push	r6
    1c9a:	7f 92       	push	r7
    1c9c:	8f 92       	push	r8
    1c9e:	9f 92       	push	r9
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	c2 58       	subi	r28, 0x82	; 130
    1cba:	d1 09       	sbc	r29, r1
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	28 2e       	mov	r2, r24
    1cc8:	7b 01       	movw	r14, r22
    1cca:	cf 57       	subi	r28, 0x7F	; 127
    1ccc:	df 4f       	sbci	r29, 0xFF	; 255
    1cce:	59 83       	std	Y+1, r21	; 0x01
    1cd0:	48 83       	st	Y, r20
    1cd2:	c1 58       	subi	r28, 0x81	; 129
    1cd4:	d0 40       	sbci	r29, 0x00	; 0
    1cd6:	59 01       	movw	r10, r18
    1cd8:	ce 01       	movw	r24, r28
    1cda:	8f 5b       	subi	r24, 0xBF	; 191
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	8e 01       	movw	r16, r28
    1ce0:	0f 57       	subi	r16, 0x7F	; 127
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	fc 01       	movw	r30, r24
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
    1ce6:	11 92       	st	Z+, r1
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    1ce8:	e0 17       	cp	r30, r16
    1cea:	f1 07       	cpc	r31, r17
    1cec:	e1 f7       	brne	.-8      	; 0x1ce6 <effect_boxside_randsend_parallel+0x56>
    1cee:	81 2c       	mov	r8, r1
    1cf0:	91 2c       	mov	r9, r1
    1cf2:	cc 24       	eor	r12, r12
    1cf4:	c3 94       	inc	r12
    1cf6:	d1 2c       	mov	r13, r1
    1cf8:	38 2e       	mov	r3, r24
    1cfa:	49 2e       	mov	r4, r25
				pos[sent] += 1;
				sent++;
			}
		}
		
		done = 0;
    1cfc:	51 2c       	mov	r5, r1
    1cfe:	61 2c       	mov	r6, r1
			if (origin == 0)
			{
				cubepos[i] = pos[i];
			} else
			{
				cubepos[i] = (7-pos[i]);
    1d00:	0f 2e       	mov	r0, r31
    1d02:	f7 e0       	ldi	r31, 0x07	; 7
    1d04:	7f 2e       	mov	r7, r31
    1d06:	f0 2d       	mov	r31, r0
		pos[i] = 0;
	}
	
	while (notdone)
	{
		if (mode == 1)
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	a8 16       	cp	r10, r24
    1d0c:	b1 04       	cpc	r11, r1
    1d0e:	09 f5       	brne	.+66     	; 0x1d52 <effect_boxside_randsend_parallel+0xc2>
    1d10:	76 c0       	rjmp	.+236    	; 0x1dfe <effect_boxside_randsend_parallel+0x16e>
		{
			notdone2 = 1;
			while (notdone2 && sent<64)
			{
				i = rand()%64;
    1d12:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1d16:	8f 73       	andi	r24, 0x3F	; 63
    1d18:	90 78       	andi	r25, 0x80	; 128
    1d1a:	99 23       	and	r25, r25
    1d1c:	24 f4       	brge	.+8      	; 0x1d26 <effect_boxside_randsend_parallel+0x96>
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	80 6c       	ori	r24, 0xC0	; 192
    1d22:	9f 6f       	ori	r25, 0xFF	; 255
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	9c 01       	movw	r18, r24
				if (pos[i] == 0)
    1d28:	e1 e4       	ldi	r30, 0x41	; 65
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	ec 0f       	add	r30, r28
    1d2e:	fd 1f       	adc	r31, r29
    1d30:	e8 0f       	add	r30, r24
    1d32:	f9 1f       	adc	r31, r25
    1d34:	80 81       	ld	r24, Z
    1d36:	81 11       	cpse	r24, r1
    1d38:	ec cf       	rjmp	.-40     	; 0x1d12 <effect_boxside_randsend_parallel+0x82>
				{
					sent++;
    1d3a:	9f ef       	ldi	r25, 0xFF	; 255
    1d3c:	89 1a       	sub	r8, r25
    1d3e:	99 0a       	sbc	r9, r25
					pos[i] += 1;
    1d40:	e1 e4       	ldi	r30, 0x41	; 65
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	ec 0f       	add	r30, r28
    1d46:	fd 1f       	adc	r31, r29
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 83       	st	Z, r24
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <effect_boxside_randsend_parallel+0xea>
					notdone2 = 0;
				}
			}
		} else if (mode == 2)
    1d52:	92 e0       	ldi	r25, 0x02	; 2
    1d54:	a9 16       	cp	r10, r25
    1d56:	b1 04       	cpc	r11, r1
    1d58:	81 f4       	brne	.+32     	; 0x1d7a <effect_boxside_randsend_parallel+0xea>
		{
			if (sent<64)
    1d5a:	80 e4       	ldi	r24, 0x40	; 64
    1d5c:	88 16       	cp	r8, r24
    1d5e:	91 04       	cpc	r9, r1
    1d60:	64 f4       	brge	.+24     	; 0x1d7a <effect_boxside_randsend_parallel+0xea>
			{
				pos[sent] += 1;
    1d62:	e1 e4       	ldi	r30, 0x41	; 65
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	ec 0f       	add	r30, r28
    1d68:	fd 1f       	adc	r31, r29
    1d6a:	e8 0d       	add	r30, r8
    1d6c:	f9 1d       	adc	r31, r9
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 5f       	subi	r24, 0xFF	; 255
    1d72:	80 83       	st	Z, r24
				sent++;
    1d74:	9f ef       	ldi	r25, 0xFF	; 255
    1d76:	89 1a       	sub	r8, r25
    1d78:	99 0a       	sbc	r9, r25
    1d7a:	e3 2d       	mov	r30, r3
    1d7c:	f4 2d       	mov	r31, r4
			}
		}
		
		done = 0;
    1d7e:	25 2d       	mov	r18, r5
    1d80:	36 2d       	mov	r19, r6
    1d82:	df 01       	movw	r26, r30
		for (i=0;i<64;i++)
		{
			if (pos[i] > 0 && pos[i] <7)
    1d84:	80 81       	ld	r24, Z
    1d86:	9f ef       	ldi	r25, 0xFF	; 255
    1d88:	98 0f       	add	r25, r24
    1d8a:	96 30       	cpi	r25, 0x06	; 6
    1d8c:	10 f4       	brcc	.+4      	; 0x1d92 <effect_boxside_randsend_parallel+0x102>
			{
				pos[i] += 1;
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	80 83       	st	Z, r24
    1d92:	31 96       	adiw	r30, 0x01	; 1
			}
				
			if (pos[i] == 7)
    1d94:	8c 91       	ld	r24, X
    1d96:	87 30       	cpi	r24, 0x07	; 7
    1d98:	11 f4       	brne	.+4      	; 0x1d9e <effect_boxside_randsend_parallel+0x10e>
				done++;
    1d9a:	2f 5f       	subi	r18, 0xFF	; 255
    1d9c:	3f 4f       	sbci	r19, 0xFF	; 255
				sent++;
			}
		}
		
		done = 0;
		for (i=0;i<64;i++)
    1d9e:	0e 17       	cp	r16, r30
    1da0:	1f 07       	cpc	r17, r31
    1da2:	79 f7       	brne	.-34     	; 0x1d82 <effect_boxside_randsend_parallel+0xf2>
				
			if (pos[i] == 7)
				done++;
		}
		
		if (done == 64)
    1da4:	20 34       	cpi	r18, 0x40	; 64
    1da6:	31 05       	cpc	r19, r1
    1da8:	11 f4       	brne	.+4      	; 0x1dae <effect_boxside_randsend_parallel+0x11e>
			notdone = 0;
    1daa:	c5 2c       	mov	r12, r5
    1dac:	d6 2c       	mov	r13, r6
    1dae:	de 01       	movw	r26, r28
    1db0:	11 96       	adiw	r26, 0x01	; 1
    1db2:	e3 2d       	mov	r30, r3
    1db4:	f4 2d       	mov	r31, r4
		
		for (i=0;i<64;i++)
		{
			if (origin == 0)
    1db6:	e1 14       	cp	r14, r1
    1db8:	f1 04       	cpc	r15, r1
    1dba:	19 f4       	brne	.+6      	; 0x1dc2 <effect_boxside_randsend_parallel+0x132>
			{
				cubepos[i] = pos[i];
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8c 93       	st	X, r24
    1dc0:	04 c0       	rjmp	.+8      	; 0x1dca <effect_boxside_randsend_parallel+0x13a>
			} else
			{
				cubepos[i] = (7-pos[i]);
    1dc2:	80 81       	ld	r24, Z
    1dc4:	97 2d       	mov	r25, r7
    1dc6:	98 1b       	sub	r25, r24
    1dc8:	9c 93       	st	X, r25
    1dca:	31 96       	adiw	r30, 0x01	; 1
    1dcc:	11 96       	adiw	r26, 0x01	; 1
		}
		
		if (done == 64)
			notdone = 0;
		
		for (i=0;i<64;i++)
    1dce:	0e 17       	cp	r16, r30
    1dd0:	1f 07       	cpc	r17, r31
    1dd2:	89 f7       	brne	.-30     	; 0x1db6 <effect_boxside_randsend_parallel+0x126>
				cubepos[i] = (7-pos[i]);
			}
		}
		
		
		delay_ms(delay);
    1dd4:	cf 57       	subi	r28, 0x7F	; 127
    1dd6:	df 4f       	sbci	r29, 0xFF	; 255
    1dd8:	88 81       	ld	r24, Y
    1dda:	99 81       	ldd	r25, Y+1	; 0x01
    1ddc:	c1 58       	subi	r28, 0x81	; 129
    1dde:	d0 40       	sbci	r29, 0x00	; 0
    1de0:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
		draw_positions_axis(axis,cubepos,0);
    1de4:	45 2d       	mov	r20, r5
    1de6:	56 2d       	mov	r21, r6
    1de8:	be 01       	movw	r22, r28
    1dea:	6f 5f       	subi	r22, 0xFF	; 255
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255
    1dee:	82 2d       	mov	r24, r2
    1df0:	0e 94 08 0c 	call	0x1810	; 0x1810 <draw_positions_axis>
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
	}
	
	while (notdone)
    1df4:	c1 14       	cp	r12, r1
    1df6:	d1 04       	cpc	r13, r1
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <effect_boxside_randsend_parallel+0x16c>
    1dfa:	86 cf       	rjmp	.-244    	; 0x1d08 <effect_boxside_randsend_parallel+0x78>
    1dfc:	06 c0       	rjmp	.+12     	; 0x1e0a <effect_boxside_randsend_parallel+0x17a>
	{
		if (mode == 1)
		{
			notdone2 = 1;
			while (notdone2 && sent<64)
    1dfe:	80 e4       	ldi	r24, 0x40	; 64
    1e00:	88 16       	cp	r8, r24
    1e02:	91 04       	cpc	r9, r1
    1e04:	0c f4       	brge	.+2      	; 0x1e08 <effect_boxside_randsend_parallel+0x178>
    1e06:	85 cf       	rjmp	.-246    	; 0x1d12 <effect_boxside_randsend_parallel+0x82>
    1e08:	b8 cf       	rjmp	.-144    	; 0x1d7a <effect_boxside_randsend_parallel+0xea>
		
		delay_ms(delay);
		draw_positions_axis(axis,cubepos,0);
	}
	
}
    1e0a:	ce 57       	subi	r28, 0x7E	; 126
    1e0c:	df 4f       	sbci	r29, 0xFF	; 255
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	df 90       	pop	r13
    1e26:	cf 90       	pop	r12
    1e28:	bf 90       	pop	r11
    1e2a:	af 90       	pop	r10
    1e2c:	9f 90       	pop	r9
    1e2e:	8f 90       	pop	r8
    1e30:	7f 90       	pop	r7
    1e32:	6f 90       	pop	r6
    1e34:	5f 90       	pop	r5
    1e36:	4f 90       	pop	r4
    1e38:	3f 90       	pop	r3
    1e3a:	2f 90       	pop	r2
    1e3c:	08 95       	ret

00001e3e <effect_loadbar>:


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    1e3e:	9f 92       	push	r9
    1e40:	af 92       	push	r10
    1e42:	bf 92       	push	r11
    1e44:	cf 92       	push	r12
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	7c 01       	movw	r14, r24
	fill(0x00);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
	
	int z,y;
	
	for (z=0;z<8;z++)
    1e5c:	00 e0       	ldi	r16, 0x00	; 0
    1e5e:	10 e0       	ldi	r17, 0x00	; 0


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    1e60:	91 2c       	mov	r9, r1
    1e62:	a1 2c       	mov	r10, r1
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    1e64:	cf ef       	ldi	r28, 0xFF	; 255
			
		delay_ms(delay);
    1e66:	de 2c       	mov	r13, r14
    1e68:	df 2d       	mov	r29, r15
    1e6a:	16 c0       	rjmp	.+44     	; 0x1e98 <effect_loadbar+0x5a>
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e2 0f       	add	r30, r18
    1e70:	f3 1f       	adc	r31, r19
    1e72:	e6 52       	subi	r30, 0x26	; 38
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	c0 83       	st	Z, r28
	
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    1e78:	2f 5f       	subi	r18, 0xFF	; 255
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	28 30       	cpi	r18, 0x08	; 8
    1e7e:	31 05       	cpc	r19, r1
    1e80:	a9 f7       	brne	.-22     	; 0x1e6c <effect_loadbar+0x2e>
			cube[z][y] = 0xff;
			
		delay_ms(delay);
    1e82:	cd 2c       	mov	r12, r13
    1e84:	bd 2e       	mov	r11, r29
    1e86:	8d 2d       	mov	r24, r13
    1e88:	9d 2f       	mov	r25, r29
    1e8a:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    1e8e:	0f 5f       	subi	r16, 0xFF	; 255
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	08 30       	cpi	r16, 0x08	; 8
    1e94:	11 05       	cpc	r17, r1
    1e96:	51 f0       	breq	.+20     	; 0x1eac <effect_loadbar+0x6e>


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    1e98:	29 2d       	mov	r18, r9
    1e9a:	3a 2d       	mov	r19, r10
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	e0 cf       	rjmp	.-64     	; 0x1e6c <effect_loadbar+0x2e>
			
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
    1eac:	c7 01       	movw	r24, r14
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	8e 0d       	add	r24, r14
    1eb4:	9f 1d       	adc	r25, r15
    1eb6:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
	
	for (z=0;z<8;z++)
    1eba:	c0 e0       	ldi	r28, 0x00	; 0
    1ebc:	d0 e0       	ldi	r29, 0x00	; 0
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    1ebe:	00 e0       	ldi	r16, 0x00	; 0
    1ec0:	10 e0       	ldi	r17, 0x00	; 0
    1ec2:	13 c0       	rjmp	.+38     	; 0x1eea <effect_loadbar+0xac>
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    1ec4:	fa 01       	movw	r30, r20
    1ec6:	e2 0f       	add	r30, r18
    1ec8:	f3 1f       	adc	r31, r19
    1eca:	e6 52       	subi	r30, 0x26	; 38
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	10 82       	st	Z, r1
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    1ed0:	2f 5f       	subi	r18, 0xFF	; 255
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	28 30       	cpi	r18, 0x08	; 8
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	a9 f7       	brne	.-22     	; 0x1ec4 <effect_loadbar+0x86>
			cube[z][y] = 0x00;
			
		delay_ms(delay);
    1eda:	8c 2d       	mov	r24, r12
    1edc:	9b 2d       	mov	r25, r11
    1ede:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
    1ee2:	21 96       	adiw	r28, 0x01	; 1
    1ee4:	c8 30       	cpi	r28, 0x08	; 8
    1ee6:	d1 05       	cpc	r29, r1
    1ee8:	51 f0       	breq	.+20     	; 0x1efe <effect_loadbar+0xc0>
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    1eea:	20 2f       	mov	r18, r16
    1eec:	31 2f       	mov	r19, r17
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    1eee:	ae 01       	movw	r20, r28
    1ef0:	44 0f       	add	r20, r20
    1ef2:	55 1f       	adc	r21, r21
    1ef4:	44 0f       	add	r20, r20
    1ef6:	55 1f       	adc	r21, r21
    1ef8:	44 0f       	add	r20, r20
    1efa:	55 1f       	adc	r21, r21
    1efc:	e3 cf       	rjmp	.-58     	; 0x1ec4 <effect_loadbar+0x86>
			
		delay_ms(delay);
	}
}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	af 90       	pop	r10
    1f12:	9f 90       	pop	r9
    1f14:	08 95       	ret

00001f16 <effect_random_sparkle_flash>:


// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
    1f16:	4f 92       	push	r4
    1f18:	5f 92       	push	r5
    1f1a:	6f 92       	push	r6
    1f1c:	7f 92       	push	r7
    1f1e:	8f 92       	push	r8
    1f20:	9f 92       	push	r9
    1f22:	af 92       	push	r10
    1f24:	bf 92       	push	r11
    1f26:	cf 92       	push	r12
    1f28:	df 92       	push	r13
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    1f36:	18 16       	cp	r1, r24
    1f38:	19 06       	cpc	r1, r25
    1f3a:	f4 f1       	brlt	.+124    	; 0x1fb8 <effect_random_sparkle_flash+0xa2>
    1f3c:	48 c0       	rjmp	.+144    	; 0x1fce <effect_random_sparkle_flash+0xb8>
	{
		for (v=0;v<=voxels;v++)
    1f3e:	e4 2c       	mov	r14, r4
    1f40:	f5 2c       	mov	r15, r5
			setvoxel(rand()%8,rand()%8,rand()%8);
    1f42:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1f46:	8c 01       	movw	r16, r24
    1f48:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1f4c:	ec 01       	movw	r28, r24
    1f4e:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1f52:	a8 01       	movw	r20, r16
    1f54:	47 70       	andi	r20, 0x07	; 7
    1f56:	50 78       	andi	r21, 0x80	; 128
    1f58:	55 23       	and	r21, r21
    1f5a:	34 f4       	brge	.+12     	; 0x1f68 <effect_random_sparkle_flash+0x52>
    1f5c:	41 50       	subi	r20, 0x01	; 1
    1f5e:	51 09       	sbc	r21, r1
    1f60:	48 6f       	ori	r20, 0xF8	; 248
    1f62:	5f 6f       	ori	r21, 0xFF	; 255
    1f64:	4f 5f       	subi	r20, 0xFF	; 255
    1f66:	5f 4f       	sbci	r21, 0xFF	; 255
    1f68:	be 01       	movw	r22, r28
    1f6a:	67 70       	andi	r22, 0x07	; 7
    1f6c:	70 78       	andi	r23, 0x80	; 128
    1f6e:	77 23       	and	r23, r23
    1f70:	34 f4       	brge	.+12     	; 0x1f7e <effect_random_sparkle_flash+0x68>
    1f72:	61 50       	subi	r22, 0x01	; 1
    1f74:	71 09       	sbc	r23, r1
    1f76:	68 6f       	ori	r22, 0xF8	; 248
    1f78:	7f 6f       	ori	r23, 0xFF	; 255
    1f7a:	6f 5f       	subi	r22, 0xFF	; 255
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7e:	87 70       	andi	r24, 0x07	; 7
    1f80:	90 78       	andi	r25, 0x80	; 128
    1f82:	99 23       	and	r25, r25
    1f84:	24 f4       	brge	.+8      	; 0x1f8e <effect_random_sparkle_flash+0x78>
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	88 6f       	ori	r24, 0xF8	; 248
    1f8a:	9f 6f       	ori	r25, 0xFF	; 255
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
	{
		for (v=0;v<=voxels;v++)
    1f92:	8f ef       	ldi	r24, 0xFF	; 255
    1f94:	e8 1a       	sub	r14, r24
    1f96:	f8 0a       	sbc	r15, r24
    1f98:	ce 14       	cp	r12, r14
    1f9a:	df 04       	cpc	r13, r15
    1f9c:	94 f6       	brge	.-92     	; 0x1f42 <effect_random_sparkle_flash+0x2c>
			setvoxel(rand()%8,rand()%8,rand()%8);
			
		delay_ms(delay);
    1f9e:	c3 01       	movw	r24, r6
    1fa0:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
		fill(0x00);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    1faa:	8f ef       	ldi	r24, 0xFF	; 255
    1fac:	a8 1a       	sub	r10, r24
    1fae:	b8 0a       	sbc	r11, r24
    1fb0:	a8 14       	cp	r10, r8
    1fb2:	b9 04       	cpc	r11, r9
    1fb4:	41 f4       	brne	.+16     	; 0x1fc6 <effect_random_sparkle_flash+0xb0>
    1fb6:	0b c0       	rjmp	.+22     	; 0x1fce <effect_random_sparkle_flash+0xb8>
    1fb8:	3a 01       	movw	r6, r20
    1fba:	6b 01       	movw	r12, r22
    1fbc:	4c 01       	movw	r8, r24
    1fbe:	a1 2c       	mov	r10, r1
    1fc0:	b1 2c       	mov	r11, r1
	{
		for (v=0;v<=voxels;v++)
    1fc2:	41 2c       	mov	r4, r1
    1fc4:	51 2c       	mov	r5, r1
    1fc6:	dd 20       	and	r13, r13
    1fc8:	0c f0       	brlt	.+2      	; 0x1fcc <effect_random_sparkle_flash+0xb6>
    1fca:	b9 cf       	rjmp	.-142    	; 0x1f3e <effect_random_sparkle_flash+0x28>
    1fcc:	e8 cf       	rjmp	.-48     	; 0x1f9e <effect_random_sparkle_flash+0x88>
			setvoxel(rand()%8,rand()%8,rand()%8);
			
		delay_ms(delay);
		fill(0x00);
	}
}
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	bf 90       	pop	r11
    1fe0:	af 90       	pop	r10
    1fe2:	9f 90       	pop	r9
    1fe4:	8f 90       	pop	r8
    1fe6:	7f 90       	pop	r7
    1fe8:	6f 90       	pop	r6
    1fea:	5f 90       	pop	r5
    1fec:	4f 90       	pop	r4
    1fee:	08 95       	ret

00001ff0 <effect_random_sparkle>:

// blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
// and back to 1 again.
void effect_random_sparkle (void)
{
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
	int i;
	
	for (i=1;i<20;i++)
    1ff4:	c1 e0       	ldi	r28, 0x01	; 1
    1ff6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		effect_random_sparkle_flash(5,i,200);
    1ff8:	48 ec       	ldi	r20, 0xC8	; 200
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	be 01       	movw	r22, r28
    1ffe:	85 e0       	ldi	r24, 0x05	; 5
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <effect_random_sparkle_flash>
// and back to 1 again.
void effect_random_sparkle (void)
{
	int i;
	
	for (i=1;i<20;i++)
    2006:	21 96       	adiw	r28, 0x01	; 1
    2008:	c4 31       	cpi	r28, 0x14	; 20
    200a:	d1 05       	cpc	r29, r1
    200c:	a9 f7       	brne	.-22     	; 0x1ff8 <effect_random_sparkle+0x8>
		effect_random_sparkle_flash(5,i,200);
	}
	
	for (i=20;i>=1;i--)
	{
		effect_random_sparkle_flash(5,i,200);
    200e:	48 ec       	ldi	r20, 0xC8	; 200
    2010:	50 e0       	ldi	r21, 0x00	; 0
    2012:	be 01       	movw	r22, r28
    2014:	85 e0       	ldi	r24, 0x05	; 5
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <effect_random_sparkle_flash>
	for (i=1;i<20;i++)
	{
		effect_random_sparkle_flash(5,i,200);
	}
	
	for (i=20;i>=1;i--)
    201c:	21 97       	sbiw	r28, 0x01	; 1
    201e:	b9 f7       	brne	.-18     	; 0x200e <effect_random_sparkle+0x1e>
	{
		effect_random_sparkle_flash(5,i,200);
	}
	
}
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	08 95       	ret

00002026 <effect_telcstairs_do>:

int effect_telcstairs_do(int x, int val, int delay)
{
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	ec 01       	movw	r28, r24
    202c:	ca 01       	movw	r24, r20
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    202e:	dd 23       	and	r29, r29
    2030:	dc f0       	brlt	.+54     	; 0x2068 <effect_telcstairs_do+0x42>
    2032:	fe 01       	movw	r30, r28
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(x < CUBE_SIZE && y < CUBE_SIZE)
    2038:	e8 30       	cpi	r30, 0x08	; 8
    203a:	f1 05       	cpc	r31, r1
    203c:	7c f4       	brge	.+30     	; 0x205c <effect_telcstairs_do+0x36>
    203e:	28 30       	cpi	r18, 0x08	; 8
    2040:	31 05       	cpc	r19, r1
    2042:	64 f4       	brge	.+24     	; 0x205c <effect_telcstairs_do+0x36>
		{
			cube[x][y] = val;
    2044:	df 01       	movw	r26, r30
    2046:	aa 0f       	add	r26, r26
    2048:	bb 1f       	adc	r27, r27
    204a:	aa 0f       	add	r26, r26
    204c:	bb 1f       	adc	r27, r27
    204e:	aa 0f       	add	r26, r26
    2050:	bb 1f       	adc	r27, r27
    2052:	a2 0f       	add	r26, r18
    2054:	b3 1f       	adc	r27, r19
    2056:	a6 52       	subi	r26, 0x26	; 38
    2058:	bf 4f       	sbci	r27, 0xFF	; 255
    205a:	6c 93       	st	X, r22

int effect_telcstairs_do(int x, int val, int delay)
{
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    205c:	2f 5f       	subi	r18, 0xFF	; 255
    205e:	3f 4f       	sbci	r19, 0xFF	; 255
    2060:	31 97       	sbiw	r30, 0x01	; 1
    2062:	c2 17       	cp	r28, r18
    2064:	d3 07       	cpc	r29, r19
    2066:	44 f7       	brge	.-48     	; 0x2038 <effect_telcstairs_do+0x12>
		if(x < CUBE_SIZE && y < CUBE_SIZE)
		{
			cube[x][y] = val;
		}
	}
	delay_ms(delay);
    2068:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
	return z;
}
    206c:	ce 01       	movw	r24, r28
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	08 95       	ret

00002074 <effect_telcstairs>:

void effect_telcstairs (int invert, int delay, int val)
{
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	eb 01       	movw	r28, r22
    207e:	8a 01       	movw	r16, r20
	int x;

	if(invert)
    2080:	89 2b       	or	r24, r25
    2082:	49 f0       	breq	.+18     	; 0x2096 <effect_telcstairs+0x22>
    2084:	80 e1       	ldi	r24, 0x10	; 16
    2086:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
		{
			x = effect_telcstairs_do(x,val,delay);
    2088:	ae 01       	movw	r20, r28
    208a:	b8 01       	movw	r22, r16
    208c:	0e 94 13 10 	call	0x2026	; 0x2026 <effect_telcstairs_do>
{
	int x;

	if(invert)
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	d2 f7       	brpl	.-12     	; 0x2088 <effect_telcstairs+0x14>
    2094:	0a c0       	rjmp	.+20     	; 0x20aa <effect_telcstairs+0x36>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
		{
			x = effect_telcstairs_do(x,val,delay);
    209a:	ae 01       	movw	r20, r28
    209c:	b8 01       	movw	r22, r16
    209e:	0e 94 13 10 	call	0x2026	; 0x2026 <effect_telcstairs_do>
			x = effect_telcstairs_do(x,val,delay);
		}
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	80 31       	cpi	r24, 0x10	; 16
    20a6:	91 05       	cpc	r25, r1
    20a8:	c4 f3       	brlt	.-16     	; 0x209a <effect_telcstairs+0x26>
		{
			x = effect_telcstairs_do(x,val,delay);
		}
	}
}
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	08 95       	ret

000020b4 <effect_wormsqueeze>:

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
    20b4:	2f 92       	push	r2
    20b6:	3f 92       	push	r3
    20b8:	4f 92       	push	r4
    20ba:	5f 92       	push	r5
    20bc:	6f 92       	push	r6
    20be:	7f 92       	push	r7
    20c0:	8f 92       	push	r8
    20c2:	9f 92       	push	r9
    20c4:	af 92       	push	r10
    20c6:	bf 92       	push	r11
    20c8:	cf 92       	push	r12
    20ca:	df 92       	push	r13
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	66 97       	sbiw	r28, 0x16	; 22
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	9a 87       	std	Y+10, r25	; 0x0a
    20ea:	89 87       	std	Y+9, r24	; 0x09
    20ec:	1b 01       	movw	r2, r22
    20ee:	5e 87       	std	Y+14, r21	; 0x0e
    20f0:	4d 87       	std	Y+13, r20	; 0x0d
    20f2:	38 8b       	std	Y+16, r19	; 0x10
    20f4:	2f 87       	std	Y+15, r18	; 0x0f
    20f6:	1a 8b       	std	Y+18, r17	; 0x12
    20f8:	09 8b       	std	Y+17, r16	; 0x11
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
	
	if (direction == -1)
    20fa:	4f 3f       	cpi	r20, 0xFF	; 255
    20fc:	5f 4f       	sbci	r21, 0xFF	; 255
    20fe:	31 f4       	brne	.+12     	; 0x210c <effect_wormsqueeze+0x58>
		origin = 7;
    2100:	0f 2e       	mov	r0, r31
    2102:	f7 e0       	ldi	r31, 0x07	; 7
    2104:	4f 2e       	mov	r4, r31
    2106:	51 2c       	mov	r5, r1
    2108:	f0 2d       	mov	r31, r0
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <effect_wormsqueeze+0x5c>

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
    210c:	41 2c       	mov	r4, r1
    210e:	51 2c       	mov	r5, r1
	
	if (direction == -1)
		origin = 7;
	
	cube_size = 8-(size-1);
    2110:	89 e0       	ldi	r24, 0x09	; 9
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	ac 01       	movw	r20, r24
    2116:	e9 85       	ldd	r30, Y+9	; 0x09
    2118:	fa 85       	ldd	r31, Y+10	; 0x0a
    211a:	4e 1b       	sub	r20, r30
    211c:	5f 0b       	sbc	r21, r31
    211e:	5c 87       	std	Y+12, r21	; 0x0c
    2120:	4b 87       	std	Y+11, r20	; 0x0b
	
	x = rand()%cube_size;
    2122:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    2126:	6b 85       	ldd	r22, Y+11	; 0x0b
    2128:	7c 85       	ldd	r23, Y+12	; 0x0c
    212a:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	8b 83       	std	Y+3, r24	; 0x03
	y = rand()%cube_size;
    2132:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
	
	for (i=0; i<iterations; i++)
    2142:	2f 85       	ldd	r18, Y+15	; 0x0f
    2144:	38 89       	ldd	r19, Y+16	; 0x10
    2146:	12 16       	cp	r1, r18
    2148:	13 06       	cpc	r1, r19
    214a:	0c f0       	brlt	.+2      	; 0x214e <effect_wormsqueeze+0x9a>
    214c:	9d c0       	rjmp	.+314    	; 0x2288 <effect_wormsqueeze+0x1d4>
    214e:	18 86       	std	Y+8, r1	; 0x08
    2150:	1f 82       	std	Y+7, r1	; 0x07
    2152:	49 85       	ldd	r20, Y+9	; 0x09
    2154:	5a 85       	ldd	r21, Y+10	; 0x0a
    2156:	5c 8b       	std	Y+20, r21	; 0x14
    2158:	4b 8b       	std	Y+19, r20	; 0x13
	{
		dx = ((rand()%3)-1);
    215a:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    215e:	8c 01       	movw	r16, r24
		dy = ((rand()%3)-1);
    2160:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    2164:	63 e0       	ldi	r22, 0x03	; 3
    2166:	70 e0       	ldi	r23, 0x00	; 0
    2168:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    216c:	9c 01       	movw	r18, r24
    216e:	21 50       	subi	r18, 0x01	; 1
    2170:	31 09       	sbc	r19, r1
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
	{
		dx = ((rand()%3)-1);
    2172:	c8 01       	movw	r24, r16
    2174:	63 e0       	ldi	r22, 0x03	; 3
    2176:	70 e0       	ldi	r23, 0x00	; 0
    2178:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    217c:	01 97       	sbiw	r24, 0x01	; 1
		dy = ((rand()%3)-1);
	
		if ((x+dx) > 0 && (x+dx) < cube_size)
    217e:	eb 81       	ldd	r30, Y+3	; 0x03
    2180:	fc 81       	ldd	r31, Y+4	; 0x04
    2182:	8e 0f       	add	r24, r30
    2184:	9f 1f       	adc	r25, r31
    2186:	18 16       	cp	r1, r24
    2188:	19 06       	cpc	r1, r25
    218a:	3c f4       	brge	.+14     	; 0x219a <effect_wormsqueeze+0xe6>
    218c:	4b 85       	ldd	r20, Y+11	; 0x0b
    218e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2190:	84 17       	cp	r24, r20
    2192:	95 07       	cpc	r25, r21
    2194:	14 f4       	brge	.+4      	; 0x219a <effect_wormsqueeze+0xe6>
			x += dx;
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
			
		if ((y+dy) > 0 && (y+dy) < cube_size)
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	9e 81       	ldd	r25, Y+6	; 0x06
    219e:	28 0f       	add	r18, r24
    21a0:	39 1f       	adc	r19, r25
    21a2:	12 16       	cp	r1, r18
    21a4:	13 06       	cpc	r1, r19
    21a6:	3c f4       	brge	.+14     	; 0x21b6 <effect_wormsqueeze+0x102>
    21a8:	eb 85       	ldd	r30, Y+11	; 0x0b
    21aa:	fc 85       	ldd	r31, Y+12	; 0x0c
    21ac:	2e 17       	cp	r18, r30
    21ae:	3f 07       	cpc	r19, r31
    21b0:	14 f4       	brge	.+4      	; 0x21b6 <effect_wormsqueeze+0x102>
			y += dy;
    21b2:	3e 83       	std	Y+6, r19	; 0x06
    21b4:	2d 83       	std	Y+5, r18	; 0x05
	
		shift(axis, direction);
    21b6:	6d 85       	ldd	r22, Y+13	; 0x0d
    21b8:	7e 85       	ldd	r23, Y+14	; 0x0e
    21ba:	82 2d       	mov	r24, r2
    21bc:	0e 94 1a 03 	call	0x634	; 0x634 <shift>
		

		for (j=0; j<size;j++)
    21c0:	29 85       	ldd	r18, Y+9	; 0x09
    21c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    21c4:	12 16       	cp	r1, r18
    21c6:	13 06       	cpc	r1, r19
    21c8:	0c f0       	brlt	.+2      	; 0x21cc <effect_wormsqueeze+0x118>
    21ca:	4f c0       	rjmp	.+158    	; 0x226a <effect_wormsqueeze+0x1b6>
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	49 01       	movw	r8, r18
    21d2:	88 0e       	add	r8, r24
    21d4:	99 1e       	adc	r9, r25
    21d6:	7c 01       	movw	r14, r24
    21d8:	4d 81       	ldd	r20, Y+5	; 0x05
    21da:	5e 81       	ldd	r21, Y+6	; 0x06
    21dc:	5a 83       	std	Y+2, r21	; 0x02
    21de:	49 83       	std	Y+1, r20	; 0x01
    21e0:	8a 01       	movw	r16, r20
    21e2:	eb 89       	ldd	r30, Y+19	; 0x13
    21e4:	fc 89       	ldd	r31, Y+20	; 0x14
    21e6:	0e 0f       	add	r16, r30
    21e8:	1f 1f       	adc	r17, r31
    21ea:	5c 01       	movw	r10, r24
    21ec:	a4 1a       	sub	r10, r20
    21ee:	b5 0a       	sbc	r11, r21
    21f0:	3a 01       	movw	r6, r20
    21f2:	68 1a       	sub	r6, r24
    21f4:	79 0a       	sbc	r7, r25
    21f6:	31 c0       	rjmp	.+98     	; 0x225a <effect_wormsqueeze+0x1a6>
		{
			for (k=0; k<size;k++)
			{
				if (axis == AXIS_Z)
    21f8:	fa e7       	ldi	r31, 0x7A	; 122
    21fa:	2f 16       	cp	r2, r31
    21fc:	31 04       	cpc	r3, r1
    21fe:	39 f4       	brne	.+14     	; 0x220e <effect_wormsqueeze+0x15a>
					setvoxel(x+j,y+k,origin);
    2200:	a2 01       	movw	r20, r4
    2202:	6d 89       	ldd	r22, Y+21	; 0x15
    2204:	7e 89       	ldd	r23, Y+22	; 0x16
    2206:	c7 01       	movw	r24, r14
    2208:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    220c:	17 c0       	rjmp	.+46     	; 0x223c <effect_wormsqueeze+0x188>
					
				if (axis == AXIS_Y)
    220e:	29 e7       	ldi	r18, 0x79	; 121
    2210:	22 16       	cp	r2, r18
    2212:	31 04       	cpc	r3, r1
    2214:	39 f4       	brne	.+14     	; 0x2224 <effect_wormsqueeze+0x170>
					setvoxel(x+j,origin,y+k);
    2216:	4d 89       	ldd	r20, Y+21	; 0x15
    2218:	5e 89       	ldd	r21, Y+22	; 0x16
    221a:	b2 01       	movw	r22, r4
    221c:	c7 01       	movw	r24, r14
    221e:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    2222:	0c c0       	rjmp	.+24     	; 0x223c <effect_wormsqueeze+0x188>
					
				if (axis == AXIS_X)
    2224:	38 e7       	ldi	r19, 0x78	; 120
    2226:	23 16       	cp	r2, r19
    2228:	31 04       	cpc	r3, r1
    222a:	41 f4       	brne	.+16     	; 0x223c <effect_wormsqueeze+0x188>
    222c:	4d 89       	ldd	r20, Y+21	; 0x15
    222e:	5e 89       	ldd	r21, Y+22	; 0x16
    2230:	4a 0d       	add	r20, r10
    2232:	5b 1d       	adc	r21, r11
					setvoxel(origin,y+j,x+k);
    2234:	b6 01       	movw	r22, r12
    2236:	c2 01       	movw	r24, r4
    2238:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    223c:	4d 89       	ldd	r20, Y+21	; 0x15
    223e:	5e 89       	ldd	r21, Y+22	; 0x16
    2240:	4f 5f       	subi	r20, 0xFF	; 255
    2242:	5f 4f       	sbci	r21, 0xFF	; 255
    2244:	5e 8b       	std	Y+22, r21	; 0x16
    2246:	4d 8b       	std	Y+21, r20	; 0x15
		shift(axis, direction);
		

		for (j=0; j<size;j++)
		{
			for (k=0; k<size;k++)
    2248:	40 17       	cp	r20, r16
    224a:	51 07       	cpc	r21, r17
    224c:	a9 f6       	brne	.-86     	; 0x21f8 <effect_wormsqueeze+0x144>
    224e:	5f ef       	ldi	r21, 0xFF	; 255
    2250:	e5 1a       	sub	r14, r21
    2252:	f5 0a       	sbc	r15, r21
			y += dy;
	
		shift(axis, direction);
		

		for (j=0; j<size;j++)
    2254:	e8 14       	cp	r14, r8
    2256:	f9 04       	cpc	r15, r9
    2258:	41 f0       	breq	.+16     	; 0x226a <effect_wormsqueeze+0x1b6>
	
		if ((x+dx) > 0 && (x+dx) < cube_size)
			x += dx;
			
		if ((y+dy) > 0 && (y+dy) < cube_size)
			y += dy;
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	63 01       	movw	r12, r6
    2260:	ce 0c       	add	r12, r14
    2262:	df 1c       	adc	r13, r15
    2264:	9e 8b       	std	Y+22, r25	; 0x16
    2266:	8d 8b       	std	Y+21, r24	; 0x15
    2268:	c7 cf       	rjmp	.-114    	; 0x21f8 <effect_wormsqueeze+0x144>
				if (axis == AXIS_X)
					setvoxel(origin,y+j,x+k);
			}
		}
		
		delay_ms(delay);
    226a:	89 89       	ldd	r24, Y+17	; 0x11
    226c:	9a 89       	ldd	r25, Y+18	; 0x12
    226e:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
	cube_size = 8-(size-1);
	
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
    2272:	ef 81       	ldd	r30, Y+7	; 0x07
    2274:	f8 85       	ldd	r31, Y+8	; 0x08
    2276:	31 96       	adiw	r30, 0x01	; 1
    2278:	f8 87       	std	Y+8, r31	; 0x08
    227a:	ef 83       	std	Y+7, r30	; 0x07
    227c:	2f 85       	ldd	r18, Y+15	; 0x0f
    227e:	38 89       	ldd	r19, Y+16	; 0x10
    2280:	e2 17       	cp	r30, r18
    2282:	f3 07       	cpc	r31, r19
    2284:	09 f0       	breq	.+2      	; 0x2288 <effect_wormsqueeze+0x1d4>
    2286:	69 cf       	rjmp	.-302    	; 0x215a <effect_wormsqueeze+0xa6>
			}
		}
		
		delay_ms(delay);
	}
}
    2288:	66 96       	adiw	r28, 0x16	; 22
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	df 90       	pop	r13
    22a2:	cf 90       	pop	r12
    22a4:	bf 90       	pop	r11
    22a6:	af 90       	pop	r10
    22a8:	9f 90       	pop	r9
    22aa:	8f 90       	pop	r8
    22ac:	7f 90       	pop	r7
    22ae:	6f 90       	pop	r6
    22b0:	5f 90       	pop	r5
    22b2:	4f 90       	pop	r4
    22b4:	3f 90       	pop	r3
    22b6:	2f 90       	pop	r2
    22b8:	08 95       	ret

000022ba <effect_smileyspin>:

void effect_smileyspin (int count, int delay, char bitmap)
{
    22ba:	2f 92       	push	r2
    22bc:	3f 92       	push	r3
    22be:	4f 92       	push	r4
    22c0:	5f 92       	push	r5
    22c2:	6f 92       	push	r6
    22c4:	7f 92       	push	r7
    22c6:	8f 92       	push	r8
    22c8:	9f 92       	push	r9
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	cf 92       	push	r12
    22d0:	df 92       	push	r13
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	e4 97       	sbiw	r28, 0x34	; 52
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
    22ee:	20 e2       	ldi	r18, 0x20	; 32
    22f0:	e4 e6       	ldi	r30, 0x64	; 100
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	de 01       	movw	r26, r28
    22f6:	11 96       	adiw	r26, 0x01	; 1
    22f8:	01 90       	ld	r0, Z+
    22fa:	0d 92       	st	X+, r0
    22fc:	2a 95       	dec	r18
    22fe:	e1 f7       	brne	.-8      	; 0x22f8 <effect_smileyspin+0x3e>
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    2300:	18 16       	cp	r1, r24
    2302:	19 06       	cpc	r1, r25
    2304:	0c f4       	brge	.+2      	; 0x2308 <effect_smileyspin+0x4e>
    2306:	0f c2       	rjmp	.+1054   	; 0x2726 <effect_smileyspin+0x46c>
    2308:	2b c2       	rjmp	.+1110   	; 0x2760 <effect_smileyspin+0x4a6>
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
    230a:	61 14       	cp	r6, r1
    230c:	71 04       	cpc	r7, r1
    230e:	69 f4       	brne	.+26     	; 0x232a <effect_smileyspin+0x70>
				off++;
    2310:	2f ef       	ldi	r18, 0xFF	; 255
    2312:	42 1a       	sub	r4, r18
    2314:	52 0a       	sbc	r5, r18
				if (off == 4){
    2316:	34 e0       	ldi	r19, 0x04	; 4
    2318:	43 16       	cp	r4, r19
    231a:	51 04       	cpc	r5, r1
    231c:	49 f4       	brne	.+18     	; 0x2330 <effect_smileyspin+0x76>
					flip = 1;
					off = 0;
    231e:	49 a4       	ldd	r4, Y+41	; 0x29
    2320:	5a a4       	ldd	r5, Y+42	; 0x2a
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2322:	66 24       	eor	r6, r6
    2324:	63 94       	inc	r6
    2326:	71 2c       	mov	r7, r1
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <effect_smileyspin+0x76>
					off = 0;
				}
			} else {
				off++;
    232a:	8f ef       	ldi	r24, 0xFF	; 255
    232c:	48 1a       	sub	r4, r24
    232e:	58 0a       	sbc	r5, r24
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	84 19       	sub	r24, r4
    2336:	95 09       	sbc	r25, r5
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    2344:	52 01       	movw	r10, r4
    2346:	aa 0c       	add	r10, r10
    2348:	bb 1c       	adc	r11, r11
    234a:	aa 0c       	add	r10, r10
    234c:	bb 1c       	adc	r11, r11
    234e:	aa 0c       	add	r10, r10
    2350:	bb 1c       	adc	r11, r11
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2352:	c9 a4       	ldd	r12, Y+41	; 0x29
    2354:	da a4       	ldd	r13, Y+42	; 0x2a
    2356:	4f 96       	adiw	r24, 0x1f	; 31
    2358:	e1 e0       	ldi	r30, 0x01	; 1
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	ec 0f       	add	r30, r28
    235e:	fd 1f       	adc	r31, r29
    2360:	e8 0f       	add	r30, r24
    2362:	f9 1f       	adc	r31, r25
    2364:	fa a3       	std	Y+34, r31	; 0x22
    2366:	e9 a3       	std	Y+33, r30	; 0x21
    2368:	30 c0       	rjmp	.+96     	; 0x23ca <effect_smileyspin+0x110>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    236a:	40 2f       	mov	r20, r16
    236c:	69 2d       	mov	r22, r9
    236e:	82 2d       	mov	r24, r2
    2370:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <font_getbitmappixel>
    2374:	88 23       	and	r24, r24
    2376:	d1 f0       	breq	.+52     	; 0x23ac <effect_smileyspin+0xf2>
						if (!flip)
    2378:	61 14       	cp	r6, r1
    237a:	71 04       	cpc	r7, r1
    237c:	81 f4       	brne	.+32     	; 0x239e <effect_smileyspin+0xe4>
    237e:	f8 01       	movw	r30, r16
    2380:	ea 0d       	add	r30, r10
    2382:	fb 1d       	adc	r31, r11
    2384:	21 e0       	ldi	r18, 0x01	; 1
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	2c 0f       	add	r18, r28
    238a:	3d 1f       	adc	r19, r29
    238c:	e2 0f       	add	r30, r18
    238e:	f3 1f       	adc	r31, r19
							setvoxel(y,dybde[8 * off + d++],x);
    2390:	60 81       	ld	r22, Z
    2392:	70 e0       	ldi	r23, 0x00	; 0
    2394:	a6 01       	movw	r20, r12
    2396:	c8 01       	movw	r24, r16
    2398:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    239c:	07 c0       	rjmp	.+14     	; 0x23ac <effect_smileyspin+0xf2>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    239e:	f7 01       	movw	r30, r14
    23a0:	60 81       	ld	r22, Z
    23a2:	70 e0       	ldi	r23, 0x00	; 0
    23a4:	a6 01       	movw	r20, r12
    23a6:	c8 01       	movw	r24, r16
    23a8:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    23ac:	0f 5f       	subi	r16, 0xFF	; 255
    23ae:	1f 4f       	sbci	r17, 0xFF	; 255
    23b0:	f1 e0       	ldi	r31, 0x01	; 1
    23b2:	ef 1a       	sub	r14, r31
    23b4:	f1 08       	sbc	r15, r1
    23b6:	08 30       	cpi	r16, 0x08	; 8
    23b8:	11 05       	cpc	r17, r1
    23ba:	b9 f6       	brne	.-82     	; 0x236a <effect_smileyspin+0xb0>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    23bc:	2f ef       	ldi	r18, 0xFF	; 255
    23be:	c2 1a       	sub	r12, r18
    23c0:	d2 0a       	sbc	r13, r18
    23c2:	38 e0       	ldi	r19, 0x08	; 8
    23c4:	c3 16       	cp	r12, r19
    23c6:	d1 04       	cpc	r13, r1
    23c8:	39 f0       	breq	.+14     	; 0x23d8 <effect_smileyspin+0x11e>
    23ca:	e9 a0       	ldd	r14, Y+33	; 0x21
    23cc:	fa a0       	ldd	r15, Y+34	; 0x22
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    23ce:	08 2d       	mov	r16, r8
    23d0:	1d a1       	ldd	r17, Y+37	; 0x25
    23d2:	93 2c       	mov	r9, r3
    23d4:	9c 18       	sub	r9, r12
    23d6:	c9 cf       	rjmp	.-110    	; 0x236a <effect_smileyspin+0xb0>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    23d8:	1d a5       	ldd	r17, Y+45	; 0x2d
    23da:	0e a5       	ldd	r16, Y+46	; 0x2e
    23dc:	81 2f       	mov	r24, r17
    23de:	90 2f       	mov	r25, r16
    23e0:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			fill(0x00);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
    23ea:	8b a1       	ldd	r24, Y+35	; 0x23
    23ec:	9c a1       	ldd	r25, Y+36	; 0x24
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	9c a3       	std	Y+36, r25	; 0x24
    23f2:	8b a3       	std	Y+35, r24	; 0x23
	{
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
    23f4:	89 2b       	or	r24, r25
    23f6:	09 f0       	breq	.+2      	; 0x23fa <effect_smileyspin+0x140>
    23f8:	88 cf       	rjmp	.-240    	; 0x230a <effect_smileyspin+0x50>
    23fa:	1b a7       	std	Y+43, r17	; 0x2b
    23fc:	0c a7       	std	Y+44, r16	; 0x2c
    23fe:	97 e0       	ldi	r25, 0x07	; 7
    2400:	9f a3       	std	Y+39, r25	; 0x27
    2402:	18 a6       	std	Y+40, r1	; 0x28
    2404:	41 2c       	mov	r4, r1
    2406:	51 2c       	mov	r5, r1
    2408:	61 2c       	mov	r6, r1
    240a:	71 2c       	mov	r7, r1
    240c:	8a a8       	ldd	r8, Y+50	; 0x32
		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    240e:	61 14       	cp	r6, r1
    2410:	71 04       	cpc	r7, r1
    2412:	69 f4       	brne	.+26     	; 0x242e <effect_smileyspin+0x174>
				off++;
    2414:	ef ef       	ldi	r30, 0xFF	; 255
    2416:	4e 1a       	sub	r4, r30
    2418:	5e 0a       	sbc	r5, r30
				if (off == 4){
    241a:	f4 e0       	ldi	r31, 0x04	; 4
    241c:	4f 16       	cp	r4, r31
    241e:	51 04       	cpc	r5, r1
    2420:	49 f4       	brne	.+18     	; 0x2434 <effect_smileyspin+0x17a>
					flip = 1;
					off = 0;
    2422:	49 a4       	ldd	r4, Y+41	; 0x29
    2424:	5a a4       	ldd	r5, Y+42	; 0x2a
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2426:	66 24       	eor	r6, r6
    2428:	63 94       	inc	r6
    242a:	71 2c       	mov	r7, r1
    242c:	03 c0       	rjmp	.+6      	; 0x2434 <effect_smileyspin+0x17a>
					off = 0;
				}
			} else {
				off++;
    242e:	2f ef       	ldi	r18, 0xFF	; 255
    2430:	42 1a       	sub	r4, r18
    2432:	52 0a       	sbc	r5, r18
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	84 19       	sub	r24, r4
    243a:	95 09       	sbc	r25, r5
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2448:	a9 a4       	ldd	r10, Y+41	; 0x29
    244a:	ba a4       	ldd	r11, Y+42	; 0x2a
    244c:	4f 96       	adiw	r24, 0x1f	; 31
    244e:	e1 e0       	ldi	r30, 0x01	; 1
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	ec 0f       	add	r30, r28
    2454:	fd 1f       	adc	r31, r29
    2456:	e8 0f       	add	r30, r24
    2458:	f9 1f       	adc	r31, r25
    245a:	fa a3       	std	Y+34, r31	; 0x22
    245c:	e9 a3       	std	Y+33, r30	; 0x21
    245e:	c2 01       	movw	r24, r4
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	21 e0       	ldi	r18, 0x01	; 1
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	2c 0f       	add	r18, r28
    2472:	3d 1f       	adc	r19, r29
    2474:	28 0f       	add	r18, r24
    2476:	39 1f       	adc	r19, r25
    2478:	3c a3       	std	Y+36, r19	; 0x24
    247a:	2b a3       	std	Y+35, r18	; 0x23
    247c:	2d c0       	rjmp	.+90     	; 0x24d8 <effect_smileyspin+0x21e>
    247e:	43 2d       	mov	r20, r3
    2480:	40 1b       	sub	r20, r16
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    2482:	69 2d       	mov	r22, r9
    2484:	82 2d       	mov	r24, r2
    2486:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <font_getbitmappixel>
    248a:	88 23       	and	r24, r24
    248c:	91 f0       	breq	.+36     	; 0x24b2 <effect_smileyspin+0x1f8>
						if (!flip)
    248e:	61 14       	cp	r6, r1
    2490:	71 04       	cpc	r7, r1
    2492:	41 f4       	brne	.+16     	; 0x24a4 <effect_smileyspin+0x1ea>
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    2494:	f7 01       	movw	r30, r14
    2496:	80 81       	ld	r24, Z
    2498:	a5 01       	movw	r20, r10
    249a:	b8 01       	movw	r22, r16
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    24a2:	07 c0       	rjmp	.+14     	; 0x24b2 <effect_smileyspin+0x1f8>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    24a4:	f6 01       	movw	r30, r12
    24a6:	80 81       	ld	r24, Z
    24a8:	a5 01       	movw	r20, r10
    24aa:	b8 01       	movw	r22, r16
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    24b2:	01 50       	subi	r16, 0x01	; 1
    24b4:	11 09       	sbc	r17, r1
    24b6:	f1 e0       	ldi	r31, 0x01	; 1
    24b8:	cf 1a       	sub	r12, r31
    24ba:	d1 08       	sbc	r13, r1
    24bc:	2f ef       	ldi	r18, 0xFF	; 255
    24be:	e2 1a       	sub	r14, r18
    24c0:	f2 0a       	sbc	r15, r18
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    24c2:	0f 3f       	cpi	r16, 0xFF	; 255
    24c4:	3f ef       	ldi	r19, 0xFF	; 255
    24c6:	13 07       	cpc	r17, r19
    24c8:	d1 f6       	brne	.-76     	; 0x247e <effect_smileyspin+0x1c4>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    24ca:	8f ef       	ldi	r24, 0xFF	; 255
    24cc:	a8 1a       	sub	r10, r24
    24ce:	b8 0a       	sbc	r11, r24
    24d0:	98 e0       	ldi	r25, 0x08	; 8
    24d2:	a9 16       	cp	r10, r25
    24d4:	b1 04       	cpc	r11, r1
    24d6:	49 f0       	breq	.+18     	; 0x24ea <effect_smileyspin+0x230>
    24d8:	c9 a0       	ldd	r12, Y+33	; 0x21
    24da:	da a0       	ldd	r13, Y+34	; 0x22
    24dc:	eb a0       	ldd	r14, Y+35	; 0x23
    24de:	fc a0       	ldd	r15, Y+36	; 0x24
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    24e0:	0e a1       	ldd	r16, Y+38	; 0x26
    24e2:	18 2d       	mov	r17, r8
    24e4:	93 2c       	mov	r9, r3
    24e6:	9a 18       	sub	r9, r10
    24e8:	ca cf       	rjmp	.-108    	; 0x247e <effect_smileyspin+0x1c4>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    24ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ee:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			fill(0x00);
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
    24f8:	ef a1       	ldd	r30, Y+39	; 0x27
    24fa:	f8 a5       	ldd	r31, Y+40	; 0x28
    24fc:	31 97       	sbiw	r30, 0x01	; 1
    24fe:	f8 a7       	std	Y+40, r31	; 0x28
    2500:	ef a3       	std	Y+39, r30	; 0x27

		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    2502:	ef 2b       	or	r30, r31
    2504:	09 f0       	breq	.+2      	; 0x2508 <effect_smileyspin+0x24e>
    2506:	83 cf       	rjmp	.-250    	; 0x240e <effect_smileyspin+0x154>
    2508:	f7 e0       	ldi	r31, 0x07	; 7
    250a:	fb a3       	std	Y+35, r31	; 0x23
    250c:	1c a2       	std	Y+36, r1	; 0x24
    250e:	41 2c       	mov	r4, r1
    2510:	51 2c       	mov	r5, r1
    2512:	61 2c       	mov	r6, r1
    2514:	71 2c       	mov	r7, r1
    2516:	89 a8       	ldd	r8, Y+49	; 0x31
		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
    2518:	61 14       	cp	r6, r1
    251a:	71 04       	cpc	r7, r1
    251c:	69 f4       	brne	.+26     	; 0x2538 <effect_smileyspin+0x27e>
				off++;
    251e:	2f ef       	ldi	r18, 0xFF	; 255
    2520:	42 1a       	sub	r4, r18
    2522:	52 0a       	sbc	r5, r18
				if (off == 4){
    2524:	34 e0       	ldi	r19, 0x04	; 4
    2526:	43 16       	cp	r4, r19
    2528:	51 04       	cpc	r5, r1
    252a:	49 f4       	brne	.+18     	; 0x253e <effect_smileyspin+0x284>
					flip = 1;
					off = 0;
    252c:	49 a4       	ldd	r4, Y+41	; 0x29
    252e:	5a a4       	ldd	r5, Y+42	; 0x2a
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2530:	66 24       	eor	r6, r6
    2532:	63 94       	inc	r6
    2534:	71 2c       	mov	r7, r1
    2536:	03 c0       	rjmp	.+6      	; 0x253e <effect_smileyspin+0x284>
					off = 0;
				}
			} else {
				off++;
    2538:	8f ef       	ldi	r24, 0xFF	; 255
    253a:	48 1a       	sub	r4, r24
    253c:	58 0a       	sbc	r5, r24
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	84 19       	sub	r24, r4
    2544:	95 09       	sbc	r25, r5
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    2552:	52 01       	movw	r10, r4
    2554:	aa 0c       	add	r10, r10
    2556:	bb 1c       	adc	r11, r11
    2558:	aa 0c       	add	r10, r10
    255a:	bb 1c       	adc	r11, r11
    255c:	aa 0c       	add	r10, r10
    255e:	bb 1c       	adc	r11, r11
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2560:	c9 a4       	ldd	r12, Y+41	; 0x29
    2562:	da a4       	ldd	r13, Y+42	; 0x2a
    2564:	4f 96       	adiw	r24, 0x1f	; 31
    2566:	e1 e0       	ldi	r30, 0x01	; 1
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	ec 0f       	add	r30, r28
    256c:	fd 1f       	adc	r31, r29
    256e:	e8 0f       	add	r30, r24
    2570:	f9 1f       	adc	r31, r25
    2572:	fa a3       	std	Y+34, r31	; 0x22
    2574:	e9 a3       	std	Y+33, r30	; 0x21
    2576:	31 c0       	rjmp	.+98     	; 0x25da <effect_smileyspin+0x320>
    2578:	43 2d       	mov	r20, r3
    257a:	40 1b       	sub	r20, r16
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    257c:	69 2d       	mov	r22, r9
    257e:	82 2d       	mov	r24, r2
    2580:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <font_getbitmappixel>
    2584:	88 23       	and	r24, r24
    2586:	d1 f0       	breq	.+52     	; 0x25bc <effect_smileyspin+0x302>
						if (!flip)
    2588:	61 14       	cp	r6, r1
    258a:	71 04       	cpc	r7, r1
    258c:	81 f4       	brne	.+32     	; 0x25ae <effect_smileyspin+0x2f4>
    258e:	f8 01       	movw	r30, r16
    2590:	ea 0d       	add	r30, r10
    2592:	fb 1d       	adc	r31, r11
    2594:	21 e0       	ldi	r18, 0x01	; 1
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	2c 0f       	add	r18, r28
    259a:	3d 1f       	adc	r19, r29
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
							setvoxel(y,dybde[8 * off + d++],x);
    25a0:	60 81       	ld	r22, Z
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	a6 01       	movw	r20, r12
    25a6:	c8 01       	movw	r24, r16
    25a8:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    25ac:	07 c0       	rjmp	.+14     	; 0x25bc <effect_smileyspin+0x302>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    25ae:	f7 01       	movw	r30, r14
    25b0:	60 81       	ld	r22, Z
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	a6 01       	movw	r20, r12
    25b6:	c8 01       	movw	r24, r16
    25b8:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    25bc:	0f 5f       	subi	r16, 0xFF	; 255
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	f1 e0       	ldi	r31, 0x01	; 1
    25c2:	ef 1a       	sub	r14, r31
    25c4:	f1 08       	sbc	r15, r1
    25c6:	08 30       	cpi	r16, 0x08	; 8
    25c8:	11 05       	cpc	r17, r1
    25ca:	b1 f6       	brne	.-84     	; 0x2578 <effect_smileyspin+0x2be>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    25cc:	2f ef       	ldi	r18, 0xFF	; 255
    25ce:	c2 1a       	sub	r12, r18
    25d0:	d2 0a       	sbc	r13, r18
    25d2:	38 e0       	ldi	r19, 0x08	; 8
    25d4:	c3 16       	cp	r12, r19
    25d6:	d1 04       	cpc	r13, r1
    25d8:	39 f0       	breq	.+14     	; 0x25e8 <effect_smileyspin+0x32e>
    25da:	e9 a0       	ldd	r14, Y+33	; 0x21
    25dc:	fa a0       	ldd	r15, Y+34	; 0x22
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    25de:	08 2d       	mov	r16, r8
    25e0:	1d a1       	ldd	r17, Y+37	; 0x25
    25e2:	93 2c       	mov	r9, r3
    25e4:	9c 18       	sub	r9, r12
    25e6:	c8 cf       	rjmp	.-112    	; 0x2578 <effect_smileyspin+0x2be>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    25e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    25ec:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			fill(0x00);
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
    25f6:	8b a1       	ldd	r24, Y+35	; 0x23
    25f8:	9c a1       	ldd	r25, Y+36	; 0x24
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	9c a3       	std	Y+36, r25	; 0x24
    25fe:	8b a3       	std	Y+35, r24	; 0x23

		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
    2600:	89 2b       	or	r24, r25
    2602:	09 f0       	breq	.+2      	; 0x2606 <effect_smileyspin+0x34c>
    2604:	89 cf       	rjmp	.-238    	; 0x2518 <effect_smileyspin+0x25e>
    2606:	97 e0       	ldi	r25, 0x07	; 7
    2608:	9f a3       	std	Y+39, r25	; 0x27
    260a:	18 a6       	std	Y+40, r1	; 0x28
    260c:	41 2c       	mov	r4, r1
    260e:	51 2c       	mov	r5, r1
    2610:	61 2c       	mov	r6, r1
    2612:	71 2c       	mov	r7, r1
    2614:	8a a8       	ldd	r8, Y+50	; 0x32
		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    2616:	61 14       	cp	r6, r1
    2618:	71 04       	cpc	r7, r1
    261a:	69 f4       	brne	.+26     	; 0x2636 <effect_smileyspin+0x37c>
				off++;
    261c:	ef ef       	ldi	r30, 0xFF	; 255
    261e:	4e 1a       	sub	r4, r30
    2620:	5e 0a       	sbc	r5, r30
				if (off == 4){
    2622:	f4 e0       	ldi	r31, 0x04	; 4
    2624:	4f 16       	cp	r4, r31
    2626:	51 04       	cpc	r5, r1
    2628:	49 f4       	brne	.+18     	; 0x263c <effect_smileyspin+0x382>
					flip = 1;
					off = 0;
    262a:	49 a4       	ldd	r4, Y+41	; 0x29
    262c:	5a a4       	ldd	r5, Y+42	; 0x2a
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    262e:	66 24       	eor	r6, r6
    2630:	63 94       	inc	r6
    2632:	71 2c       	mov	r7, r1
    2634:	03 c0       	rjmp	.+6      	; 0x263c <effect_smileyspin+0x382>
					off = 0;
				}
			} else {
				off++;
    2636:	2f ef       	ldi	r18, 0xFF	; 255
    2638:	42 1a       	sub	r4, r18
    263a:	52 0a       	sbc	r5, r18
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	84 19       	sub	r24, r4
    2642:	95 09       	sbc	r25, r5
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	88 0f       	add	r24, r24
    264a:	99 1f       	adc	r25, r25
    264c:	88 0f       	add	r24, r24
    264e:	99 1f       	adc	r25, r25
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2650:	a9 a4       	ldd	r10, Y+41	; 0x29
    2652:	ba a4       	ldd	r11, Y+42	; 0x2a
    2654:	4f 96       	adiw	r24, 0x1f	; 31
    2656:	e1 e0       	ldi	r30, 0x01	; 1
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	ec 0f       	add	r30, r28
    265c:	fd 1f       	adc	r31, r29
    265e:	e8 0f       	add	r30, r24
    2660:	f9 1f       	adc	r31, r25
    2662:	fa a3       	std	Y+34, r31	; 0x22
    2664:	e9 a3       	std	Y+33, r30	; 0x21
    2666:	c2 01       	movw	r24, r4
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	21 e0       	ldi	r18, 0x01	; 1
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	2c 0f       	add	r18, r28
    267a:	3d 1f       	adc	r19, r29
    267c:	28 0f       	add	r18, r24
    267e:	39 1f       	adc	r19, r25
    2680:	3c a3       	std	Y+36, r19	; 0x24
    2682:	2b a3       	std	Y+35, r18	; 0x23
    2684:	2c c0       	rjmp	.+88     	; 0x26de <effect_smileyspin+0x424>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    2686:	40 2f       	mov	r20, r16
    2688:	69 2d       	mov	r22, r9
    268a:	82 2d       	mov	r24, r2
    268c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <font_getbitmappixel>
    2690:	88 23       	and	r24, r24
    2692:	91 f0       	breq	.+36     	; 0x26b8 <effect_smileyspin+0x3fe>
						if (!flip)
    2694:	61 14       	cp	r6, r1
    2696:	71 04       	cpc	r7, r1
    2698:	41 f4       	brne	.+16     	; 0x26aa <effect_smileyspin+0x3f0>
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    269a:	f7 01       	movw	r30, r14
    269c:	80 81       	ld	r24, Z
    269e:	a5 01       	movw	r20, r10
    26a0:	b8 01       	movw	r22, r16
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    26a8:	07 c0       	rjmp	.+14     	; 0x26b8 <effect_smileyspin+0x3fe>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    26aa:	f6 01       	movw	r30, r12
    26ac:	80 81       	ld	r24, Z
    26ae:	a5 01       	movw	r20, r10
    26b0:	b8 01       	movw	r22, r16
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    26b8:	01 50       	subi	r16, 0x01	; 1
    26ba:	11 09       	sbc	r17, r1
    26bc:	f1 e0       	ldi	r31, 0x01	; 1
    26be:	cf 1a       	sub	r12, r31
    26c0:	d1 08       	sbc	r13, r1
    26c2:	2f ef       	ldi	r18, 0xFF	; 255
    26c4:	e2 1a       	sub	r14, r18
    26c6:	f2 0a       	sbc	r15, r18
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    26c8:	0f 3f       	cpi	r16, 0xFF	; 255
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	13 07       	cpc	r17, r19
    26ce:	d9 f6       	brne	.-74     	; 0x2686 <effect_smileyspin+0x3cc>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    26d0:	8f ef       	ldi	r24, 0xFF	; 255
    26d2:	a8 1a       	sub	r10, r24
    26d4:	b8 0a       	sbc	r11, r24
    26d6:	98 e0       	ldi	r25, 0x08	; 8
    26d8:	a9 16       	cp	r10, r25
    26da:	b1 04       	cpc	r11, r1
    26dc:	49 f0       	breq	.+18     	; 0x26f0 <effect_smileyspin+0x436>
    26de:	c9 a0       	ldd	r12, Y+33	; 0x21
    26e0:	da a0       	ldd	r13, Y+34	; 0x22
    26e2:	eb a0       	ldd	r14, Y+35	; 0x23
    26e4:	fc a0       	ldd	r15, Y+36	; 0x24
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    26e6:	0e a1       	ldd	r16, Y+38	; 0x26
    26e8:	18 2d       	mov	r17, r8
    26ea:	93 2c       	mov	r9, r3
    26ec:	9a 18       	sub	r9, r10
    26ee:	cb cf       	rjmp	.-106    	; 0x2686 <effect_smileyspin+0x3cc>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    26f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f4:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			fill(0x00);
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
    26fe:	ef a1       	ldd	r30, Y+39	; 0x27
    2700:	f8 a5       	ldd	r31, Y+40	; 0x28
    2702:	31 97       	sbiw	r30, 0x01	; 1
    2704:	f8 a7       	std	Y+40, r31	; 0x28
    2706:	ef a3       	std	Y+39, r30	; 0x27

		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    2708:	ef 2b       	or	r30, r31
    270a:	09 f0       	breq	.+2      	; 0x270e <effect_smileyspin+0x454>
    270c:	84 cf       	rjmp	.-248    	; 0x2616 <effect_smileyspin+0x35c>
{
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    270e:	2f a5       	ldd	r18, Y+47	; 0x2f
    2710:	38 a9       	ldd	r19, Y+48	; 0x30
    2712:	2f 5f       	subi	r18, 0xFF	; 255
    2714:	3f 4f       	sbci	r19, 0xFF	; 255
    2716:	38 ab       	std	Y+48, r19	; 0x30
    2718:	2f a7       	std	Y+47, r18	; 0x2f
    271a:	8b a9       	ldd	r24, Y+51	; 0x33
    271c:	9c a9       	ldd	r25, Y+52	; 0x34
    271e:	28 17       	cp	r18, r24
    2720:	39 07       	cpc	r19, r25
    2722:	a9 f4       	brne	.+42     	; 0x274e <effect_smileyspin+0x494>
    2724:	1d c0       	rjmp	.+58     	; 0x2760 <effect_smileyspin+0x4a6>
    2726:	24 2e       	mov	r2, r20
    2728:	9c ab       	std	Y+52, r25	; 0x34
    272a:	8b ab       	std	Y+51, r24	; 0x33
    272c:	18 aa       	std	Y+48, r1	; 0x30
    272e:	1f a6       	std	Y+47, r1	; 0x2f
    2730:	0f 2e       	mov	r0, r31
    2732:	f7 e0       	ldi	r31, 0x07	; 7
    2734:	3f 2e       	mov	r3, r31
    2736:	f0 2d       	mov	r31, r0
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2738:	19 a6       	std	Y+41, r1	; 0x29
    273a:	1a a6       	std	Y+42, r1	; 0x2a
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    273c:	6d a7       	std	Y+45, r22	; 0x2d
    273e:	7e a7       	std	Y+46, r23	; 0x2e
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	99 ab       	std	Y+49, r25	; 0x31
    2744:	e0 e0       	ldi	r30, 0x00	; 0
    2746:	ed a3       	std	Y+37, r30	; 0x25
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2748:	f7 e0       	ldi	r31, 0x07	; 7
    274a:	fe a3       	std	Y+38, r31	; 0x26
    274c:	1a aa       	std	Y+50, r1	; 0x32
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
{
    274e:	27 e0       	ldi	r18, 0x07	; 7
    2750:	2b a3       	std	Y+35, r18	; 0x23
    2752:	1c a2       	std	Y+36, r1	; 0x24
    2754:	41 2c       	mov	r4, r1
    2756:	51 2c       	mov	r5, r1
    2758:	61 2c       	mov	r6, r1
    275a:	71 2c       	mov	r7, r1
    275c:	89 a8       	ldd	r8, Y+49	; 0x31
    275e:	d5 cd       	rjmp	.-1110   	; 0x230a <effect_smileyspin+0x50>
			delay_ms(delay);
			fill(0x00);
		}

	}
}
    2760:	e4 96       	adiw	r28, 0x34	; 52
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	df 90       	pop	r13
    277a:	cf 90       	pop	r12
    277c:	bf 90       	pop	r11
    277e:	af 90       	pop	r10
    2780:	9f 90       	pop	r9
    2782:	8f 90       	pop	r8
    2784:	7f 90       	pop	r7
    2786:	6f 90       	pop	r6
    2788:	5f 90       	pop	r5
    278a:	4f 90       	pop	r4
    278c:	3f 90       	pop	r3
    278e:	2f 90       	pop	r2
    2790:	08 95       	ret

00002792 <effect_pathmove>:


void effect_pathmove (unsigned char *path, int length)
{
    2792:	8f 92       	push	r8
    2794:	9f 92       	push	r9
    2796:	af 92       	push	r10
    2798:	bf 92       	push	r11
    279a:	cf 92       	push	r12
    279c:	df 92       	push	r13
    279e:	ef 92       	push	r14
    27a0:	ff 92       	push	r15
    27a2:	0f 93       	push	r16
    27a4:	1f 93       	push	r17
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	5c 01       	movw	r10, r24
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
    27ac:	8b 01       	movw	r16, r22
    27ae:	01 50       	subi	r16, 0x01	; 1
    27b0:	11 09       	sbc	r17, r1
    27b2:	10 16       	cp	r1, r16
    27b4:	11 06       	cpc	r1, r17
    27b6:	0c f0       	brlt	.+2      	; 0x27ba <effect_pathmove+0x28>
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <effect_pathmove+0xa6>
    27ba:	08 0f       	add	r16, r24
    27bc:	19 1f       	adc	r17, r25
    27be:	6c 01       	movw	r12, r24
	}
}


void effect_pathmove (unsigned char *path, int length)
{
    27c0:	81 2c       	mov	r8, r1
    27c2:	91 2c       	mov	r9, r1
    27c4:	22 c0       	rjmp	.+68     	; 0x280a <effect_pathmove+0x78>
	for (i=(length-1);i>=1;i--)
	{
		for (z=0;z<8;z++)
		{
		
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
    27c6:	f7 01       	movw	r30, r14
    27c8:	80 81       	ld	r24, Z
    27ca:	68 2f       	mov	r22, r24
    27cc:	6f 70       	andi	r22, 0x0F	; 15
    27ce:	70 e0       	ldi	r23, 0x00	; 0
    27d0:	82 95       	swap	r24
    27d2:	8f 70       	andi	r24, 0x0F	; 15
    27d4:	ae 01       	movw	r20, r28
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <getvoxel>
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
    27dc:	f8 01       	movw	r30, r16
    27de:	90 81       	ld	r25, Z
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	69 2f       	mov	r22, r25
    27e6:	6f 70       	andi	r22, 0x0F	; 15
    27e8:	70 e0       	ldi	r23, 0x00	; 0
    27ea:	89 2f       	mov	r24, r25
    27ec:	82 95       	swap	r24
    27ee:	8f 70       	andi	r24, 0x0F	; 15
    27f0:	ae 01       	movw	r20, r28
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <altervoxel>
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
	{
		for (z=0;z<8;z++)
    27f8:	21 96       	adiw	r28, 0x01	; 1
    27fa:	c8 30       	cpi	r28, 0x08	; 8
    27fc:	d1 05       	cpc	r29, r1
    27fe:	19 f7       	brne	.-58     	; 0x27c6 <effect_pathmove+0x34>
    2800:	01 50       	subi	r16, 0x01	; 1
    2802:	11 09       	sbc	r17, r1
void effect_pathmove (unsigned char *path, int length)
{
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
    2804:	0c 15       	cp	r16, r12
    2806:	1d 05       	cpc	r17, r13
    2808:	b9 f0       	breq	.+46     	; 0x2838 <effect_pathmove+0xa6>
	}
}


void effect_pathmove (unsigned char *path, int length)
{
    280a:	c8 2d       	mov	r28, r8
    280c:	d9 2d       	mov	r29, r9
    280e:	78 01       	movw	r14, r16
    2810:	e1 e0       	ldi	r30, 0x01	; 1
    2812:	ee 1a       	sub	r14, r30
    2814:	f1 08       	sbc	r15, r1
    2816:	d7 cf       	rjmp	.-82     	; 0x27c6 <effect_pathmove+0x34>
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++)
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
    2818:	f5 01       	movw	r30, r10
    281a:	80 81       	ld	r24, Z
    281c:	68 2f       	mov	r22, r24
    281e:	6f 70       	andi	r22, 0x0F	; 15
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	82 95       	swap	r24
    2824:	8f 70       	andi	r24, 0x0F	; 15
    2826:	ae 01       	movw	r20, r28
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
		
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++)
    282e:	21 96       	adiw	r28, 0x01	; 1
    2830:	c8 30       	cpi	r28, 0x08	; 8
    2832:	d1 05       	cpc	r29, r1
    2834:	89 f7       	brne	.-30     	; 0x2818 <effect_pathmove+0x86>
    2836:	03 c0       	rjmp	.+6      	; 0x283e <effect_pathmove+0xac>
	}
}


void effect_pathmove (unsigned char *path, int length)
{
    2838:	c0 e0       	ldi	r28, 0x00	; 0
    283a:	d0 e0       	ldi	r29, 0x00	; 0
    283c:	ed cf       	rjmp	.-38     	; 0x2818 <effect_pathmove+0x86>
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++)
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
}
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	bf 90       	pop	r11
    2850:	af 90       	pop	r10
    2852:	9f 90       	pop	r9
    2854:	8f 90       	pop	r8
    2856:	08 95       	ret

00002858 <effect_rand_patharound>:

void effect_rand_patharound (int iterations, int delay)
{
    2858:	4f 92       	push	r4
    285a:	5f 92       	push	r5
    285c:	6f 92       	push	r6
    285e:	7f 92       	push	r7
    2860:	8f 92       	push	r8
    2862:	9f 92       	push	r9
    2864:	af 92       	push	r10
    2866:	bf 92       	push	r11
    2868:	cf 92       	push	r12
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	6c 97       	sbiw	r28, 0x1c	; 28
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	7c 01       	movw	r14, r24
    288a:	6b 01       	movw	r12, r22
	int z, dz, i;
	z = 4;
	unsigned char path[28];
	
	font_getpath(0,path,28);
    288c:	4c e1       	ldi	r20, 0x1C	; 28
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	be 01       	movw	r22, r28
    2892:	6f 5f       	subi	r22, 0xFF	; 255
    2894:	7f 4f       	sbci	r23, 0xFF	; 255
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	0e 94 49 16 	call	0x2c92	; 0x2c92 <font_getpath>
	
	for (i = 0; i < iterations; i++)
    289c:	1e 14       	cp	r1, r14
    289e:	1f 04       	cpc	r1, r15
    28a0:	dc f5       	brge	.+118    	; 0x2918 <effect_rand_patharound+0xc0>
    28a2:	00 e0       	ldi	r16, 0x00	; 0
    28a4:	10 e0       	ldi	r17, 0x00	; 0
    28a6:	68 94       	set
    28a8:	88 24       	eor	r8, r8
    28aa:	82 f8       	bld	r8, 2
    28ac:	91 2c       	mov	r9, r1
	{
		dz = ((rand()%3)-1);
    28ae:	0f 2e       	mov	r0, r31
    28b0:	f3 e0       	ldi	r31, 0x03	; 3
    28b2:	af 2e       	mov	r10, r31
    28b4:	b1 2c       	mov	r11, r1
    28b6:	f0 2d       	mov	r31, r0
    28b8:	0f 2e       	mov	r0, r31
    28ba:	f7 e0       	ldi	r31, 0x07	; 7
    28bc:	6f 2e       	mov	r6, r31
    28be:	f0 2d       	mov	r31, r0
    28c0:	71 2c       	mov	r7, r1
    28c2:	41 2c       	mov	r4, r1
    28c4:	51 2c       	mov	r5, r1
    28c6:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    28ca:	b5 01       	movw	r22, r10
    28cc:	0e 94 17 19 	call	0x322e	; 0x322e <__divmodhi4>
    28d0:	ac 01       	movw	r20, r24
    28d2:	41 50       	subi	r20, 0x01	; 1
    28d4:	51 09       	sbc	r21, r1
		z += dz;
    28d6:	48 0d       	add	r20, r8
    28d8:	59 1d       	adc	r21, r9
    28da:	48 30       	cpi	r20, 0x08	; 8
    28dc:	51 05       	cpc	r21, r1
    28de:	14 f0       	brlt	.+4      	; 0x28e4 <effect_rand_patharound+0x8c>
    28e0:	46 2d       	mov	r20, r6
    28e2:	57 2d       	mov	r21, r7
    28e4:	4a 01       	movw	r8, r20
    28e6:	55 23       	and	r21, r21
    28e8:	14 f4       	brge	.+4      	; 0x28ee <effect_rand_patharound+0x96>
    28ea:	84 2c       	mov	r8, r4
    28ec:	95 2c       	mov	r9, r5
			z = 7;
			
		if (z<0)
			z = 0;
		
		effect_pathmove(path, 28);
    28ee:	6c e1       	ldi	r22, 0x1C	; 28
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	ce 01       	movw	r24, r28
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	0e 94 c9 13 	call	0x2792	; 0x2792 <effect_pathmove>
		setvoxel(0,7,z);
    28fa:	a4 01       	movw	r20, r8
    28fc:	66 2d       	mov	r22, r6
    28fe:	77 2d       	mov	r23, r7
    2900:	84 2d       	mov	r24, r4
    2902:	95 2d       	mov	r25, r5
    2904:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
		delay_ms(delay);
    2908:	c6 01       	movw	r24, r12
    290a:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
	z = 4;
	unsigned char path[28];
	
	font_getpath(0,path,28);
	
	for (i = 0; i < iterations; i++)
    290e:	0f 5f       	subi	r16, 0xFF	; 255
    2910:	1f 4f       	sbci	r17, 0xFF	; 255
    2912:	0e 15       	cp	r16, r14
    2914:	1f 05       	cpc	r17, r15
    2916:	b9 f6       	brne	.-82     	; 0x28c6 <effect_rand_patharound+0x6e>
		
		effect_pathmove(path, 28);
		setvoxel(0,7,z);
		delay_ms(delay);
	}
}
    2918:	6c 96       	adiw	r28, 0x1c	; 28
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	df 90       	pop	r13
    2932:	cf 90       	pop	r12
    2934:	bf 90       	pop	r11
    2936:	af 90       	pop	r10
    2938:	9f 90       	pop	r9
    293a:	8f 90       	pop	r8
    293c:	7f 90       	pop	r7
    293e:	6f 90       	pop	r6
    2940:	5f 90       	pop	r5
    2942:	4f 90       	pop	r4
    2944:	08 95       	ret

00002946 <effect_pathspiral>:

void effect_pathspiral (int iterations, int delay)
{
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	60 97       	sbiw	r28, 0x10	; 16
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	7c 01       	movw	r14, r24
    2968:	6b 01       	movw	r12, r22
	int i;
	
	unsigned char path[16];
	
	font_getpath(1,path,16);
    296a:	40 e1       	ldi	r20, 0x10	; 16
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	be 01       	movw	r22, r28
    2970:	6f 5f       	subi	r22, 0xFF	; 255
    2972:	7f 4f       	sbci	r23, 0xFF	; 255
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	0e 94 49 16 	call	0x2c92	; 0x2c92 <font_getpath>
	
	for (i = 0; i < iterations; i++)
    297a:	1e 14       	cp	r1, r14
    297c:	1f 04       	cpc	r1, r15
    297e:	0c f5       	brge	.+66     	; 0x29c2 <effect_pathspiral+0x7c>
    2980:	00 e0       	ldi	r16, 0x00	; 0
    2982:	10 e0       	ldi	r17, 0x00	; 0
	{
		setvoxel(4,0,i%8);
    2984:	a8 01       	movw	r20, r16
    2986:	47 70       	andi	r20, 0x07	; 7
    2988:	50 78       	andi	r21, 0x80	; 128
    298a:	55 23       	and	r21, r21
    298c:	34 f4       	brge	.+12     	; 0x299a <effect_pathspiral+0x54>
    298e:	41 50       	subi	r20, 0x01	; 1
    2990:	51 09       	sbc	r21, r1
    2992:	48 6f       	ori	r20, 0xF8	; 248
    2994:	5f 6f       	ori	r21, 0xFF	; 255
    2996:	4f 5f       	subi	r20, 0xFF	; 255
    2998:	5f 4f       	sbci	r21, 0xFF	; 255
    299a:	60 e0       	ldi	r22, 0x00	; 0
    299c:	70 e0       	ldi	r23, 0x00	; 0
    299e:	84 e0       	ldi	r24, 0x04	; 4
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
		delay_ms(delay);
    29a6:	c6 01       	movw	r24, r12
    29a8:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
		effect_pathmove(path, 28);
    29ac:	6c e1       	ldi	r22, 0x1C	; 28
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    29b0:	ce 01       	movw	r24, r28
    29b2:	01 96       	adiw	r24, 0x01	; 1
    29b4:	0e 94 c9 13 	call	0x2792	; 0x2792 <effect_pathmove>
	
	unsigned char path[16];
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++)
    29b8:	0f 5f       	subi	r16, 0xFF	; 255
    29ba:	1f 4f       	sbci	r17, 0xFF	; 255
    29bc:	0e 15       	cp	r16, r14
    29be:	1f 05       	cpc	r17, r15
    29c0:	09 f7       	brne	.-62     	; 0x2984 <effect_pathspiral+0x3e>
		setvoxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
		
	}
}
    29c2:	60 96       	adiw	r28, 0x10	; 16
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	de bf       	out	0x3e, r29	; 62
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	ff 90       	pop	r15
    29d8:	ef 90       	pop	r14
    29da:	df 90       	pop	r13
    29dc:	cf 90       	pop	r12
    29de:	08 95       	ret

000029e0 <effect_path_text>:

void effect_path_text (int delay, char *str)
{
    29e0:	2f 92       	push	r2
    29e2:	3f 92       	push	r3
    29e4:	4f 92       	push	r4
    29e6:	5f 92       	push	r5
    29e8:	6f 92       	push	r6
    29ea:	7f 92       	push	r7
    29ec:	8f 92       	push	r8
    29ee:	9f 92       	push	r9
    29f0:	af 92       	push	r10
    29f2:	bf 92       	push	r11
    29f4:	cf 92       	push	r12
    29f6:	df 92       	push	r13
    29f8:	ef 92       	push	r14
    29fa:	ff 92       	push	r15
    29fc:	0f 93       	push	r16
    29fe:	1f 93       	push	r17
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	a5 97       	sbiw	r28, 0x25	; 37
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	8a a3       	std	Y+34, r24	; 0x22
    2a16:	9b a3       	std	Y+35, r25	; 0x23
    2a18:	8b 01       	movw	r16, r22
	int z, i,ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
    2a1a:	4c e1       	ldi	r20, 0x1C	; 28
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	be 01       	movw	r22, r28
    2a20:	6f 5f       	subi	r22, 0xFF	; 255
    2a22:	7f 4f       	sbci	r23, 0xFF	; 255
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	0e 94 49 16 	call	0x2c92	; 0x2c92 <font_getpath>
	
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str)
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	80 81       	ld	r24, Z
    2a2e:	88 23       	and	r24, r24
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <effect_path_text+0x54>
    2a32:	6e c0       	rjmp	.+220    	; 0x2b10 <effect_path_text+0x130>
    2a34:	98 01       	movw	r18, r16
    2a36:	2f 5f       	subi	r18, 0xFF	; 255
    2a38:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3a:	3d a3       	std	Y+37, r19	; 0x25
    2a3c:	2c a3       	std	Y+36, r18	; 0x24
    2a3e:	4e 01       	movw	r8, r28
    2a40:	32 e2       	ldi	r19, 0x22	; 34
    2a42:	83 0e       	add	r8, r19
    2a44:	91 1c       	adc	r9, r1
    2a46:	0f 2e       	mov	r0, r31
    2a48:	f7 e0       	ldi	r31, 0x07	; 7
    2a4a:	cf 2e       	mov	r12, r31
    2a4c:	d1 2c       	mov	r13, r1
    2a4e:	f0 2d       	mov	r31, r0
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=0;z<8;z++)
    2a50:	61 2c       	mov	r6, r1
    2a52:	71 2c       	mov	r7, r1
    2a54:	4c 2c       	mov	r4, r12
    2a56:	5d 2c       	mov	r5, r13
					clrvoxel(0,7,z);
				}
				
			}
			effect_pathmove(path, 28);
			delay_ms(delay);
    2a58:	2a a0       	ldd	r2, Y+34	; 0x22
    2a5a:	3b a0       	ldd	r3, Y+35	; 0x23
	while (*str)
	{
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
    2a5c:	be 01       	movw	r22, r28
    2a5e:	63 5e       	subi	r22, 0xE3	; 227
    2a60:	7f 4f       	sbci	r23, 0xFF	; 255
    2a62:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <font_getchar>
    2a66:	ce 01       	movw	r24, r28
    2a68:	4d 96       	adiw	r24, 0x1d	; 29
    2a6a:	5c 01       	movw	r10, r24
		
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
    2a6c:	f5 01       	movw	r30, r10
    2a6e:	e1 90       	ld	r14, Z+
    2a70:	5f 01       	movw	r10, r30
			
			for (z=0;z<8;z++)
    2a72:	06 2d       	mov	r16, r6
    2a74:	17 2d       	mov	r17, r7
			{
				if ((stripe>>(7-z)) & 0x01)
    2a76:	f1 2c       	mov	r15, r1
    2a78:	c6 01       	movw	r24, r12
    2a7a:	80 1b       	sub	r24, r16
    2a7c:	91 0b       	sbc	r25, r17
    2a7e:	97 01       	movw	r18, r14
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <effect_path_text+0xa6>
    2a82:	35 95       	asr	r19
    2a84:	27 95       	ror	r18
    2a86:	8a 95       	dec	r24
    2a88:	e2 f7       	brpl	.-8      	; 0x2a82 <effect_path_text+0xa2>
    2a8a:	20 ff       	sbrs	r18, 0
    2a8c:	08 c0       	rjmp	.+16     	; 0x2a9e <effect_path_text+0xbe>
				{
					setvoxel(0,7,z);
    2a8e:	a8 01       	movw	r20, r16
    2a90:	64 2d       	mov	r22, r4
    2a92:	75 2d       	mov	r23, r5
    2a94:	86 2d       	mov	r24, r6
    2a96:	97 2d       	mov	r25, r7
    2a98:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    2a9c:	07 c0       	rjmp	.+14     	; 0x2aac <effect_path_text+0xcc>
				} else
				{
					clrvoxel(0,7,z);
    2a9e:	a8 01       	movw	r20, r16
    2aa0:	64 2d       	mov	r22, r4
    2aa2:	75 2d       	mov	r23, r5
    2aa4:	86 2d       	mov	r24, r6
    2aa6:	97 2d       	mov	r25, r7
    2aa8:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=0;z<8;z++)
    2aac:	0f 5f       	subi	r16, 0xFF	; 255
    2aae:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab0:	08 30       	cpi	r16, 0x08	; 8
    2ab2:	11 05       	cpc	r17, r1
    2ab4:	09 f7       	brne	.-62     	; 0x2a78 <effect_path_text+0x98>
				{
					clrvoxel(0,7,z);
				}
				
			}
			effect_pathmove(path, 28);
    2ab6:	6c e1       	ldi	r22, 0x1C	; 28
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	ce 01       	movw	r24, r28
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	0e 94 c9 13 	call	0x2792	; 0x2792 <effect_pathmove>
			delay_ms(delay);
    2ac2:	82 2d       	mov	r24, r2
    2ac4:	93 2d       	mov	r25, r3
    2ac6:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
		
		for (ii=0;ii<5;ii++)
    2aca:	a8 14       	cp	r10, r8
    2acc:	b9 04       	cpc	r11, r9
    2ace:	71 f6       	brne	.-100    	; 0x2a6c <effect_path_text+0x8c>
			}
			effect_pathmove(path, 28);
			delay_ms(delay);
		}
	
		effect_pathmove(path, 28);
    2ad0:	6c e1       	ldi	r22, 0x1C	; 28
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	01 96       	adiw	r24, 0x01	; 1
    2ad8:	0e 94 c9 13 	call	0x2792	; 0x2792 <effect_pathmove>
		delay_ms(delay);
    2adc:	82 2d       	mov	r24, r2
    2ade:	93 2d       	mov	r25, r3
    2ae0:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
	font_getpath(0,path,28);
	
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str)
    2ae4:	ec a1       	ldd	r30, Y+36	; 0x24
    2ae6:	fd a1       	ldd	r31, Y+37	; 0x25
    2ae8:	81 91       	ld	r24, Z+
    2aea:	fd a3       	std	Y+37, r31	; 0x25
    2aec:	ec a3       	std	Y+36, r30	; 0x24
    2aee:	81 11       	cpse	r24, r1
    2af0:	b5 cf       	rjmp	.-150    	; 0x2a5c <effect_path_text+0x7c>
    2af2:	0e c0       	rjmp	.+28     	; 0x2b10 <effect_path_text+0x130>
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
	for (i=0;i<28;i++)
	{
		effect_pathmove(path, 28);
    2af4:	6c e1       	ldi	r22, 0x1C	; 28
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	ce 01       	movw	r24, r28
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	0e 94 c9 13 	call	0x2792	; 0x2792 <effect_pathmove>
		delay_ms(delay);
    2b00:	8a a1       	ldd	r24, Y+34	; 0x22
    2b02:	9b a1       	ldd	r25, Y+35	; 0x23
    2b04:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
    2b08:	01 50       	subi	r16, 0x01	; 1
    2b0a:	11 09       	sbc	r17, r1
		}
	
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
	for (i=0;i<28;i++)
    2b0c:	99 f7       	brne	.-26     	; 0x2af4 <effect_path_text+0x114>
    2b0e:	03 c0       	rjmp	.+6      	; 0x2b16 <effect_path_text+0x136>
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=0;z<8;z++)
    2b10:	0c e1       	ldi	r16, 0x1C	; 28
    2b12:	10 e0       	ldi	r17, 0x00	; 0
    2b14:	ef cf       	rjmp	.-34     	; 0x2af4 <effect_path_text+0x114>
	for (i=0;i<28;i++)
	{
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
}
    2b16:	a5 96       	adiw	r28, 0x25	; 37
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	ff 90       	pop	r15
    2b2c:	ef 90       	pop	r14
    2b2e:	df 90       	pop	r13
    2b30:	cf 90       	pop	r12
    2b32:	bf 90       	pop	r11
    2b34:	af 90       	pop	r10
    2b36:	9f 90       	pop	r9
    2b38:	8f 90       	pop	r8
    2b3a:	7f 90       	pop	r7
    2b3c:	6f 90       	pop	r6
    2b3e:	5f 90       	pop	r5
    2b40:	4f 90       	pop	r4
    2b42:	3f 90       	pop	r3
    2b44:	2f 90       	pop	r2
    2b46:	08 95       	ret

00002b48 <effect_path_bitmap>:

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    2b48:	2f 92       	push	r2
    2b4a:	3f 92       	push	r3
    2b4c:	4f 92       	push	r4
    2b4e:	5f 92       	push	r5
    2b50:	6f 92       	push	r6
    2b52:	7f 92       	push	r7
    2b54:	8f 92       	push	r8
    2b56:	9f 92       	push	r9
    2b58:	af 92       	push	r10
    2b5a:	bf 92       	push	r11
    2b5c:	cf 92       	push	r12
    2b5e:	df 92       	push	r13
    2b60:	ef 92       	push	r14
    2b62:	ff 92       	push	r15
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	6c 97       	sbiw	r28, 0x1c	; 28
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	58 2e       	mov	r5, r24
    2b7e:	49 2e       	mov	r4, r25
    2b80:	c6 2e       	mov	r12, r22
    2b82:	4a 01       	movw	r8, r20
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
    2b84:	4c e1       	ldi	r20, 0x1C	; 28
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	be 01       	movw	r22, r28
    2b8a:	6f 5f       	subi	r22, 0xFF	; 255
    2b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	0e 94 49 16 	call	0x2c92	; 0x2c92 <font_getpath>
	
	for (i=0; i < iterations; i++)
    2b94:	18 14       	cp	r1, r8
    2b96:	19 04       	cpc	r1, r9
    2b98:	0c f4       	brge	.+2      	; 0x2b9c <effect_path_bitmap+0x54>
    2b9a:	44 c0       	rjmp	.+136    	; 0x2c24 <effect_path_bitmap+0xdc>
    2b9c:	5e c0       	rjmp	.+188    	; 0x2c5a <effect_path_bitmap+0x112>
	{	
		for (ii=0;ii<8;ii++)
		{		
			for (z=0;z<8;z++)
			{
				if (font_getbitmappixel(bitmap,(7-z),ii))
    2b9e:	42 2d       	mov	r20, r2
    2ba0:	6d 2d       	mov	r22, r13
    2ba2:	60 1b       	sub	r22, r16
    2ba4:	8c 2d       	mov	r24, r12
    2ba6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <font_getbitmappixel>
    2baa:	88 23       	and	r24, r24
    2bac:	41 f0       	breq	.+16     	; 0x2bbe <effect_path_bitmap+0x76>
				{
					setvoxel(0,7,z);
    2bae:	a8 01       	movw	r20, r16
    2bb0:	67 e0       	ldi	r22, 0x07	; 7
    2bb2:	70 e0       	ldi	r23, 0x00	; 0
    2bb4:	8e 2d       	mov	r24, r14
    2bb6:	9f 2d       	mov	r25, r15
    2bb8:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    2bbc:	07 c0       	rjmp	.+14     	; 0x2bcc <effect_path_bitmap+0x84>
				} else
				{
					clrvoxel(0,7,z);
    2bbe:	a8 01       	movw	r20, r16
    2bc0:	67 e0       	ldi	r22, 0x07	; 7
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	8e 2d       	mov	r24, r14
    2bc6:	9f 2d       	mov	r25, r15
    2bc8:	0e 94 b0 00 	call	0x160	; 0x160 <clrvoxel>
	
	for (i=0; i < iterations; i++)
	{	
		for (ii=0;ii<8;ii++)
		{		
			for (z=0;z<8;z++)
    2bcc:	0f 5f       	subi	r16, 0xFF	; 255
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	08 30       	cpi	r16, 0x08	; 8
    2bd2:	11 05       	cpc	r17, r1
    2bd4:	21 f7       	brne	.-56     	; 0x2b9e <effect_path_bitmap+0x56>
				{
					clrvoxel(0,7,z);
				}
				
			}
			delay_ms(delay);
    2bd6:	86 2d       	mov	r24, r6
    2bd8:	97 2d       	mov	r25, r7
    2bda:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			effect_pathmove(path, 28);
    2bde:	6c e1       	ldi	r22, 0x1C	; 28
    2be0:	70 e0       	ldi	r23, 0x00	; 0
    2be2:	ce 01       	movw	r24, r28
    2be4:	01 96       	adiw	r24, 0x01	; 1
    2be6:	0e 94 c9 13 	call	0x2792	; 0x2792 <effect_pathmove>
    2bea:	23 94       	inc	r2
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
	{	
		for (ii=0;ii<8;ii++)
    2bec:	88 e0       	ldi	r24, 0x08	; 8
    2bee:	28 16       	cp	r2, r24
    2bf0:	19 f0       	breq	.+6      	; 0x2bf8 <effect_path_bitmap+0xb0>
		delay_ms(delay);
	}
}

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    2bf2:	0e 2d       	mov	r16, r14
    2bf4:	1f 2d       	mov	r17, r15
    2bf6:	d3 cf       	rjmp	.-90     	; 0x2b9e <effect_path_bitmap+0x56>
    2bf8:	04 e1       	ldi	r16, 0x14	; 20
    2bfa:	10 e0       	ldi	r17, 0x00	; 0
			effect_pathmove(path, 28);
		}
	
		for (ii=0;ii<20;ii++)
		{
			delay_ms(delay);
    2bfc:	86 2d       	mov	r24, r6
    2bfe:	97 2d       	mov	r25, r7
    2c00:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			effect_pathmove(path, 28);
    2c04:	6c e1       	ldi	r22, 0x1C	; 28
    2c06:	70 e0       	ldi	r23, 0x00	; 0
    2c08:	ce 01       	movw	r24, r28
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	0e 94 c9 13 	call	0x2792	; 0x2792 <effect_pathmove>
    2c10:	01 50       	subi	r16, 0x01	; 1
    2c12:	11 09       	sbc	r17, r1
			}
			delay_ms(delay);
			effect_pathmove(path, 28);
		}
	
		for (ii=0;ii<20;ii++)
    2c14:	99 f7       	brne	.-26     	; 0x2bfc <effect_path_bitmap+0xb4>
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
    2c16:	8f ef       	ldi	r24, 0xFF	; 255
    2c18:	a8 1a       	sub	r10, r24
    2c1a:	b8 0a       	sbc	r11, r24
    2c1c:	a8 14       	cp	r10, r8
    2c1e:	b9 04       	cpc	r11, r9
    2c20:	61 f4       	brne	.+24     	; 0x2c3a <effect_path_bitmap+0xf2>
    2c22:	1b c0       	rjmp	.+54     	; 0x2c5a <effect_path_bitmap+0x112>
    2c24:	a1 2c       	mov	r10, r1
    2c26:	b1 2c       	mov	r11, r1
		delay_ms(delay);
	}
}

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    2c28:	31 2c       	mov	r3, r1
    2c2a:	0f 2e       	mov	r0, r31
    2c2c:	f7 e0       	ldi	r31, 0x07	; 7
    2c2e:	df 2e       	mov	r13, r31
    2c30:	f0 2d       	mov	r31, r0
    2c32:	e1 2c       	mov	r14, r1
    2c34:	f1 2c       	mov	r15, r1
				{
					clrvoxel(0,7,z);
				}
				
			}
			delay_ms(delay);
    2c36:	65 2c       	mov	r6, r5
    2c38:	74 2c       	mov	r7, r4
		delay_ms(delay);
	}
}

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    2c3a:	23 2c       	mov	r2, r3
    2c3c:	da cf       	rjmp	.-76     	; 0x2bf2 <effect_path_bitmap+0xaa>
			effect_pathmove(path, 28);
		}
	}
	for (ii=0;ii<10;ii++)
	{
		delay_ms(delay);
    2c3e:	85 2d       	mov	r24, r5
    2c40:	94 2d       	mov	r25, r4
    2c42:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
		effect_pathmove(path, 28);
    2c46:	6c e1       	ldi	r22, 0x1C	; 28
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	01 96       	adiw	r24, 0x01	; 1
    2c4e:	0e 94 c9 13 	call	0x2792	; 0x2792 <effect_pathmove>
    2c52:	01 50       	subi	r16, 0x01	; 1
    2c54:	11 09       	sbc	r17, r1
		{
			delay_ms(delay);
			effect_pathmove(path, 28);
		}
	}
	for (ii=0;ii<10;ii++)
    2c56:	99 f7       	brne	.-26     	; 0x2c3e <effect_path_bitmap+0xf6>
    2c58:	03 c0       	rjmp	.+6      	; 0x2c60 <effect_path_bitmap+0x118>
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
    2c5a:	0a e0       	ldi	r16, 0x0A	; 10
    2c5c:	10 e0       	ldi	r17, 0x00	; 0
    2c5e:	ef cf       	rjmp	.-34     	; 0x2c3e <effect_path_bitmap+0xf6>
	for (ii=0;ii<10;ii++)
	{
		delay_ms(delay);
		effect_pathmove(path, 28);
	}
}
    2c60:	6c 96       	adiw	r28, 0x1c	; 28
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	ff 90       	pop	r15
    2c76:	ef 90       	pop	r14
    2c78:	df 90       	pop	r13
    2c7a:	cf 90       	pop	r12
    2c7c:	bf 90       	pop	r11
    2c7e:	af 90       	pop	r10
    2c80:	9f 90       	pop	r9
    2c82:	8f 90       	pop	r8
    2c84:	7f 90       	pop	r7
    2c86:	6f 90       	pop	r6
    2c88:	5f 90       	pop	r5
    2c8a:	4f 90       	pop	r4
    2c8c:	3f 90       	pop	r3
    2c8e:	2f 90       	pop	r2
    2c90:	08 95       	ret

00002c92 <font_getpath>:
	int i;
	
    for (i = 0; i < 8; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}
    2c92:	81 30       	cpi	r24, 0x01	; 1
    2c94:	19 f4       	brne	.+6      	; 0x2c9c <font_getpath+0xa>
    2c96:	ec e1       	ldi	r30, 0x1C	; 28
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <font_getpath+0xe>
    2c9c:	e0 e0       	ldi	r30, 0x00	; 0
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	14 16       	cp	r1, r20
    2ca2:	15 06       	cpc	r1, r21
    2ca4:	5c f4       	brge	.+22     	; 0x2cbc <font_getpath+0x2a>
    2ca6:	e6 57       	subi	r30, 0x76	; 118
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	db 01       	movw	r26, r22
    2cac:	64 0f       	add	r22, r20
    2cae:	75 1f       	adc	r23, r21
    2cb0:	84 91       	lpm	r24, Z
    2cb2:	8d 93       	st	X+, r24
    2cb4:	31 96       	adiw	r30, 0x01	; 1
    2cb6:	a6 17       	cp	r26, r22
    2cb8:	b7 07       	cpc	r27, r23
    2cba:	d1 f7       	brne	.-12     	; 0x2cb0 <font_getpath+0x1e>
    2cbc:	08 95       	ret

00002cbe <font_getchar>:
    2cbe:	ef 92       	push	r14
    2cc0:	ff 92       	push	r15
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	80 52       	subi	r24, 0x20	; 32
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	ec 01       	movw	r28, r24
    2cd0:	cc 0f       	add	r28, r28
    2cd2:	dd 1f       	adc	r29, r29
    2cd4:	cc 0f       	add	r28, r28
    2cd6:	dd 1f       	adc	r29, r29
    2cd8:	8c 0f       	add	r24, r28
    2cda:	9d 1f       	adc	r25, r29
    2cdc:	ec 01       	movw	r28, r24
    2cde:	c0 5d       	subi	r28, 0xD0	; 208
    2ce0:	df 4f       	sbci	r29, 0xFF	; 255
    2ce2:	8b 01       	movw	r16, r22
    2ce4:	7b 01       	movw	r14, r22
    2ce6:	85 e0       	ldi	r24, 0x05	; 5
    2ce8:	e8 0e       	add	r14, r24
    2cea:	f1 1c       	adc	r15, r1
    2cec:	ce 01       	movw	r24, r28
    2cee:	0e 94 a1 19 	call	0x3342	; 0x3342 <eeprom_read_byte>
    2cf2:	f8 01       	movw	r30, r16
    2cf4:	81 93       	st	Z+, r24
    2cf6:	8f 01       	movw	r16, r30
    2cf8:	21 96       	adiw	r28, 0x01	; 1
    2cfa:	ee 15       	cp	r30, r14
    2cfc:	ff 05       	cpc	r31, r15
    2cfe:	b1 f7       	brne	.-20     	; 0x2cec <font_getchar+0x2e>
    2d00:	df 91       	pop	r29
    2d02:	cf 91       	pop	r28
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	ff 90       	pop	r15
    2d0a:	ef 90       	pop	r14
    2d0c:	08 95       	ret

00002d0e <font_getbitmappixel>:

unsigned char font_getbitmappixel ( char bitmap, char x, char y)
{
    2d0e:	cf 93       	push	r28
    2d10:	c4 2f       	mov	r28, r20
	uint8_t tmp = eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)x]);
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	9b 01       	movw	r18, r22
    2d16:	48 e0       	ldi	r20, 0x08	; 8
    2d18:	84 9f       	mul	r24, r20
    2d1a:	20 0d       	add	r18, r0
    2d1c:	31 1d       	adc	r19, r1
    2d1e:	11 24       	eor	r1, r1
    2d20:	c9 01       	movw	r24, r18
    2d22:	80 50       	subi	r24, 0x00	; 0
    2d24:	90 40       	sbci	r25, 0x00	; 0
    2d26:	0e 94 a1 19 	call	0x3342	; 0x3342 <eeprom_read_byte>
	return (tmp >> y) & 0x01;
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <font_getbitmappixel+0x24>
    2d2e:	95 95       	asr	r25
    2d30:	87 95       	ror	r24
    2d32:	ca 95       	dec	r28
    2d34:	e2 f7       	brpl	.-8      	; 0x2d2e <font_getbitmappixel+0x20>
}
    2d36:	81 70       	andi	r24, 0x01	; 1
    2d38:	cf 91       	pop	r28
    2d3a:	08 95       	ret

00002d3c <launch_effect>:
#include "launch_effect.h"
#include "effect.h"
#include "draw.h"

void launch_effect (int effect)
{
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	ec 01       	movw	r28, r24
	int i;
    unsigned char ii;

	fill(0x00);
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	0e 94 9b 01 	call	0x336	; 0x336 <fill>

	switch (effect)
    2d50:	cb 31       	cpi	r28, 0x1B	; 27
    2d52:	d1 05       	cpc	r29, r1
    2d54:	08 f0       	brcs	.+2      	; 0x2d58 <launch_effect+0x1c>
    2d56:	fc c1       	rjmp	.+1016   	; 0x3150 <launch_effect+0x414>
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e6 5d       	subi	r30, 0xD6	; 214
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__tablejump2__>
	{
		case 0x00:
			effect_rain(100);
    2d62:	84 e6       	ldi	r24, 0x64	; 100
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 a5 0b 	call	0x174a	; 0x174a <effect_rain>
			break;
    2d6a:	f6 c1       	rjmp	.+1004   	; 0x3158 <launch_effect+0x41c>
		
			
		case 1:
			sendvoxels_rand_z(20,220,2000);
    2d6c:	40 ed       	ldi	r20, 0xD0	; 208
    2d6e:	57 e0       	ldi	r21, 0x07	; 7
    2d70:	6c ed       	ldi	r22, 0xDC	; 220
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	84 e1       	ldi	r24, 0x14	; 20
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 84 07 	call	0xf08	; 0xf08 <sendvoxels_rand_z>
			break;
    2d7c:	ed c1       	rjmp	.+986    	; 0x3158 <launch_effect+0x41c>
				
		case 2:
			effect_random_filler(5,1);
    2d7e:	61 e0       	ldi	r22, 0x01	; 1
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	85 e0       	ldi	r24, 0x05	; 5
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 2b 0b 	call	0x1656	; 0x1656 <effect_random_filler>
			effect_random_filler(5,0);
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	70 e0       	ldi	r23, 0x00	; 0
    2d8e:	85 e0       	ldi	r24, 0x05	; 5
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	0e 94 2b 0b 	call	0x1656	; 0x1656 <effect_random_filler>
			effect_random_filler(5,1);
    2d96:	61 e0       	ldi	r22, 0x01	; 1
    2d98:	70 e0       	ldi	r23, 0x00	; 0
    2d9a:	85 e0       	ldi	r24, 0x05	; 5
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <effect_random_filler>
			effect_random_filler(5,0);
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	85 e0       	ldi	r24, 0x05	; 5
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	0e 94 2b 0b 	call	0x1656	; 0x1656 <effect_random_filler>
			break;
    2dae:	d4 c1       	rjmp	.+936    	; 0x3158 <launch_effect+0x41c>
				
		case 3:
			effect_z_updown(20,1000);
    2db0:	68 ee       	ldi	r22, 0xE8	; 232
    2db2:	73 e0       	ldi	r23, 0x03	; 3
    2db4:	84 e1       	ldi	r24, 0x14	; 20
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	0e 94 9e 0c 	call	0x193c	; 0x193c <effect_z_updown>
			break;
    2dbc:	cd c1       	rjmp	.+922    	; 0x3158 <launch_effect+0x41c>
				
		case 4:
			effect_wormsqueeze (2, AXIS_Z, -1, 100, 1000);
    2dbe:	08 ee       	ldi	r16, 0xE8	; 232
    2dc0:	13 e0       	ldi	r17, 0x03	; 3
    2dc2:	24 e6       	ldi	r18, 0x64	; 100
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4f ef       	ldi	r20, 0xFF	; 255
    2dc8:	5f ef       	ldi	r21, 0xFF	; 255
    2dca:	6a e7       	ldi	r22, 0x7A	; 122
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	82 e0       	ldi	r24, 0x02	; 2
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <effect_wormsqueeze>
			break;
    2dd6:	c0 c1       	rjmp	.+896    	; 0x3158 <launch_effect+0x41c>
				
		case 5:
			effect_blinky2();
    2dd8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <effect_blinky2>
			break;
    2ddc:	bd c1       	rjmp	.+890    	; 0x3158 <launch_effect+0x41c>
	int i;
    unsigned char ii;

	fill(0x00);

	switch (effect)
    2dde:	c0 e0       	ldi	r28, 0x00	; 0
			break;
				
		case 6: 
            for (ii=0;ii<8;ii++)
			{
				effect_box_shrink_grow (1, ii%4, ii & 0x04, 450);
    2de0:	4c 2f       	mov	r20, r28
    2de2:	44 70       	andi	r20, 0x04	; 4
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	6c 2f       	mov	r22, r28
    2de8:	63 70       	andi	r22, 0x03	; 3
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	22 ec       	ldi	r18, 0xC2	; 194
    2dee:	31 e0       	ldi	r19, 0x01	; 1
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 52 06 	call	0xca4	; 0xca4 <effect_box_shrink_grow>
		case 5:
			effect_blinky2();
			break;
				
		case 6: 
            for (ii=0;ii<8;ii++)
    2df8:	cf 5f       	subi	r28, 0xFF	; 255
    2dfa:	c8 30       	cpi	r28, 0x08	; 8
    2dfc:	89 f7       	brne	.-30     	; 0x2de0 <launch_effect+0xa4>
			{
				effect_box_shrink_grow (1, ii%4, ii & 0x04, 450);
			}

			effect_box_woopwoop(800,0);
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	70 e0       	ldi	r23, 0x00	; 0
    2e02:	80 e2       	ldi	r24, 0x20	; 32
    2e04:	93 e0       	ldi	r25, 0x03	; 3
    2e06:	0e 94 f1 06 	call	0xde2	; 0xde2 <effect_box_woopwoop>
			effect_box_woopwoop(800,1);
    2e0a:	61 e0       	ldi	r22, 0x01	; 1
    2e0c:	70 e0       	ldi	r23, 0x00	; 0
    2e0e:	80 e2       	ldi	r24, 0x20	; 32
    2e10:	93 e0       	ldi	r25, 0x03	; 3
    2e12:	0e 94 f1 06 	call	0xde2	; 0xde2 <effect_box_woopwoop>
			effect_box_woopwoop(800,0);
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	70 e0       	ldi	r23, 0x00	; 0
    2e1a:	80 e2       	ldi	r24, 0x20	; 32
    2e1c:	93 e0       	ldi	r25, 0x03	; 3
    2e1e:	0e 94 f1 06 	call	0xde2	; 0xde2 <effect_box_woopwoop>
			effect_box_woopwoop(800,1);
    2e22:	61 e0       	ldi	r22, 0x01	; 1
    2e24:	70 e0       	ldi	r23, 0x00	; 0
    2e26:	80 e2       	ldi	r24, 0x20	; 32
    2e28:	93 e0       	ldi	r25, 0x03	; 3
    2e2a:	0e 94 f1 06 	call	0xde2	; 0xde2 <effect_box_woopwoop>
			break;
    2e2e:	94 c1       	rjmp	.+808    	; 0x3158 <launch_effect+0x41c>
			
		case 7:
			effect_planboing (AXIS_Z, 400);
    2e30:	60 e9       	ldi	r22, 0x90	; 144
    2e32:	71 e0       	ldi	r23, 0x01	; 1
    2e34:	8a e7       	ldi	r24, 0x7A	; 122
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	0e 94 9e 05 	call	0xb3c	; 0xb3c <effect_planboing>
			effect_planboing (AXIS_X, 400);
    2e3c:	60 e9       	ldi	r22, 0x90	; 144
    2e3e:	71 e0       	ldi	r23, 0x01	; 1
    2e40:	88 e7       	ldi	r24, 0x78	; 120
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	0e 94 9e 05 	call	0xb3c	; 0xb3c <effect_planboing>
			effect_planboing (AXIS_Y, 400);
    2e48:	60 e9       	ldi	r22, 0x90	; 144
    2e4a:	71 e0       	ldi	r23, 0x01	; 1
    2e4c:	89 e7       	ldi	r24, 0x79	; 121
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 9e 05 	call	0xb3c	; 0xb3c <effect_planboing>
			effect_planboing (AXIS_Z, 400);
    2e54:	60 e9       	ldi	r22, 0x90	; 144
    2e56:	71 e0       	ldi	r23, 0x01	; 1
    2e58:	8a e7       	ldi	r24, 0x7A	; 122
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <effect_planboing>
			effect_planboing (AXIS_X, 400);
    2e60:	60 e9       	ldi	r22, 0x90	; 144
    2e62:	71 e0       	ldi	r23, 0x01	; 1
    2e64:	88 e7       	ldi	r24, 0x78	; 120
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 9e 05 	call	0xb3c	; 0xb3c <effect_planboing>
			effect_planboing (AXIS_Y, 400);
    2e6c:	60 e9       	ldi	r22, 0x90	; 144
    2e6e:	71 e0       	ldi	r23, 0x01	; 1
    2e70:	89 e7       	ldi	r24, 0x79	; 121
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 9e 05 	call	0xb3c	; 0xb3c <effect_planboing>
			fill(0x00);
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
			break;
    2e7e:	6c c1       	rjmp	.+728    	; 0x3158 <launch_effect+0x41c>
		
		case 8:
			fill(0x00);
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
			effect_telcstairs(0,800,0xff);
    2e86:	4f ef       	ldi	r20, 0xFF	; 255
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	60 e2       	ldi	r22, 0x20	; 32
    2e8c:	73 e0       	ldi	r23, 0x03	; 3
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	0e 94 3a 10 	call	0x2074	; 0x2074 <effect_telcstairs>
			effect_telcstairs(0,800,0x00);
    2e96:	40 e0       	ldi	r20, 0x00	; 0
    2e98:	50 e0       	ldi	r21, 0x00	; 0
    2e9a:	60 e2       	ldi	r22, 0x20	; 32
    2e9c:	73 e0       	ldi	r23, 0x03	; 3
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 3a 10 	call	0x2074	; 0x2074 <effect_telcstairs>
			effect_telcstairs(1,800,0xff);
    2ea6:	4f ef       	ldi	r20, 0xFF	; 255
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	60 e2       	ldi	r22, 0x20	; 32
    2eac:	73 e0       	ldi	r23, 0x03	; 3
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	0e 94 3a 10 	call	0x2074	; 0x2074 <effect_telcstairs>
			effect_telcstairs(1,800,0xff);
    2eb6:	4f ef       	ldi	r20, 0xFF	; 255
    2eb8:	50 e0       	ldi	r21, 0x00	; 0
    2eba:	60 e2       	ldi	r22, 0x20	; 32
    2ebc:	73 e0       	ldi	r23, 0x03	; 3
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	0e 94 3a 10 	call	0x2074	; 0x2074 <effect_telcstairs>
			break;
    2ec6:	48 c1       	rjmp	.+656    	; 0x3158 <launch_effect+0x41c>
			
		case 9:
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	48 e8       	ldi	r20, 0x88	; 136
    2ece:	53 e1       	ldi	r21, 0x13	; 19
    2ed0:	66 e2       	ldi	r22, 0x26	; 38
    2ed2:	72 e0       	ldi	r23, 0x02	; 2
    2ed4:	8a e7       	ldi	r24, 0x7A	; 122
    2ed6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    2eda:	21 e0       	ldi	r18, 0x01	; 1
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	48 e8       	ldi	r20, 0x88	; 136
    2ee0:	53 e1       	ldi	r21, 0x13	; 19
    2ee2:	66 e2       	ldi	r22, 0x26	; 38
    2ee4:	72 e0       	ldi	r23, 0x02	; 2
    2ee6:	8a e7       	ldi	r24, 0x7A	; 122
    2ee8:	0e 94 56 0d 	call	0x1aac	; 0x1aac <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	48 e8       	ldi	r20, 0x88	; 136
    2ef2:	53 e1       	ldi	r21, 0x13	; 19
    2ef4:	66 e2       	ldi	r22, 0x26	; 38
    2ef6:	72 e0       	ldi	r23, 0x02	; 2
    2ef8:	8a e7       	ldi	r24, 0x7A	; 122
    2efa:	0e 94 56 0d 	call	0x1aac	; 0x1aac <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    2efe:	21 e0       	ldi	r18, 0x01	; 1
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	48 e8       	ldi	r20, 0x88	; 136
    2f04:	53 e1       	ldi	r21, 0x13	; 19
    2f06:	66 e2       	ldi	r22, 0x26	; 38
    2f08:	72 e0       	ldi	r23, 0x02	; 2
    2f0a:	8a e7       	ldi	r24, 0x7A	; 122
    2f0c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,0);
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	48 e8       	ldi	r20, 0x88	; 136
    2f16:	53 e1       	ldi	r21, 0x13	; 19
    2f18:	66 e2       	ldi	r22, 0x26	; 38
    2f1a:	72 e0       	ldi	r23, 0x02	; 2
    2f1c:	88 e7       	ldi	r24, 0x78	; 120
    2f1e:	0e 94 56 0d 	call	0x1aac	; 0x1aac <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,1);
    2f22:	21 e0       	ldi	r18, 0x01	; 1
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	48 e8       	ldi	r20, 0x88	; 136
    2f28:	53 e1       	ldi	r21, 0x13	; 19
    2f2a:	66 e2       	ldi	r22, 0x26	; 38
    2f2c:	72 e0       	ldi	r23, 0x02	; 2
    2f2e:	88 e7       	ldi	r24, 0x78	; 120
    2f30:	0e 94 56 0d 	call	0x1aac	; 0x1aac <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,0);
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	48 e8       	ldi	r20, 0x88	; 136
    2f3a:	53 e1       	ldi	r21, 0x13	; 19
    2f3c:	66 e2       	ldi	r22, 0x26	; 38
    2f3e:	72 e0       	ldi	r23, 0x02	; 2
    2f40:	89 e7       	ldi	r24, 0x79	; 121
    2f42:	0e 94 56 0d 	call	0x1aac	; 0x1aac <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,1);
    2f46:	21 e0       	ldi	r18, 0x01	; 1
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	48 e8       	ldi	r20, 0x88	; 136
    2f4c:	53 e1       	ldi	r21, 0x13	; 19
    2f4e:	66 e2       	ldi	r22, 0x26	; 38
    2f50:	72 e0       	ldi	r23, 0x02	; 2
    2f52:	89 e7       	ldi	r24, 0x79	; 121
    2f54:	0e 94 56 0d 	call	0x1aac	; 0x1aac <effect_axis_updown_randsuspend>
			break;
    2f58:	ff c0       	rjmp	.+510    	; 0x3158 <launch_effect+0x41c>
			
		case 10:
			effect_loadbar(700);
    2f5a:	8c eb       	ldi	r24, 0xBC	; 188
    2f5c:	92 e0       	ldi	r25, 0x02	; 2
    2f5e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <effect_loadbar>
			break;
    2f62:	fa c0       	rjmp	.+500    	; 0x3158 <launch_effect+0x41c>
			
		case 11:
			effect_wormsqueeze (1, AXIS_Z, 1, 100, 1000);
    2f64:	08 ee       	ldi	r16, 0xE8	; 232
    2f66:	13 e0       	ldi	r17, 0x03	; 3
    2f68:	24 e6       	ldi	r18, 0x64	; 100
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	41 e0       	ldi	r20, 0x01	; 1
    2f6e:	50 e0       	ldi	r21, 0x00	; 0
    2f70:	6a e7       	ldi	r22, 0x7A	; 122
    2f72:	70 e0       	ldi	r23, 0x00	; 0
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <effect_wormsqueeze>
			break;
    2f7c:	ed c0       	rjmp	.+474    	; 0x3158 <launch_effect+0x41c>
			
			
		case 12:
			effect_stringfly2("INSTRUCTABLES");
    2f7e:	84 e8       	ldi	r24, 0x84	; 132
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 0c 05 	call	0xa18	; 0xa18 <effect_stringfly2>
			break;
    2f86:	e8 c0       	rjmp	.+464    	; 0x3158 <launch_effect+0x41c>
			
		case 13:
			fill(0x00);
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	0e 94 9b 01 	call	0x336	; 0x336 <fill>
    2f8e:	04 e1       	ldi	r16, 0x14	; 20
    2f90:	10 e0       	ldi	r17, 0x00	; 0
            // Create a random starting point for the Game of Life effect.
			for (i = 0; i < 20;i++)
			{
				setvoxel(rand()%4,rand()%4,rand()%4);
    2f92:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    2f96:	7c 01       	movw	r14, r24
    2f98:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    2f9c:	ec 01       	movw	r28, r24
    2f9e:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    2fa2:	a7 01       	movw	r20, r14
    2fa4:	43 70       	andi	r20, 0x03	; 3
    2fa6:	50 78       	andi	r21, 0x80	; 128
    2fa8:	55 23       	and	r21, r21
    2faa:	34 f4       	brge	.+12     	; 0x2fb8 <launch_effect+0x27c>
    2fac:	41 50       	subi	r20, 0x01	; 1
    2fae:	51 09       	sbc	r21, r1
    2fb0:	4c 6f       	ori	r20, 0xFC	; 252
    2fb2:	5f 6f       	ori	r21, 0xFF	; 255
    2fb4:	4f 5f       	subi	r20, 0xFF	; 255
    2fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb8:	be 01       	movw	r22, r28
    2fba:	63 70       	andi	r22, 0x03	; 3
    2fbc:	70 78       	andi	r23, 0x80	; 128
    2fbe:	77 23       	and	r23, r23
    2fc0:	34 f4       	brge	.+12     	; 0x2fce <launch_effect+0x292>
    2fc2:	61 50       	subi	r22, 0x01	; 1
    2fc4:	71 09       	sbc	r23, r1
    2fc6:	6c 6f       	ori	r22, 0xFC	; 252
    2fc8:	7f 6f       	ori	r23, 0xFF	; 255
    2fca:	6f 5f       	subi	r22, 0xFF	; 255
    2fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fce:	83 70       	andi	r24, 0x03	; 3
    2fd0:	90 78       	andi	r25, 0x80	; 128
    2fd2:	99 23       	and	r25, r25
    2fd4:	24 f4       	brge	.+8      	; 0x2fde <launch_effect+0x2a2>
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	8c 6f       	ori	r24, 0xFC	; 252
    2fda:	9f 6f       	ori	r25, 0xFF	; 255
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	0e 94 89 00 	call	0x112	; 0x112 <setvoxel>
    2fe2:	01 50       	subi	r16, 0x01	; 1
    2fe4:	11 09       	sbc	r17, r1
			break;
			
		case 13:
			fill(0x00);
            // Create a random starting point for the Game of Life effect.
			for (i = 0; i < 20;i++)
    2fe6:	a9 f6       	brne	.-86     	; 0x2f92 <launch_effect+0x256>
    2fe8:	b7 c0       	rjmp	.+366    	; 0x3158 <launch_effect+0x41c>
			}
	
			break;
			
		case 14:
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,1);
    2fea:	21 e0       	ldi	r18, 0x01	; 1
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	48 ec       	ldi	r20, 0xC8	; 200
    2ff0:	50 e0       	ldi	r21, 0x00	; 0
    2ff2:	60 e0       	ldi	r22, 0x00	; 0
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	8a e7       	ldi	r24, 0x7A	; 122
    2ff8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    2ffc:	8c ed       	ldi	r24, 0xDC	; 220
    2ffe:	95 e0       	ldi	r25, 0x05	; 5
    3000:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,1);
    3004:	21 e0       	ldi	r18, 0x01	; 1
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	48 ec       	ldi	r20, 0xC8	; 200
    300a:	50 e0       	ldi	r21, 0x00	; 0
    300c:	61 e0       	ldi	r22, 0x01	; 1
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	8a e7       	ldi	r24, 0x7A	; 122
    3012:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3016:	8c ed       	ldi	r24, 0xDC	; 220
    3018:	95 e0       	ldi	r25, 0x05	; 5
    301a:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,2);
    301e:	22 e0       	ldi	r18, 0x02	; 2
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	48 ec       	ldi	r20, 0xC8	; 200
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	8a e7       	ldi	r24, 0x7A	; 122
    302c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3030:	8c ed       	ldi	r24, 0xDC	; 220
    3032:	95 e0       	ldi	r25, 0x05	; 5
    3034:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,2);
    3038:	22 e0       	ldi	r18, 0x02	; 2
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	48 ec       	ldi	r20, 0xC8	; 200
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	61 e0       	ldi	r22, 0x01	; 1
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	8a e7       	ldi	r24, 0x7A	; 122
    3046:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    304a:	8c ed       	ldi	r24, 0xDC	; 220
    304c:	95 e0       	ldi	r25, 0x05	; 5
    304e:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Y, 0 , 200,1);
    3052:	21 e0       	ldi	r18, 0x01	; 1
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	48 ec       	ldi	r20, 0xC8	; 200
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	89 e7       	ldi	r24, 0x79	; 121
    3060:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3064:	8c ed       	ldi	r24, 0xDC	; 220
    3066:	95 e0       	ldi	r25, 0x05	; 5
    3068:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Y, 1 , 200,1);
    306c:	21 e0       	ldi	r18, 0x01	; 1
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	48 ec       	ldi	r20, 0xC8	; 200
    3072:	50 e0       	ldi	r21, 0x00	; 0
    3074:	61 e0       	ldi	r22, 0x01	; 1
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	89 e7       	ldi	r24, 0x79	; 121
    307a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    307e:	8c ed       	ldi	r24, 0xDC	; 220
    3080:	95 e0       	ldi	r25, 0x05	; 5
    3082:	0e 94 08 03 	call	0x610	; 0x610 <delay_ms>
			break;
    3086:	68 c0       	rjmp	.+208    	; 0x3158 <launch_effect+0x41c>
			
		case 15:
			boingboing(250, 600, 0x01, 0x02);
    3088:	22 e0       	ldi	r18, 0x02	; 2
    308a:	41 e0       	ldi	r20, 0x01	; 1
    308c:	68 e5       	ldi	r22, 0x58	; 88
    308e:	72 e0       	ldi	r23, 0x02	; 2
    3090:	8a ef       	ldi	r24, 0xFA	; 250
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	0e 94 0f 08 	call	0x101e	; 0x101e <boingboing>
			break;
    3098:	5f c0       	rjmp	.+190    	; 0x3158 <launch_effect+0x41c>
			
		case 16:
			effect_smileyspin(2,1000,0);
    309a:	40 e0       	ldi	r20, 0x00	; 0
    309c:	68 ee       	ldi	r22, 0xE8	; 232
    309e:	73 e0       	ldi	r23, 0x03	; 3
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 5d 11 	call	0x22ba	; 0x22ba <effect_smileyspin>
			break;
    30a8:	57 c0       	rjmp	.+174    	; 0x3158 <launch_effect+0x41c>
			
		case 17:
			effect_pathspiral(100,500);
    30aa:	64 ef       	ldi	r22, 0xF4	; 244
    30ac:	71 e0       	ldi	r23, 0x01	; 1
    30ae:	84 e6       	ldi	r24, 0x64	; 100
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 a3 14 	call	0x2946	; 0x2946 <effect_pathspiral>
			break;
    30b6:	50 c0       	rjmp	.+160    	; 0x3158 <launch_effect+0x41c>
			
		case 18:
			effect_path_bitmap(700,2,3);
    30b8:	43 e0       	ldi	r20, 0x03	; 3
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	62 e0       	ldi	r22, 0x02	; 2
    30be:	8c eb       	ldi	r24, 0xBC	; 188
    30c0:	92 e0       	ldi	r25, 0x02	; 2
    30c2:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <effect_path_bitmap>
			break;
    30c6:	48 c0       	rjmp	.+144    	; 0x3158 <launch_effect+0x41c>
			
		case 19:
			effect_smileyspin(2,1000,1);
    30c8:	41 e0       	ldi	r20, 0x01	; 1
    30ca:	68 ee       	ldi	r22, 0xE8	; 232
    30cc:	73 e0       	ldi	r23, 0x03	; 3
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <effect_smileyspin>
			break;
    30d6:	40 c0       	rjmp	.+128    	; 0x3158 <launch_effect+0x41c>
			
		case 20:
			effect_path_text(1000,"TG");
    30d8:	62 e9       	ldi	r22, 0x92	; 146
    30da:	70 e0       	ldi	r23, 0x00	; 0
    30dc:	88 ee       	ldi	r24, 0xE8	; 232
    30de:	93 e0       	ldi	r25, 0x03	; 3
    30e0:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <effect_path_text>
			break;
    30e4:	39 c0       	rjmp	.+114    	; 0x3158 <launch_effect+0x41c>
	
		case 21:
			effect_rand_patharound(200,500);
    30e6:	64 ef       	ldi	r22, 0xF4	; 244
    30e8:	71 e0       	ldi	r23, 0x01	; 1
    30ea:	88 ec       	ldi	r24, 0xC8	; 200
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0e 94 2c 14 	call	0x2858	; 0x2858 <effect_rand_patharound>
			break;
    30f2:	32 c0       	rjmp	.+100    	; 0x3158 <launch_effect+0x41c>
			
		case 22:
			effect_wormsqueeze (1, AXIS_Z, -1, 100, 1000);
    30f4:	08 ee       	ldi	r16, 0xE8	; 232
    30f6:	13 e0       	ldi	r17, 0x03	; 3
    30f8:	24 e6       	ldi	r18, 0x64	; 100
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	4f ef       	ldi	r20, 0xFF	; 255
    30fe:	5f ef       	ldi	r21, 0xFF	; 255
    3100:	6a e7       	ldi	r22, 0x7A	; 122
    3102:	70 e0       	ldi	r23, 0x00	; 0
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <effect_wormsqueeze>
			break;
    310c:	25 c0       	rjmp	.+74     	; 0x3158 <launch_effect+0x41c>
			
		case 23:
			effect_smileyspin(2,1000,2);
    310e:	42 e0       	ldi	r20, 0x02	; 2
    3110:	68 ee       	ldi	r22, 0xE8	; 232
    3112:	73 e0       	ldi	r23, 0x03	; 3
    3114:	82 e0       	ldi	r24, 0x02	; 2
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 5d 11 	call	0x22ba	; 0x22ba <effect_smileyspin>
			break;
    311c:	1d c0       	rjmp	.+58     	; 0x3158 <launch_effect+0x41c>
			
		case 24:
			effect_random_sparkle();
    311e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <effect_random_sparkle>
			break;
    3122:	1a c0       	rjmp	.+52     	; 0x3158 <launch_effect+0x41c>
			
		case 25:
			effect_wormsqueeze (1, AXIS_Z, -1, 100, 1000);
    3124:	08 ee       	ldi	r16, 0xE8	; 232
    3126:	13 e0       	ldi	r17, 0x03	; 3
    3128:	24 e6       	ldi	r18, 0x64	; 100
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	4f ef       	ldi	r20, 0xFF	; 255
    312e:	5f ef       	ldi	r21, 0xFF	; 255
    3130:	6a e7       	ldi	r22, 0x7A	; 122
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <effect_wormsqueeze>
			break;
    313c:	0d c0       	rjmp	.+26     	; 0x3158 <launch_effect+0x41c>
		
		case 26:
			boingboing(250, 600, 0x01, 0x03);
    313e:	23 e0       	ldi	r18, 0x03	; 3
    3140:	41 e0       	ldi	r20, 0x01	; 1
    3142:	68 e5       	ldi	r22, 0x58	; 88
    3144:	72 e0       	ldi	r23, 0x02	; 2
    3146:	8a ef       	ldi	r24, 0xFA	; 250
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 0f 08 	call	0x101e	; 0x101e <boingboing>
			break;
    314e:	04 c0       	rjmp	.+8      	; 0x3158 <launch_effect+0x41c>
		
		// In case the effect number is out of range:
		default:
			effect_stringfly2("FAIL");
    3150:	85 e9       	ldi	r24, 0x95	; 149
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 0c 05 	call	0xa18	; 0xa18 <effect_stringfly2>
			break;
		
		

	}
}
    3158:	df 91       	pop	r29
    315a:	cf 91       	pop	r28
    315c:	1f 91       	pop	r17
    315e:	0f 91       	pop	r16
    3160:	ff 90       	pop	r15
    3162:	ef 90       	pop	r14
    3164:	08 95       	ret

00003166 <main>:

int main (void)
{

// initializing the ports 
  dataDDR  = 0xff;	
    3166:	8f ef       	ldi	r24, 0xFF	; 255
    3168:	8a bb       	out	0x1a, r24	; 26
  ulnDDR   = 0xff;	
    316a:	84 bb       	out	0x14, r24	; 20
  dataPort = 0x00; 
    316c:	1b ba       	out	0x1b, r1	; 27
  ulnPort  = 0x00; 
    316e:	15 ba       	out	0x15, r1	; 21


  // Wave form generation Mode - clear on timer compare 
  // clear when OCR reaches 10
OCR2 = 10; 
    3170:	8a e0       	ldi	r24, 0x0A	; 10
    3172:	83 bd       	out	0x23, r24	; 35
TCCR2 |= (1 << CS20) | (1 << CS22) | (1 << WGM21); 
    3174:	85 b5       	in	r24, 0x25	; 37
    3176:	8d 60       	ori	r24, 0x0D	; 13
    3178:	85 bd       	out	0x25, r24	; 37
TCNT2 = 0x00;
    317a:	14 bc       	out	0x24, r1	; 36

// Enable interrupts
	TIMSK |= (1 << OCIE2);
    317c:	89 b7       	in	r24, 0x39	; 57
    317e:	80 68       	ori	r24, 0x80	; 128
    3180:	89 bf       	out	0x39, r24	; 57
	sei();
    3182:	78 94       	sei

	current_layer = 1;	
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <current_layer>

	while (1)
	{
		for (int i=0; i<EFFECTS_TOTAL; i++) //show time
    318a:	00 e0       	ldi	r16, 0x00	; 0
    318c:	10 e0       	ldi	r17, 0x00	; 0
    318e:	c0 2f       	mov	r28, r16
    3190:	d1 2f       	mov	r29, r17
			launch_effect(i);
    3192:	ce 01       	movw	r24, r28
    3194:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <launch_effect>

	current_layer = 1;	

	while (1)
	{
		for (int i=0; i<EFFECTS_TOTAL; i++) //show time
    3198:	21 96       	adiw	r28, 0x01	; 1
    319a:	cb 31       	cpi	r28, 0x1B	; 27
    319c:	d1 05       	cpc	r29, r1
    319e:	c9 f7       	brne	.-14     	; 0x3192 <main+0x2c>
    31a0:	f6 cf       	rjmp	.-20     	; 0x318e <main+0x28>

000031a2 <__vector_4>:

}


ISR(TIMER2_COMP_vect)
{
    31a2:	1f 92       	push	r1
    31a4:	0f 92       	push	r0
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	0f 92       	push	r0
    31aa:	11 24       	eor	r1, r1
    31ac:	2f 93       	push	r18
    31ae:	3f 93       	push	r19
    31b0:	8f 93       	push	r24
    31b2:	9f 93       	push	r25
    31b4:	ef 93       	push	r30
    31b6:	ff 93       	push	r31
	int i;

	LAYER_SELECT = 0x00; // all uln layers off
    31b8:	15 ba       	out	0x15, r1	; 21

	for (i = 0; i < 8; i++) // latch data 
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		dataPort = cube[current_layer][i]; // placing data
    31be:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <current_layer>
    31c2:	f9 01       	movw	r30, r18
    31c4:	98 e0       	ldi	r25, 0x08	; 8
    31c6:	89 9f       	mul	r24, r25
    31c8:	e0 0d       	add	r30, r0
    31ca:	f1 1d       	adc	r31, r1
    31cc:	11 24       	eor	r1, r1
    31ce:	e6 52       	subi	r30, 0x26	; 38
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	8b bb       	out	0x1b, r24	; 27

		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1)); // placing data on latch
    31d6:	88 b3       	in	r24, 0x18	; 24
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	92 0f       	add	r25, r18
    31dc:	97 70       	andi	r25, 0x07	; 7
    31de:	88 7f       	andi	r24, 0xF8	; 248
    31e0:	89 2b       	or	r24, r25
    31e2:	88 bb       	out	0x18, r24	; 24
{
	int i;

	LAYER_SELECT = 0x00; // all uln layers off

	for (i = 0; i < 8; i++) // latch data 
    31e4:	2f 5f       	subi	r18, 0xFF	; 255
    31e6:	3f 4f       	sbci	r19, 0xFF	; 255
    31e8:	28 30       	cpi	r18, 0x08	; 8
    31ea:	31 05       	cpc	r19, r1
    31ec:	41 f7       	brne	.-48     	; 0x31be <__vector_4+0x1c>
		dataPort = cube[current_layer][i]; // placing data

		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1)); // placing data on latch
	}

	LAYER_SELECT = (0x01 << current_layer); // uln layer on for that layer
    31ee:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <current_layer>
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <__vector_4+0x5a>
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	2a 95       	dec	r18
    31fe:	e2 f7       	brpl	.-8      	; 0x31f8 <__vector_4+0x56>
    3200:	85 bb       	out	0x15, r24	; 21


	current_layer++; // go to next later for the next time
    3202:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <current_layer>
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <current_layer>

	if (current_layer == 8) // taking care of overflow
    320c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <current_layer>
    3210:	88 30       	cpi	r24, 0x08	; 8
    3212:	11 f4       	brne	.+4      	; 0x3218 <__vector_4+0x76>
		current_layer = 0;
    3214:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <current_layer>
}
    3218:	ff 91       	pop	r31
    321a:	ef 91       	pop	r30
    321c:	9f 91       	pop	r25
    321e:	8f 91       	pop	r24
    3220:	3f 91       	pop	r19
    3222:	2f 91       	pop	r18
    3224:	0f 90       	pop	r0
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	0f 90       	pop	r0
    322a:	1f 90       	pop	r1
    322c:	18 95       	reti

0000322e <__divmodhi4>:
    322e:	97 fb       	bst	r25, 7
    3230:	07 2e       	mov	r0, r23
    3232:	16 f4       	brtc	.+4      	; 0x3238 <__divmodhi4+0xa>
    3234:	00 94       	com	r0
    3236:	07 d0       	rcall	.+14     	; 0x3246 <__divmodhi4_neg1>
    3238:	77 fd       	sbrc	r23, 7
    323a:	09 d0       	rcall	.+18     	; 0x324e <__divmodhi4_neg2>
    323c:	0e 94 31 19 	call	0x3262	; 0x3262 <__udivmodhi4>
    3240:	07 fc       	sbrc	r0, 7
    3242:	05 d0       	rcall	.+10     	; 0x324e <__divmodhi4_neg2>
    3244:	3e f4       	brtc	.+14     	; 0x3254 <__divmodhi4_exit>

00003246 <__divmodhi4_neg1>:
    3246:	90 95       	com	r25
    3248:	81 95       	neg	r24
    324a:	9f 4f       	sbci	r25, 0xFF	; 255
    324c:	08 95       	ret

0000324e <__divmodhi4_neg2>:
    324e:	70 95       	com	r23
    3250:	61 95       	neg	r22
    3252:	7f 4f       	sbci	r23, 0xFF	; 255

00003254 <__divmodhi4_exit>:
    3254:	08 95       	ret

00003256 <__tablejump2__>:
    3256:	ee 0f       	add	r30, r30
    3258:	ff 1f       	adc	r31, r31
    325a:	05 90       	lpm	r0, Z+
    325c:	f4 91       	lpm	r31, Z
    325e:	e0 2d       	mov	r30, r0
    3260:	09 94       	ijmp

00003262 <__udivmodhi4>:
    3262:	aa 1b       	sub	r26, r26
    3264:	bb 1b       	sub	r27, r27
    3266:	51 e1       	ldi	r21, 0x11	; 17
    3268:	07 c0       	rjmp	.+14     	; 0x3278 <__udivmodhi4_ep>

0000326a <__udivmodhi4_loop>:
    326a:	aa 1f       	adc	r26, r26
    326c:	bb 1f       	adc	r27, r27
    326e:	a6 17       	cp	r26, r22
    3270:	b7 07       	cpc	r27, r23
    3272:	10 f0       	brcs	.+4      	; 0x3278 <__udivmodhi4_ep>
    3274:	a6 1b       	sub	r26, r22
    3276:	b7 0b       	sbc	r27, r23

00003278 <__udivmodhi4_ep>:
    3278:	88 1f       	adc	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	5a 95       	dec	r21
    327e:	a9 f7       	brne	.-22     	; 0x326a <__udivmodhi4_loop>
    3280:	80 95       	com	r24
    3282:	90 95       	com	r25
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	08 95       	ret

0000328a <do_rand>:
    328a:	8f 92       	push	r8
    328c:	9f 92       	push	r9
    328e:	af 92       	push	r10
    3290:	bf 92       	push	r11
    3292:	cf 92       	push	r12
    3294:	df 92       	push	r13
    3296:	ef 92       	push	r14
    3298:	ff 92       	push	r15
    329a:	cf 93       	push	r28
    329c:	df 93       	push	r29
    329e:	ec 01       	movw	r28, r24
    32a0:	68 81       	ld	r22, Y
    32a2:	79 81       	ldd	r23, Y+1	; 0x01
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	9b 81       	ldd	r25, Y+3	; 0x03
    32a8:	61 15       	cp	r22, r1
    32aa:	71 05       	cpc	r23, r1
    32ac:	81 05       	cpc	r24, r1
    32ae:	91 05       	cpc	r25, r1
    32b0:	21 f4       	brne	.+8      	; 0x32ba <do_rand+0x30>
    32b2:	64 e2       	ldi	r22, 0x24	; 36
    32b4:	79 ed       	ldi	r23, 0xD9	; 217
    32b6:	8b e5       	ldi	r24, 0x5B	; 91
    32b8:	97 e0       	ldi	r25, 0x07	; 7
    32ba:	2d e1       	ldi	r18, 0x1D	; 29
    32bc:	33 ef       	ldi	r19, 0xF3	; 243
    32be:	41 e0       	ldi	r20, 0x01	; 1
    32c0:	50 e0       	ldi	r21, 0x00	; 0
    32c2:	0e 94 a9 19 	call	0x3352	; 0x3352 <__divmodsi4>
    32c6:	49 01       	movw	r8, r18
    32c8:	5a 01       	movw	r10, r20
    32ca:	9b 01       	movw	r18, r22
    32cc:	ac 01       	movw	r20, r24
    32ce:	a7 ea       	ldi	r26, 0xA7	; 167
    32d0:	b1 e4       	ldi	r27, 0x41	; 65
    32d2:	0e 94 c8 19 	call	0x3390	; 0x3390 <__muluhisi3>
    32d6:	6b 01       	movw	r12, r22
    32d8:	7c 01       	movw	r14, r24
    32da:	ac ee       	ldi	r26, 0xEC	; 236
    32dc:	b4 ef       	ldi	r27, 0xF4	; 244
    32de:	a5 01       	movw	r20, r10
    32e0:	94 01       	movw	r18, r8
    32e2:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__mulohisi3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	8c 0d       	add	r24, r12
    32ec:	9d 1d       	adc	r25, r13
    32ee:	ae 1d       	adc	r26, r14
    32f0:	bf 1d       	adc	r27, r15
    32f2:	b7 ff       	sbrs	r27, 7
    32f4:	03 c0       	rjmp	.+6      	; 0x32fc <do_rand+0x72>
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	a1 09       	sbc	r26, r1
    32fa:	b0 48       	sbci	r27, 0x80	; 128
    32fc:	88 83       	st	Y, r24
    32fe:	99 83       	std	Y+1, r25	; 0x01
    3300:	aa 83       	std	Y+2, r26	; 0x02
    3302:	bb 83       	std	Y+3, r27	; 0x03
    3304:	9f 77       	andi	r25, 0x7F	; 127
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	ff 90       	pop	r15
    330c:	ef 90       	pop	r14
    330e:	df 90       	pop	r13
    3310:	cf 90       	pop	r12
    3312:	bf 90       	pop	r11
    3314:	af 90       	pop	r10
    3316:	9f 90       	pop	r9
    3318:	8f 90       	pop	r8
    331a:	08 95       	ret

0000331c <rand_r>:
    331c:	0e 94 45 19 	call	0x328a	; 0x328a <do_rand>
    3320:	08 95       	ret

00003322 <rand>:
    3322:	80 e6       	ldi	r24, 0x60	; 96
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 94 45 19 	call	0x328a	; 0x328a <do_rand>
    332a:	08 95       	ret

0000332c <srand>:
    332c:	a0 e0       	ldi	r26, 0x00	; 0
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    3334:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    3338:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
    333c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
    3340:	08 95       	ret

00003342 <eeprom_read_byte>:
    3342:	e1 99       	sbic	0x1c, 1	; 28
    3344:	fe cf       	rjmp	.-4      	; 0x3342 <eeprom_read_byte>
    3346:	9f bb       	out	0x1f, r25	; 31
    3348:	8e bb       	out	0x1e, r24	; 30
    334a:	e0 9a       	sbi	0x1c, 0	; 28
    334c:	99 27       	eor	r25, r25
    334e:	8d b3       	in	r24, 0x1d	; 29
    3350:	08 95       	ret

00003352 <__divmodsi4>:
    3352:	05 2e       	mov	r0, r21
    3354:	97 fb       	bst	r25, 7
    3356:	1e f4       	brtc	.+6      	; 0x335e <__divmodsi4+0xc>
    3358:	00 94       	com	r0
    335a:	0e 94 c0 19 	call	0x3380	; 0x3380 <__negsi2>
    335e:	57 fd       	sbrc	r21, 7
    3360:	07 d0       	rcall	.+14     	; 0x3370 <__divmodsi4_neg2>
    3362:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__udivmodsi4>
    3366:	07 fc       	sbrc	r0, 7
    3368:	03 d0       	rcall	.+6      	; 0x3370 <__divmodsi4_neg2>
    336a:	4e f4       	brtc	.+18     	; 0x337e <__divmodsi4_exit>
    336c:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__negsi2>

00003370 <__divmodsi4_neg2>:
    3370:	50 95       	com	r21
    3372:	40 95       	com	r20
    3374:	30 95       	com	r19
    3376:	21 95       	neg	r18
    3378:	3f 4f       	sbci	r19, 0xFF	; 255
    337a:	4f 4f       	sbci	r20, 0xFF	; 255
    337c:	5f 4f       	sbci	r21, 0xFF	; 255

0000337e <__divmodsi4_exit>:
    337e:	08 95       	ret

00003380 <__negsi2>:
    3380:	90 95       	com	r25
    3382:	80 95       	com	r24
    3384:	70 95       	com	r23
    3386:	61 95       	neg	r22
    3388:	7f 4f       	sbci	r23, 0xFF	; 255
    338a:	8f 4f       	sbci	r24, 0xFF	; 255
    338c:	9f 4f       	sbci	r25, 0xFF	; 255
    338e:	08 95       	ret

00003390 <__muluhisi3>:
    3390:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__umulhisi3>
    3394:	a5 9f       	mul	r26, r21
    3396:	90 0d       	add	r25, r0
    3398:	b4 9f       	mul	r27, r20
    339a:	90 0d       	add	r25, r0
    339c:	a4 9f       	mul	r26, r20
    339e:	80 0d       	add	r24, r0
    33a0:	91 1d       	adc	r25, r1
    33a2:	11 24       	eor	r1, r1
    33a4:	08 95       	ret

000033a6 <__mulshisi3>:
    33a6:	b7 ff       	sbrs	r27, 7
    33a8:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <__muluhisi3>

000033ac <__mulohisi3>:
    33ac:	0e 94 c8 19 	call	0x3390	; 0x3390 <__muluhisi3>
    33b0:	82 1b       	sub	r24, r18
    33b2:	93 0b       	sbc	r25, r19
    33b4:	08 95       	ret

000033b6 <__udivmodsi4>:
    33b6:	a1 e2       	ldi	r26, 0x21	; 33
    33b8:	1a 2e       	mov	r1, r26
    33ba:	aa 1b       	sub	r26, r26
    33bc:	bb 1b       	sub	r27, r27
    33be:	fd 01       	movw	r30, r26
    33c0:	0d c0       	rjmp	.+26     	; 0x33dc <__udivmodsi4_ep>

000033c2 <__udivmodsi4_loop>:
    33c2:	aa 1f       	adc	r26, r26
    33c4:	bb 1f       	adc	r27, r27
    33c6:	ee 1f       	adc	r30, r30
    33c8:	ff 1f       	adc	r31, r31
    33ca:	a2 17       	cp	r26, r18
    33cc:	b3 07       	cpc	r27, r19
    33ce:	e4 07       	cpc	r30, r20
    33d0:	f5 07       	cpc	r31, r21
    33d2:	20 f0       	brcs	.+8      	; 0x33dc <__udivmodsi4_ep>
    33d4:	a2 1b       	sub	r26, r18
    33d6:	b3 0b       	sbc	r27, r19
    33d8:	e4 0b       	sbc	r30, r20
    33da:	f5 0b       	sbc	r31, r21

000033dc <__udivmodsi4_ep>:
    33dc:	66 1f       	adc	r22, r22
    33de:	77 1f       	adc	r23, r23
    33e0:	88 1f       	adc	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	1a 94       	dec	r1
    33e6:	69 f7       	brne	.-38     	; 0x33c2 <__udivmodsi4_loop>
    33e8:	60 95       	com	r22
    33ea:	70 95       	com	r23
    33ec:	80 95       	com	r24
    33ee:	90 95       	com	r25
    33f0:	9b 01       	movw	r18, r22
    33f2:	ac 01       	movw	r20, r24
    33f4:	bd 01       	movw	r22, r26
    33f6:	cf 01       	movw	r24, r30
    33f8:	08 95       	ret

000033fa <__umulhisi3>:
    33fa:	a2 9f       	mul	r26, r18
    33fc:	b0 01       	movw	r22, r0
    33fe:	b3 9f       	mul	r27, r19
    3400:	c0 01       	movw	r24, r0
    3402:	a3 9f       	mul	r26, r19
    3404:	70 0d       	add	r23, r0
    3406:	81 1d       	adc	r24, r1
    3408:	11 24       	eor	r1, r1
    340a:	91 1d       	adc	r25, r1
    340c:	b2 9f       	mul	r27, r18
    340e:	70 0d       	add	r23, r0
    3410:	81 1d       	adc	r24, r1
    3412:	11 24       	eor	r1, r1
    3414:	91 1d       	adc	r25, r1
    3416:	08 95       	ret

00003418 <_exit>:
    3418:	f8 94       	cli

0000341a <__stop_program>:
    341a:	ff cf       	rjmp	.-2      	; 0x341a <__stop_program>
